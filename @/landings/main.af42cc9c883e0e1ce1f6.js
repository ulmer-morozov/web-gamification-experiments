!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}([function(t){t.exports={glyphs:{0:{x_min:43,x_max:722,ha:765,o:"m 722 495 q 703 281 722 375 q 643 121 684 186 q 538 20 602 55 q 381 -14 473 -14 q 232 20 295 -14 q 126 121 168 55 q 63 281 84 186 q 43 495 43 375 q 61 710 43 615 q 120 871 80 805 q 225 972 161 937 q 381 1007 290 1007 q 530 972 467 1007 q 637 871 594 937 q 700 711 679 806 q 722 495 722 616 m 253 495 q 281 240 253 326 q 381 155 310 155 q 481 240 450 155 q 511 495 511 325 q 481 751 511 665 q 381 837 450 837 q 321 815 346 837 q 281 751 297 794 q 259 644 266 708 q 253 495 253 580 "},1:{x_min:63,x_max:555.25,ha:765,o:"m 555 0 l 345 0 l 345 574 q 345 616 345 591 q 346 668 345 641 q 348 721 347 694 q 350 771 349 749 q 338 759 347 767 q 320 741 330 751 q 299 721 310 731 q 278 702 288 711 l 164 611 l 63 737 l 382 992 l 555 992 l 555 0 "},2:{x_min:53.296875,x_max:720.8125,ha:765,o:"m 720 0 l 56 0 l 56 145 l 287 397 q 367 485 331 444 q 428 563 403 525 q 468 640 454 601 q 482 725 482 679 q 452 803 482 775 q 372 831 422 831 q 269 804 318 831 q 166 729 220 778 l 53 864 q 117 917 83 892 q 190 962 150 942 q 278 994 230 982 q 386 1006 326 1006 q 513 986 457 1006 q 610 930 570 966 q 671 842 650 894 q 693 726 693 790 q 672 614 693 668 q 617 510 652 561 q 535 408 581 459 q 436 305 489 358 l 317 185 l 317 176 l 720 176 l 720 0 "},3:{x_min:39,x_max:711,ha:765,o:"m 682 768 q 665 675 682 717 q 619 603 648 634 q 552 551 591 572 q 467 520 513 531 l 467 516 q 649 443 587 501 q 711 287 711 385 q 687 167 711 222 q 615 71 664 112 q 493 8 567 31 q 320 -14 420 -14 q 170 0 240 -14 q 39 39 99 12 l 39 217 q 103 188 69 200 q 171 166 137 175 q 237 153 204 157 q 299 148 270 148 q 396 159 357 148 q 458 190 435 170 q 490 237 481 210 q 500 298 500 265 q 488 353 500 329 q 447 396 475 378 q 374 423 419 413 q 262 432 328 432 l 192 432 l 192 580 l 260 580 q 362 591 321 580 q 427 622 402 602 q 461 667 451 641 q 471 722 471 693 q 439 806 471 776 q 336 836 406 836 q 276 829 304 836 q 224 813 248 823 q 180 792 200 803 q 145 768 161 780 l 40 908 q 102 946 68 929 q 175 977 135 964 q 259 998 214 991 q 356 1006 305 1006 q 489 989 429 1006 q 592 943 549 973 q 658 869 635 913 q 682 768 682 825 "},4:{x_min:3,x_max:741.625,ha:765,o:"m 741 205 l 622 205 l 622 0 l 412 0 l 412 205 l 3 205 l 3 351 l 423 992 l 622 992 l 622 368 l 741 368 l 741 205 m 412 368 l 412 536 q 412 562 412 545 q 413 599 412 578 q 415 643 414 620 q 417 686 416 665 q 419 721 418 706 q 420 743 420 736 l 414 743 q 387 683 402 715 q 352 619 372 651 l 187 368 l 412 368 "},5:{x_min:58,x_max:707,ha:765,o:"m 405 634 q 524 614 469 634 q 620 556 579 594 q 683 461 660 518 q 707 331 707 405 q 681 186 707 250 q 607 78 656 122 q 486 9 559 33 q 320 -14 414 -14 q 246 -10 283 -14 q 176 0 210 -7 q 112 15 142 5 q 58 39 82 26 l 58 220 q 113 194 81 206 q 178 174 144 182 q 245 160 211 165 q 310 155 279 155 q 449 193 401 155 q 496 313 496 231 q 450 425 496 387 q 306 464 403 464 q 268 462 288 464 q 229 456 248 460 q 192 449 209 453 q 161 442 174 446 l 78 486 l 115 992 l 639 992 l 639 817 l 297 817 l 280 619 q 331 629 302 624 q 405 634 360 634 "},6:{x_min:52,x_max:724,ha:765,o:"m 52 420 q 59 562 52 492 q 87 698 67 633 q 141 818 107 762 q 228 915 176 874 q 354 979 281 956 q 526 1003 428 1003 q 558 1002 541 1003 q 592 1000 574 1001 q 625 997 609 999 q 655 992 642 995 l 655 826 q 600 836 629 832 q 542 840 571 840 q 393 817 451 840 q 299 753 334 794 q 250 655 265 712 q 233 528 236 598 l 241 528 q 273 574 254 553 q 318 611 293 595 q 376 635 344 626 q 448 644 408 644 q 563 622 512 644 q 650 561 615 601 q 705 463 686 521 q 724 329 724 405 q 701 185 724 249 q 636 77 678 121 q 534 9 594 32 q 400 -14 475 -14 q 263 12 327 -14 q 152 91 199 38 q 78 227 105 145 q 52 420 52 308 m 393 155 q 442 165 420 155 q 480 197 464 176 q 504 250 496 218 q 513 327 513 282 q 484 440 513 398 q 396 481 455 481 q 341 469 366 481 q 298 437 316 457 q 271 394 281 418 q 262 345 262 369 q 270 277 262 311 q 295 216 278 243 q 336 172 311 189 q 393 155 360 155 "},7:{x_min:37,x_max:721,ha:765,o:"m 140 0 l 493 815 l 37 815 l 37 990 l 721 990 l 721 859 l 359 0 l 140 0 "},8:{x_min:49,x_max:717,ha:765,o:"m 383 1004 q 499 989 444 1004 q 595 944 554 974 q 661 869 637 914 q 686 764 686 825 q 672 683 686 720 q 635 618 658 647 q 579 565 611 588 q 508 523 546 542 q 585 476 547 502 q 652 418 623 450 q 699 346 681 386 q 717 256 717 306 q 692 144 717 195 q 624 59 668 94 q 518 5 580 24 q 383 -14 457 -14 q 240 4 303 -14 q 135 56 178 22 q 71 140 93 90 q 49 251 49 189 q 63 342 49 302 q 104 416 78 383 q 165 473 130 448 q 239 518 199 499 q 176 563 205 539 q 126 618 147 588 q 92 685 105 648 q 80 766 80 722 q 104 869 80 825 q 171 944 129 913 q 268 989 213 974 q 383 1004 323 1004 m 259 263 q 267 213 259 236 q 290 174 274 190 q 328 149 305 158 q 381 139 351 139 q 475 173 444 139 q 506 262 506 207 q 496 313 506 290 q 469 355 485 336 q 431 391 452 374 q 389 422 410 407 l 376 431 q 328 399 349 417 q 291 361 306 382 q 267 316 276 340 q 259 263 259 292 m 382 850 q 345 843 362 850 q 316 823 328 836 q 297 791 304 810 q 290 749 290 773 q 297 700 290 721 q 317 664 305 679 q 347 635 330 648 q 383 611 364 623 q 418 634 401 621 q 447 664 434 647 q 468 701 460 680 q 475 749 475 722 q 468 791 475 773 q 449 823 461 810 q 419 843 436 836 q 382 850 402 850 "},9:{x_min:43,x_max:715,ha:765,o:"m 715 568 q 707 425 715 496 q 679 290 699 355 q 625 170 659 226 q 538 73 590 114 q 412 9 485 32 q 239 -14 338 -14 q 208 -13 225 -14 q 174 -11 191 -12 q 140 -8 156 -10 q 112 -4 124 -7 l 112 163 q 165 152 136 156 q 224 148 194 148 q 373 171 315 148 q 467 235 432 194 q 516 333 501 276 q 533 459 530 390 l 525 459 q 492 413 511 434 q 448 377 473 392 q 390 352 422 361 q 318 344 357 344 q 202 365 254 344 q 116 426 151 386 q 61 524 80 466 q 43 658 43 582 q 65 802 43 739 q 130 911 88 866 q 232 979 172 955 q 366 1003 292 1003 q 503 976 439 1003 q 614 897 567 950 q 687 761 660 843 q 715 568 715 679 m 373 833 q 324 823 347 833 q 286 792 302 813 q 262 738 270 770 q 253 661 253 705 q 282 548 253 590 q 371 506 311 506 q 425 518 401 506 q 468 550 450 530 q 495 594 485 569 q 504 643 504 618 q 496 711 504 677 q 471 772 488 745 q 430 816 455 799 q 373 833 406 833 "},"ǻ":{x_min:58,x_max:694,ha:798,o:"m 306 1189 l 306 1199 q 336 1229 320 1213 q 369 1263 353 1246 q 399 1298 385 1281 q 425 1331 414 1316 l 657 1331 l 657 1322 q 620 1292 646 1310 q 562 1255 594 1275 q 498 1218 530 1236 q 443 1189 466 1201 l 306 1189 m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 572 975 q 558 907 572 937 q 522 856 545 877 q 467 824 498 835 q 399 813 436 813 q 330 824 362 813 q 277 856 299 835 q 243 906 255 876 q 231 974 231 937 q 243 1041 231 1011 q 277 1091 255 1071 q 330 1123 299 1112 q 399 1135 362 1135 q 466 1123 435 1135 q 521 1091 497 1112 q 558 1041 544 1071 q 572 975 572 1012 m 467 974 q 448 1021 467 1004 q 401 1038 430 1038 q 354 1021 372 1038 q 335 974 335 1004 q 351 926 335 944 q 401 909 368 909 q 448 926 430 909 q 467 974 467 944 "},"Á":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 335 1071 l 335 1089 q 365 1134 349 1108 q 397 1187 381 1160 q 427 1242 413 1215 q 453 1293 442 1269 l 685 1293 l 685 1278 q 663 1250 677 1266 q 630 1214 649 1233 q 591 1175 612 1195 q 549 1136 570 1155 q 507 1100 527 1117 q 472 1071 488 1083 l 335 1071 "},"ĥ":{x_min:109,x_max:767,ha:871,o:"m 767 0 l 560 0 l 560 442 q 534 565 560 524 q 456 606 509 606 q 389 590 416 606 q 345 542 362 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 1055 l 315 1055 l 315 840 q 314 780 315 811 q 311 722 313 748 q 306 661 308 690 l 317 661 q 402 746 350 720 q 518 773 453 773 q 620 757 575 773 q 699 707 666 741 q 749 620 731 673 q 767 494 767 568 l 767 0 m 594 1109 q 522 1161 559 1131 q 449 1227 484 1190 q 377 1161 412 1190 q 307 1109 342 1131 l 170 1109 l 170 1127 q 209 1172 187 1146 q 252 1225 230 1198 q 294 1280 274 1253 q 330 1331 315 1307 l 571 1331 q 606 1280 586 1307 q 648 1225 626 1253 q 692 1172 670 1198 q 732 1127 715 1146 l 732 1109 l 594 1109 "},"Κ":{x_min:125,x_max:880.25,ha:880,o:"m 880 0 l 641 0 l 413 412 l 335 354 l 335 0 l 125 0 l 125 992 l 335 992 l 335 514 l 417 654 l 644 992 l 877 992 l 561 544 l 880 0 "},"»":{x_min:58,x_max:759,ha:813,o:"m 759 370 l 549 63 l 401 143 l 548 380 l 401 616 l 549 697 l 759 388 l 759 370 m 416 370 l 206 63 l 58 143 l 205 380 l 58 616 l 206 697 l 416 388 l 416 370 "},"∆":{x_min:39,x_max:820,ha:859,o:"m 39 120 l 311 996 l 549 996 l 820 119 l 820 0 l 39 0 l 39 120 m 457 701 q 451 726 455 709 q 442 764 446 744 q 434 800 437 783 q 429 823 430 817 q 425 800 429 817 q 417 764 422 783 q 409 726 413 744 q 403 700 405 708 l 253 174 l 606 174 l 457 701 "},"ў":{x_min:-.25,x_max:749.25,ha:749,o:"m 0 758 l 226 758 l 348 331 q 364 256 359 296 q 371 184 369 216 l 375 184 q 378 219 376 200 q 384 257 381 238 q 392 296 388 277 q 401 331 396 316 l 521 758 l 749 758 l 449 -96 q 334 -275 407 -217 q 152 -334 261 -334 q 91 -330 116 -334 q 47 -322 65 -326 l 47 -158 q 83 -164 61 -161 q 128 -167 104 -167 q 184 -158 161 -167 q 224 -133 207 -149 q 252 -95 240 -117 q 273 -44 264 -72 l 286 -6 l 0 758 m 702 1085 q 677 985 696 1030 q 618 909 657 941 q 518 859 580 877 q 367 842 457 842 q 215 858 275 842 q 117 907 154 875 q 64 983 81 939 q 44 1085 48 1028 l 230 1085 q 243 1020 233 1045 q 269 981 252 995 q 311 961 285 967 q 373 955 337 955 q 427 962 402 955 q 470 983 452 968 q 499 1023 488 998 q 515 1085 511 1048 l 702 1085 "},"ţ":{x_min:32,x_max:530,ha:575,o:"m 416 152 q 474 158 446 152 q 530 175 501 165 l 530 20 q 457 -4 500 5 q 364 -14 414 -14 q 271 -2 314 -14 q 198 38 229 9 q 148 115 166 67 q 131 237 131 164 l 131 604 l 32 604 l 32 691 l 145 759 l 205 919 l 337 919 l 337 758 l 521 758 l 521 604 l 337 604 l 337 238 q 359 173 337 194 q 416 152 381 152 m 174 -288 q 186 -242 180 -268 q 197 -188 192 -216 q 208 -134 203 -161 q 215 -85 213 -107 l 407 -85 l 407 -98 q 358 -198 386 -145 q 294 -307 330 -251 l 174 -307 l 174 -288 "},"«":{x_min:56,x_max:757,ha:813,o:"m 56 388 l 265 697 l 414 616 l 266 380 l 414 143 l 265 63 l 56 370 l 56 388 m 399 388 l 608 697 l 757 616 l 609 380 l 757 143 l 608 63 l 399 370 l 399 388 "},"í":{x_min:99,x_max:449,ha:424,o:"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 99 842 l 99 860 q 129 905 113 879 q 161 958 145 931 q 191 1013 177 986 q 217 1064 206 1040 l 449 1064 l 449 1049 q 427 1021 441 1037 q 394 985 413 1004 q 355 946 376 966 q 313 907 334 926 q 271 871 291 888 q 236 842 252 854 l 99 842 "},"ņ":{x_min:109,x_max:767,ha:871,o:"m 767 0 l 560 0 l 560 442 q 535 565 560 524 q 456 606 510 606 q 388 590 415 606 q 345 542 361 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 346 711 322 690 q 397 746 369 732 q 456 766 425 760 q 520 773 487 773 q 621 757 575 773 q 699 707 666 741 q 749 620 731 673 q 767 494 767 568 l 767 0 m 317 -288 q 329 -242 323 -268 q 340 -188 335 -216 q 351 -134 346 -161 q 358 -85 356 -107 l 550 -85 l 550 -98 q 501 -198 529 -145 q 437 -307 473 -251 l 317 -307 l 317 -288 "},"µ":{x_min:109,x_max:766,ha:875,o:"m 315 315 q 341 193 315 234 q 421 152 366 152 q 486 168 460 152 q 529 216 513 184 q 552 295 545 248 q 559 401 559 341 l 559 758 l 766 758 l 766 0 l 607 0 l 578 102 l 570 102 q 511 15 547 44 q 425 -14 476 -14 q 358 1 388 -14 q 309 47 328 17 q 312 -10 310 18 q 314 -64 313 -35 q 315 -117 315 -92 l 315 -334 l 109 -334 l 109 758 l 315 758 l 315 315 "},"ỳ":{x_min:-.25,x_max:749.25,ha:749,o:"m 0 758 l 226 758 l 348 331 q 364 256 359 296 q 371 184 369 216 l 375 184 q 378 219 376 200 q 384 257 381 238 q 392 296 388 277 q 401 331 396 316 l 521 758 l 749 758 l 449 -96 q 334 -275 407 -217 q 152 -334 261 -334 q 91 -330 116 -334 q 47 -322 65 -326 l 47 -158 q 83 -164 61 -161 q 128 -167 104 -167 q 184 -158 161 -167 q 224 -133 207 -149 q 252 -95 240 -117 q 273 -44 264 -72 l 286 -6 l 0 758 m 324 842 q 269 889 301 860 q 205 946 236 917 q 148 1004 174 976 q 112 1049 122 1031 l 112 1064 l 343 1064 q 369 1013 354 1040 q 399 958 383 986 q 431 905 415 931 q 462 860 447 879 l 462 842 l 324 842 "},"Ι":{x_min:44.28125,x_max:495.96875,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 "},"Ύ":{x_min:-39,x_max:1005.25,ha:1004,o:"m 599 583 l 778 992 l 1005 992 l 704 385 l 704 0 l 494 0 l 494 379 l 192 992 l 420 992 l 599 583 m -39 789 q -26 835 -32 809 q -15 889 -20 861 q -5 943 -9 916 q 2 993 0 970 l 194 993 l 194 978 q 145 879 173 932 q 81 771 117 826 l -39 771 l -39 789 "},"ѕ":{x_min:66,x_max:614,ha:668,o:"m 614 225 q 592 120 614 165 q 530 45 570 75 q 433 0 490 15 q 305 -14 376 -14 q 236 -11 268 -14 q 176 -3 204 -9 q 121 9 147 1 q 67 30 94 17 l 67 201 q 127 176 95 187 q 189 156 158 164 q 249 143 220 148 q 304 139 279 139 q 351 144 331 139 q 383 158 370 149 q 401 179 395 167 q 407 205 407 191 q 402 230 407 219 q 382 254 398 242 q 337 283 367 267 q 256 322 307 299 q 171 366 207 344 q 112 415 135 388 q 77 477 88 442 q 66 561 66 512 q 86 653 66 614 q 144 720 106 693 q 234 759 181 746 q 351 773 286 773 q 480 757 419 773 q 605 710 541 741 l 543 564 q 445 604 492 588 q 352 619 398 619 q 291 604 310 619 q 272 563 272 589 q 277 539 272 550 q 296 518 282 529 q 336 493 310 506 q 403 461 362 480 q 490 419 451 440 q 556 372 528 398 q 599 310 584 345 q 614 225 614 275 "},"Ш":{x_min:125,x_max:1317,ha:1442,o:"m 825 174 l 1106 174 l 1106 992 l 1317 992 l 1317 0 l 125 0 l 125 992 l 335 992 l 335 174 l 615 174 l 615 992 l 825 992 l 825 174 "},M:{x_min:125,x_max:1143,ha:1268,o:"m 523 0 l 305 778 l 299 778 q 306 657 303 715 q 308 605 307 632 q 310 553 309 579 q 311 503 311 527 q 312 461 312 480 l 312 0 l 125 0 l 125 992 l 410 992 l 625 233 l 629 233 l 856 992 l 1143 992 l 1143 0 l 947 0 l 947 469 q 947 509 947 487 q 948 556 947 531 q 950 607 949 581 q 951 657 951 633 q 956 776 954 714 l 951 776 l 716 0 l 523 0 "},"Ψ":{x_min:74,x_max:1088,ha:1161,o:"m 1088 667 q 1067 510 1088 578 q 1000 393 1046 441 q 882 321 954 346 q 706 296 809 296 l 674 296 l 674 0 l 487 0 l 487 296 l 455 296 q 279 320 351 296 q 160 391 206 344 q 94 507 115 439 q 74 664 74 576 l 74 992 l 270 992 l 270 665 q 283 566 270 605 q 321 504 296 526 q 383 472 347 481 q 468 462 420 462 l 487 462 l 487 992 l 674 992 l 674 462 l 692 462 q 771 471 735 462 q 835 502 808 479 q 876 563 861 524 q 892 662 892 602 l 892 992 l 1088 992 l 1088 667 "},"ũ":{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 322 906 q 288 890 301 906 q 268 840 276 874 l 167 840 q 184 934 171 894 q 220 999 198 973 q 272 1037 242 1024 q 337 1050 301 1050 q 391 1040 365 1050 q 444 1017 418 1030 q 495 995 470 1005 q 545 985 521 985 q 578 1001 566 985 q 599 1051 591 1017 l 701 1051 q 683 958 696 997 q 646 893 669 919 q 594 854 624 867 q 530 842 565 842 q 476 852 503 842 q 423 874 448 862 q 372 896 397 886 q 322 906 346 906 "},"ŭ":{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 678 1071 q 656 978 674 1020 q 608 906 639 936 q 532 858 576 875 q 429 842 487 842 q 325 858 369 842 q 250 904 280 874 q 204 976 220 934 q 186 1071 188 1018 l 301 1071 q 313 1024 304 1041 q 339 998 323 1007 q 378 987 355 989 q 430 985 401 985 q 477 988 455 985 q 516 1000 499 991 q 545 1026 534 1009 q 559 1071 557 1043 l 678 1071 "},"―":{x_min:56,x_max:1333,ha:1389,o:"m 56 296 l 56 452 l 1333 452 l 1333 296 l 56 296 "},"{":{x_min:21,x_max:492,ha:505,o:"m 195 183 q 150 277 195 249 q 21 304 105 304 l 21 467 q 96 473 63 467 q 151 494 129 479 q 185 532 173 509 q 195 587 196 555 l 195 803 q 207 889 195 853 q 254 947 220 924 q 345 981 287 970 q 492 992 403 992 l 492 838 q 442 833 464 838 q 405 819 420 829 q 382 790 390 808 q 374 743 374 772 l 374 540 q 215 390 369 414 l 215 382 q 334 333 293 370 q 374 232 376 295 l 374 29 q 382 -18 374 0 q 405 -47 390 -36 q 442 -61 420 -57 q 492 -66 464 -66 l 492 -220 q 345 -209 403 -220 q 254 -175 287 -198 q 207 -116 220 -152 q 195 -30 195 -80 l 195 183 "},"¼":{x_min:32,x_max:1141.203125,ha:1224,o:"m 929 992 l 378 0 l 216 0 l 767 992 l 929 992 m 365 397 l 204 397 l 204 700 q 204 734 204 713 q 205 776 204 755 q 207 814 206 797 q 209 840 208 832 q 198 828 205 835 q 185 813 192 820 q 171 799 178 805 q 158 787 164 792 l 105 746 l 32 832 l 235 992 l 365 992 l 365 397 m 1141 101 l 1056 101 l 1056 0 l 895 0 l 895 101 l 635 101 l 635 207 l 896 599 l 1056 599 l 1056 217 l 1141 217 l 1141 101 m 895 217 l 895 328 q 896 388 895 356 q 899 453 897 419 q 889 429 895 444 q 875 399 882 415 q 860 370 867 384 q 846 346 852 356 l 760 217 l 895 217 "},"Ḿ":{x_min:125,x_max:1143,ha:1268,o:"m 523 0 l 305 778 l 299 778 q 306 657 303 715 q 308 605 307 632 q 310 553 309 579 q 311 503 311 527 q 312 461 312 480 l 312 0 l 125 0 l 125 992 l 410 992 l 625 233 l 629 233 l 856 992 l 1143 992 l 1143 0 l 947 0 l 947 469 q 947 509 947 487 q 948 556 947 531 q 950 607 949 581 q 951 657 951 633 q 956 776 954 714 l 951 776 l 716 0 l 523 0 m 533 1073 l 533 1091 q 563 1136 547 1110 q 595 1189 579 1162 q 625 1244 611 1217 q 651 1295 640 1271 l 883 1295 l 883 1280 q 861 1252 875 1268 q 828 1216 847 1235 q 789 1177 810 1197 q 747 1138 768 1157 q 705 1102 725 1119 q 670 1073 686 1085 l 533 1073 "},"ι":{x_min:109,x_max:509,ha:538,o:"m 315 758 l 315 236 q 337 171 315 192 q 395 150 359 150 q 453 157 425 150 q 509 174 480 164 l 509 20 q 436 -4 479 5 q 342 -14 393 -14 q 250 -2 292 -14 q 176 37 207 9 q 126 115 144 66 q 109 237 109 163 l 109 758 l 315 758 "},"Ĳ":{x_min:44.28125,x_max:876,ha:1e3,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 539 -292 q 462 -287 495 -292 q 406 -277 429 -283 l 406 -103 q 458 -112 431 -108 q 518 -117 486 -117 q 576 -110 549 -117 q 623 -86 603 -103 q 654 -42 643 -70 q 665 27 665 -14 l 665 992 l 876 992 l 876 35 q 851 -111 876 -49 q 782 -213 826 -173 q 675 -273 737 -254 q 539 -292 614 -292 "},"Ê":{x_min:125,x_max:703,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 565 1071 q 493 1123 530 1093 q 420 1189 455 1152 q 348 1123 383 1152 q 278 1071 313 1093 l 141 1071 l 141 1089 q 180 1134 158 1108 q 223 1187 201 1160 q 265 1242 245 1215 q 301 1293 286 1269 l 542 1293 q 577 1242 557 1269 q 619 1187 597 1215 q 663 1134 641 1160 q 703 1089 686 1108 l 703 1071 l 565 1071 "},"Ά":{x_min:-37,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m -37 789 q -24 835 -30 809 q -13 889 -18 861 q -3 943 -7 916 q 4 993 1 970 l 196 993 l 196 978 q 147 879 175 932 q 83 771 119 826 l -37 771 l -37 789 "},")":{x_min:41,x_max:415,ha:471,o:"m 415 380 q 402 214 415 296 q 365 57 390 133 q 301 -89 340 -19 q 210 -220 263 -158 l 42 -220 q 125 -84 89 -156 q 186 64 162 -12 q 223 221 211 141 q 235 381 235 301 q 186 704 235 547 q 41 992 137 861 l 210 992 q 301 857 263 928 q 365 708 340 785 q 402 547 390 630 q 415 380 415 465 "},"ε":{x_min:53,x_max:677,ha:729,o:"m 531 464 l 531 316 l 432 316 q 299 292 340 316 q 259 221 259 267 q 268 187 259 202 q 297 161 277 172 q 348 145 317 150 q 424 139 379 139 q 498 144 462 139 q 566 159 533 150 q 626 180 598 168 q 676 203 654 191 l 676 38 q 557 0 627 14 q 400 -14 488 -14 q 242 1 308 -14 q 134 46 177 17 q 72 115 92 74 q 53 206 53 156 q 66 278 53 248 q 104 330 79 308 q 163 366 128 352 q 240 387 198 379 l 240 394 q 129 457 165 411 q 93 571 93 502 q 117 664 93 626 q 184 726 142 702 q 283 762 227 751 q 403 773 340 773 q 477 768 440 773 q 550 757 515 764 q 617 739 585 749 q 677 716 649 728 l 620 566 q 527 603 576 586 q 421 619 478 619 q 365 615 390 619 q 324 603 341 612 q 297 581 306 594 q 287 547 287 567 q 325 483 287 502 q 444 464 363 464 l 531 464 "},"э":{x_min:50,x_max:607,ha:676,o:"m 266 -14 q 147 -3 199 -14 q 50 32 96 7 l 50 193 q 144 154 95 170 q 250 139 194 139 q 351 177 312 139 q 395 303 389 216 l 148 303 l 148 451 l 395 451 q 267 619 386 619 q 185 606 224 619 q 112 576 145 593 l 54 718 q 99 738 74 728 q 153 755 124 747 q 214 768 182 763 q 280 773 246 773 q 409 754 349 773 q 513 691 469 735 q 581 572 556 646 q 607 387 607 498 q 584 209 607 284 q 518 83 561 133 q 411 10 474 34 q 266 -14 347 -14 "},"ш":{x_min:109,x_max:1195,ha:1304,o:"m 1195 0 l 109 0 l 109 758 l 315 758 l 315 153 l 549 153 l 549 758 l 755 758 l 755 153 l 988 153 l 988 758 l 1195 758 l 1195 0 "},"Я":{x_min:-7.25,x_max:743,ha:868,o:"m 449 381 l 226 0 l -7 0 l 270 444 q 210 478 240 457 q 155 532 179 499 q 116 609 131 564 q 101 716 101 654 q 193 923 101 854 q 470 992 286 992 l 743 992 l 743 0 l 532 0 l 532 381 l 449 381 m 532 817 l 449 817 q 347 787 383 817 q 311 690 311 758 q 345 586 311 624 q 453 547 380 547 l 532 547 l 532 817 "},a:{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 "},"Ę":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 520 -154 q 535 -196 520 -182 q 574 -209 550 -209 q 617 -205 595 -209 q 652 -197 638 -201 l 652 -318 q 605 -329 630 -324 q 546 -334 580 -334 q 475 -322 507 -334 q 422 -290 444 -310 q 388 -241 400 -269 q 377 -177 377 -212 q 386 -124 377 -148 q 412 -78 395 -99 q 451 -38 429 -57 q 499 0 473 -19 l 620 0 q 546 -81 573 -44 q 520 -154 520 -118 "},Z:{x_min:33,x_max:716,ha:749,o:"m 716 0 l 33 0 l 33 137 l 453 817 l 45 817 l 45 992 l 703 992 l 703 855 l 283 174 l 716 174 l 716 0 "}," ":{x_min:0,x_max:0,ha:231},k:{x_min:109,x_max:819.25,ha:819,o:"m 307 412 l 383 527 l 568 758 l 801 758 l 527 429 l 819 0 l 580 0 l 396 291 l 315 235 l 315 0 l 109 0 l 109 1055 l 315 1055 l 315 584 l 305 412 l 307 412 "},"Ù":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 479 1071 q 424 1118 456 1089 q 360 1175 391 1146 q 303 1233 329 1205 q 267 1278 277 1260 l 267 1293 l 498 1293 q 524 1242 509 1269 q 554 1187 538 1215 q 586 1134 570 1160 q 617 1089 602 1108 l 617 1071 l 479 1071 "},"Ů":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 671 1231 q 657 1163 671 1193 q 621 1112 644 1133 q 566 1080 597 1091 q 498 1069 535 1069 q 430 1080 461 1069 q 377 1112 399 1091 q 343 1162 355 1132 q 331 1230 331 1193 q 343 1297 331 1267 q 377 1347 355 1327 q 430 1379 399 1368 q 498 1391 461 1391 q 566 1379 534 1391 q 620 1347 597 1368 q 657 1297 643 1327 q 671 1231 671 1268 m 565 1230 q 547 1278 565 1260 q 501 1295 529 1295 q 454 1278 472 1295 q 436 1230 436 1260 q 452 1182 436 1199 q 501 1164 468 1164 q 547 1182 529 1164 q 565 1230 565 1199 "},"¢":{x_min:97,x_max:672.984375,ha:765,o:"m 368 -14 l 368 126 q 255 160 305 134 q 170 230 205 185 q 115 343 134 276 q 97 504 97 411 q 115 668 97 599 q 170 783 134 737 q 256 855 206 829 q 368 889 306 880 l 368 1006 l 488 1006 l 488 895 q 540 890 514 894 q 590 881 565 887 q 635 869 614 876 q 672 855 656 863 l 614 705 q 582 718 600 711 q 545 729 564 724 q 507 737 526 734 q 472 741 488 741 q 396 727 427 741 q 344 685 365 713 q 316 613 324 656 q 307 510 307 570 q 346 339 307 393 q 472 284 384 284 q 572 297 524 284 q 654 326 620 309 l 654 164 q 577 133 619 144 q 488 122 535 123 l 488 -14 l 368 -14 "},"В":{x_min:125,x_max:818,ha:892,o:"m 125 992 l 415 992 q 579 978 508 992 q 697 936 649 965 q 768 858 744 906 q 793 740 793 810 q 782 662 793 698 q 752 597 772 625 q 705 551 733 569 q 640 526 677 532 l 640 519 q 709 496 677 511 q 766 454 742 480 q 804 386 790 427 q 818 287 818 345 q 794 166 818 219 q 726 76 770 113 q 618 19 681 39 q 474 0 554 0 l 125 0 l 125 992 m 335 599 l 444 599 q 509 606 483 599 q 552 627 536 613 q 575 662 568 641 q 582 711 582 683 q 547 792 582 768 q 434 817 511 817 l 335 817 l 335 599 m 335 432 l 335 174 l 459 174 q 529 184 501 174 q 575 211 557 193 q 600 253 592 228 q 607 309 607 278 q 600 359 607 336 q 574 398 592 382 q 527 423 556 414 q 454 432 497 432 l 335 432 "},"І":{x_min:44.28125,x_max:495.96875,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 "},"ē":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 204 985 l 622 985 l 622 842 l 204 842 l 204 985 "},"β":{x_min:109,x_max:827,ha:875,o:"m 450 1063 q 579 1046 520 1063 q 681 996 638 1029 q 748 913 724 963 q 773 796 773 862 q 721 636 773 695 q 574 562 669 578 l 574 558 q 679 532 633 551 q 759 481 726 513 q 809 402 791 449 q 827 292 827 356 q 805 162 827 219 q 743 66 783 105 q 646 6 702 27 q 519 -14 589 -14 q 406 -3 458 -14 q 315 28 354 7 l 315 -334 l 109 -334 l 109 743 q 135 887 109 826 q 207 986 161 947 q 315 1044 252 1025 q 450 1063 377 1063 m 444 896 q 394 888 418 896 q 353 860 371 880 q 326 806 336 840 q 315 720 315 772 l 315 199 q 349 179 330 188 q 388 164 368 171 q 427 155 408 158 q 464 152 447 152 q 578 193 540 152 q 615 311 615 235 q 601 382 615 353 q 563 429 587 411 q 506 455 538 447 q 437 462 474 462 l 388 462 l 388 629 l 424 629 q 487 639 461 629 q 531 667 513 649 q 557 712 549 686 q 566 769 566 737 q 532 865 566 833 q 444 896 499 896 "},"≠":{x_min:60,x_max:705,ha:765,o:"m 367 284 l 281 97 l 145 154 l 204 284 l 60 284 l 60 433 l 273 433 l 327 546 l 60 546 l 60 695 l 395 695 l 484 885 l 620 827 l 557 695 l 705 695 l 705 546 l 490 546 l 436 433 l 705 433 l 705 284 l 367 284 "},"‼":{x_min:79,x_max:712,ha:791,o:"m 281 330 l 116 330 l 81 992 l 316 992 l 281 330 m 79 97 q 88 151 79 129 q 113 187 97 173 q 151 206 129 200 q 198 213 173 213 q 243 206 221 213 q 280 187 264 200 q 306 151 297 173 q 316 97 316 129 q 306 45 316 66 q 280 9 297 23 q 243 -11 264 -5 q 198 -18 221 -18 q 151 -11 173 -18 q 113 9 129 -5 q 88 45 97 23 q 79 97 79 66 m 677 330 l 512 330 l 477 992 l 712 992 l 677 330 m 475 97 q 484 151 475 129 q 509 187 493 173 q 547 206 525 200 q 594 213 569 213 q 639 206 617 213 q 676 187 660 200 q 702 151 693 173 q 712 97 712 129 q 702 45 712 66 q 676 9 693 23 q 639 -11 660 -5 q 594 -18 617 -18 q 547 -11 569 -18 q 509 9 525 -5 q 484 45 493 23 q 475 97 475 66 "},"¥":{x_min:4.75,x_max:776.25,ha:765,o:"m 390 583 l 563 992 l 776 992 l 530 485 l 662 485 l 662 364 l 496 364 l 496 271 l 662 271 l 662 150 l 496 150 l 496 0 l 286 0 l 286 150 l 117 150 l 117 271 l 286 271 l 286 364 l 117 364 l 117 485 l 247 485 l 4 992 l 219 992 l 390 583 "},"Ĥ":{x_min:125,x_max:882,ha:1007,o:"m 882 0 l 671 0 l 671 428 l 335 428 l 335 0 l 125 0 l 125 992 l 335 992 l 335 603 l 671 603 l 671 992 l 882 992 l 882 0 m 642 1071 q 570 1123 607 1093 q 497 1189 532 1152 q 425 1123 460 1152 q 355 1071 390 1093 l 218 1071 l 218 1089 q 257 1134 235 1108 q 300 1187 278 1160 q 342 1242 322 1215 q 378 1293 363 1269 l 619 1293 q 654 1242 634 1269 q 696 1187 674 1215 q 740 1134 718 1160 q 780 1089 763 1108 l 780 1071 l 642 1071 "},U:{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 "},"Ñ":{x_min:125,x_max:963,ha:1088,o:"m 963 0 l 697 0 l 305 750 l 299 750 q 306 646 303 698 q 310 554 308 602 q 312 466 312 505 l 312 0 l 125 0 l 125 992 l 389 992 l 781 248 l 785 248 q 780 350 783 300 q 778 395 779 372 q 777 440 777 417 q 776 484 776 463 q 775 522 775 505 l 775 992 l 963 992 l 963 0 m 423 1135 q 389 1119 402 1135 q 369 1069 377 1103 l 268 1069 q 285 1163 272 1123 q 321 1228 299 1202 q 373 1266 343 1253 q 438 1279 402 1279 q 492 1269 466 1279 q 545 1246 519 1259 q 596 1224 571 1234 q 646 1214 622 1214 q 679 1230 667 1214 q 700 1280 692 1246 l 802 1280 q 784 1187 797 1226 q 747 1122 770 1148 q 695 1083 725 1096 q 631 1071 666 1071 q 577 1081 604 1071 q 524 1103 549 1091 q 473 1125 498 1115 q 423 1135 447 1135 "},F:{x_min:125,x_max:693,ha:762,o:"m 330 0 l 125 0 l 125 992 l 693 992 l 693 817 l 330 817 l 330 564 l 667 564 l 667 389 l 330 389 l 330 0 "},"ϑ":{x_min:28.03125,x_max:933.140625,ha:975,o:"m 628 675 q 609 777 622 732 q 576 853 595 822 q 533 900 558 884 q 482 916 509 916 q 430 897 449 916 q 410 840 410 878 q 422 780 410 809 q 459 727 433 750 q 526 690 484 704 q 628 675 567 675 m 845 524 q 846 511 846 519 q 847 494 847 503 q 847 477 847 485 q 847 463 847 468 q 838 339 847 399 q 809 226 829 279 q 758 129 790 173 q 681 53 727 85 q 576 3 636 21 q 440 -14 516 -14 q 300 4 354 -14 q 215 55 246 23 q 174 127 185 86 q 163 210 163 167 q 167 281 163 246 q 171 346 171 317 q 162 384 171 374 q 135 393 152 393 q 103 387 120 393 q 76 374 87 380 l 28 500 q 119 541 68 523 q 233 560 170 560 q 332 528 296 560 q 367 437 367 496 q 362 349 367 394 q 357 256 357 304 q 363 215 357 234 q 382 182 369 196 q 416 160 396 168 q 467 152 437 152 q 593 230 550 152 q 635 478 635 309 q 635 486 635 480 q 635 498 635 492 q 635 511 635 505 q 634 521 634 517 q 433 552 515 523 q 300 628 351 581 q 226 732 249 674 q 204 849 204 790 q 219 938 204 897 q 269 1008 235 978 q 352 1053 302 1037 q 471 1070 403 1070 q 621 1040 558 1070 q 727 958 684 1011 q 796 833 771 906 q 834 675 822 761 l 933 675 l 933 524 l 845 524 "},"Ќ":{x_min:125,x_max:878.25,ha:878,o:"m 878 0 l 639 0 l 335 502 l 335 0 l 125 0 l 125 992 l 335 992 l 335 511 l 635 992 l 859 992 l 552 515 l 878 0 m 338 1071 l 338 1089 q 368 1134 352 1108 q 400 1187 384 1160 q 430 1242 416 1215 q 456 1293 445 1269 l 688 1293 l 688 1278 q 666 1250 680 1266 q 633 1214 652 1233 q 594 1175 615 1195 q 552 1136 573 1155 q 510 1100 530 1117 q 475 1071 491 1083 l 338 1071 "},"å":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 571 1002 q 557 934 571 964 q 521 883 544 904 q 466 851 497 862 q 398 840 435 840 q 330 851 361 840 q 277 883 299 862 q 243 933 255 903 q 231 1001 231 964 q 243 1068 231 1038 q 277 1118 255 1098 q 330 1150 299 1139 q 398 1162 361 1162 q 466 1150 434 1162 q 520 1118 497 1139 q 557 1068 543 1098 q 571 1002 571 1039 m 465 1001 q 447 1049 465 1031 q 401 1066 429 1066 q 354 1049 372 1066 q 336 1001 336 1031 q 352 953 336 970 q 401 935 368 935 q 447 953 429 935 q 465 1001 465 970 "},"Ϋ":{x_min:-.25,x_max:812.25,ha:811,o:"m 406 583 l 585 992 l 812 992 l 511 385 l 511 0 l 301 0 l 301 379 l 0 992 l 227 992 l 406 583 m 174 1182 q 181 1223 174 1206 q 201 1251 188 1240 q 231 1268 214 1263 q 268 1274 248 1274 q 305 1268 288 1274 q 335 1251 322 1263 q 356 1223 348 1240 q 364 1182 364 1206 q 356 1142 364 1159 q 335 1114 348 1125 q 305 1097 322 1102 q 268 1092 288 1092 q 231 1097 248 1092 q 201 1114 214 1102 q 181 1142 188 1125 q 174 1182 174 1159 m 447 1182 q 454 1223 447 1206 q 474 1251 461 1240 q 505 1268 487 1263 q 543 1274 522 1274 q 579 1268 562 1274 q 610 1251 596 1263 q 631 1223 623 1240 q 639 1182 639 1206 q 631 1142 639 1159 q 610 1114 623 1125 q 579 1097 596 1102 q 543 1092 562 1092 q 474 1114 502 1092 q 447 1182 447 1136 "},"ō":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 m 206 985 l 624 985 l 624 842 l 206 842 l 206 985 "},"”":{x_min:16,x_max:601,ha:615,o:"m 284 977 q 261 898 274 939 q 232 815 248 857 q 198 731 216 772 q 164 652 181 690 l 16 652 q 35 737 25 692 q 54 827 45 782 q 71 913 63 871 q 83 992 78 956 l 273 992 l 284 977 m 601 977 q 578 898 591 939 q 548 815 564 857 q 515 731 532 772 q 481 652 498 690 l 332 652 q 352 737 342 692 q 371 827 362 782 q 387 913 380 871 q 400 992 395 956 l 590 992 l 601 977 "},"ö":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 m 181 953 q 188 994 181 977 q 208 1022 195 1011 q 238 1039 221 1034 q 275 1045 255 1045 q 312 1039 295 1045 q 342 1022 329 1034 q 363 994 355 1011 q 371 953 371 977 q 363 913 371 930 q 342 885 355 896 q 312 868 329 873 q 275 863 295 863 q 238 868 255 863 q 208 885 221 873 q 188 913 195 896 q 181 953 181 930 m 454 953 q 461 994 454 977 q 481 1022 468 1011 q 512 1039 494 1034 q 550 1045 529 1045 q 586 1039 569 1045 q 617 1022 603 1034 q 638 994 630 1011 q 646 953 646 977 q 638 913 646 930 q 617 885 630 896 q 586 868 603 873 q 550 863 569 863 q 481 885 509 863 q 454 953 454 907 "},"ć":{x_min:69,x_max:664,ha:693,o:"m 424 -14 q 277 8 342 -14 q 165 78 211 30 q 93 198 118 125 q 69 375 69 272 q 94 564 69 488 q 166 687 119 641 q 278 753 212 733 q 424 773 343 773 q 540 758 482 773 q 648 718 597 744 l 588 562 q 502 594 544 581 q 423 606 461 606 q 314 549 348 606 q 280 376 280 491 q 314 206 280 261 q 421 152 348 152 q 528 167 480 152 q 627 206 576 182 l 627 35 q 578 13 601 23 q 530 -1 554 4 q 480 -10 506 -7 q 424 -14 453 -14 m 314 842 l 314 860 q 344 905 328 879 q 376 958 360 931 q 406 1013 392 986 q 432 1064 421 1040 l 664 1064 l 664 1049 q 642 1021 656 1037 q 609 985 628 1004 q 570 946 591 966 q 528 907 549 926 q 486 871 506 888 q 451 842 467 854 l 314 842 "},"þ":{x_min:109,x_max:775,ha:844,o:"m 315 659 q 348 704 329 683 q 391 739 366 724 q 445 764 415 755 q 512 773 475 773 q 619 747 571 773 q 701 673 667 722 q 755 550 736 623 q 775 380 775 476 q 756 209 775 283 q 702 86 737 136 q 619 11 668 36 q 512 -14 571 -14 q 445 -6 475 -14 q 390 12 414 0 q 348 42 366 25 q 315 77 330 58 l 306 77 q 311 35 308 55 q 314 0 313 18 q 315 -27 315 -17 l 315 -334 l 109 -334 l 109 1055 l 315 1055 l 315 789 q 314 751 315 773 q 311 708 313 728 q 306 659 308 684 l 315 659 m 443 606 q 384 594 408 606 q 345 556 360 581 q 323 492 330 531 q 315 403 317 454 l 315 380 q 322 282 315 325 q 343 211 328 239 q 383 167 358 182 q 444 152 407 152 q 534 211 505 152 q 563 382 563 269 q 534 550 563 494 q 443 606 505 606 "},"]":{x_min:35,x_max:363,ha:460,o:"m 35 -76 l 183 -76 l 183 848 l 35 848 l 35 992 l 363 992 l 363 -220 l 35 -220 l 35 -76 "},"А":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 "},"′":{x_min:90,x_max:279.21875,ha:370,o:"m 279 992 l 251 634 l 117 634 l 90 992 l 279 992 "},"Ы":{x_min:125,x_max:1078,ha:1203,o:"m 769 310 q 746 179 769 237 q 678 81 724 121 q 560 21 631 42 q 390 0 489 0 l 125 0 l 125 992 l 335 992 l 335 613 l 408 613 q 569 590 501 613 q 681 527 637 568 q 747 432 726 487 q 769 310 769 376 m 335 174 l 393 174 q 462 182 431 174 q 514 205 492 189 q 547 247 536 221 q 558 310 558 273 q 546 374 558 349 q 510 413 534 399 q 453 432 487 427 q 378 438 420 438 l 335 438 l 335 174 m 1078 0 l 867 0 l 867 992 l 1078 992 l 1078 0 "},"ẁ":{x_min:-.25,x_max:1120.25,ha:1120,o:"m 688 0 l 629 265 q 622 297 626 276 q 612 346 618 319 q 601 403 607 372 q 589 463 595 433 q 559 613 575 532 l 555 613 q 527 462 539 532 q 515 402 521 432 q 504 344 510 371 q 494 296 499 317 q 487 262 490 274 l 426 0 l 204 0 l 0 758 l 205 758 l 282 422 q 294 359 288 395 q 306 284 301 322 q 317 213 312 246 q 324 160 322 179 l 328 160 q 331 193 329 172 q 337 237 334 214 q 344 286 341 261 q 352 332 348 311 q 359 371 356 354 q 364 394 362 387 l 447 758 l 674 758 l 754 394 q 763 348 757 379 q 774 281 768 317 q 784 212 780 246 q 789 160 788 178 l 793 160 q 800 210 795 176 q 811 281 805 243 q 824 357 817 320 q 837 422 831 395 l 917 758 l 1120 758 l 913 0 l 688 0 m 529 842 q 474 889 506 860 q 410 946 441 917 q 353 1004 379 976 q 317 1049 327 1031 l 317 1064 l 548 1064 q 574 1013 559 1040 q 604 958 588 986 q 636 905 620 931 q 667 860 652 879 l 667 842 l 529 842 "},"ĭ":{x_min:-34,x_max:458,ha:424,o:"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 458 1071 q 436 978 454 1020 q 388 906 419 936 q 312 858 356 875 q 209 842 267 842 q 105 858 149 842 q 30 904 60 874 q -15 976 0 934 q -34 1071 -31 1018 l 81 1071 q 93 1024 84 1041 q 119 998 103 1007 q 158 987 135 989 q 210 985 181 985 q 257 988 235 985 q 296 1000 279 991 q 325 1026 314 1009 q 339 1071 337 1043 l 458 1071 "},R:{x_min:125,x_max:875.25,ha:875,o:"m 335 545 l 393 545 q 520 581 481 545 q 558 685 558 616 q 517 786 558 756 q 389 817 476 817 l 335 817 l 335 545 m 335 379 l 335 0 l 125 0 l 125 992 l 396 992 q 678 918 587 992 q 769 694 769 844 q 755 601 769 642 q 719 527 741 559 q 666 471 696 495 q 604 430 637 447 q 739 215 679 310 q 789 136 765 175 q 832 67 813 98 q 863 18 851 37 l 875 0 l 641 0 l 427 379 l 335 379 "},"Ż":{x_min:33,x_max:716,ha:749,o:"m 716 0 l 33 0 l 33 137 l 453 817 l 45 817 l 45 992 l 703 992 l 703 855 l 283 174 l 716 174 l 716 0 m 275 1183 q 283 1232 275 1213 q 307 1263 292 1251 q 343 1280 323 1275 q 387 1285 364 1285 q 430 1280 410 1285 q 466 1263 451 1275 q 490 1232 481 1251 q 500 1183 500 1213 q 490 1135 500 1155 q 466 1104 481 1115 q 430 1087 451 1092 q 387 1082 410 1082 q 343 1087 364 1082 q 307 1104 323 1092 q 283 1135 292 1115 q 275 1183 275 1155 "},"ħ":{x_min:3,x_max:767,ha:871,o:"m 767 0 l 560 0 l 560 400 q 534 522 560 482 q 456 563 509 563 q 389 547 416 563 q 345 498 362 530 q 322 420 329 467 q 315 314 315 374 l 315 0 l 109 0 l 109 808 l 3 808 l 3 946 l 109 946 l 109 1055 l 315 1055 l 315 946 l 529 946 l 529 808 l 315 808 l 315 796 q 314 736 315 767 q 311 678 313 705 l 306 617 l 317 617 q 402 703 350 677 q 518 730 453 730 q 620 714 575 730 q 699 664 666 698 q 749 577 731 630 q 767 452 767 525 l 767 0 "},"õ":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 m 301 906 q 267 890 280 906 q 247 840 255 874 l 146 840 q 163 934 150 894 q 199 999 177 973 q 251 1037 221 1024 q 316 1050 280 1050 q 370 1040 344 1050 q 423 1017 397 1030 q 474 995 449 1005 q 524 985 500 985 q 557 1001 545 985 q 578 1051 570 1017 l 680 1051 q 662 958 675 997 q 625 893 648 919 q 573 854 603 867 q 509 842 544 842 q 455 852 482 842 q 402 874 427 862 q 351 896 376 886 q 301 906 325 906 "},"˙":{x_min:100,x_max:325,ha:424,o:"m 100 954 q 108 1003 100 984 q 132 1034 117 1022 q 168 1051 148 1046 q 212 1056 189 1056 q 255 1051 235 1056 q 291 1034 276 1046 q 315 1003 306 1022 q 325 954 325 984 q 315 906 325 926 q 291 875 306 886 q 255 858 276 863 q 212 853 235 853 q 168 858 189 853 q 132 875 148 863 q 108 906 117 886 q 100 954 100 926 "},"ê":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 556 842 q 484 894 521 864 q 411 960 446 923 q 339 894 374 923 q 269 842 304 864 l 132 842 l 132 860 q 171 905 149 879 q 214 958 192 931 q 256 1013 236 986 q 292 1064 277 1040 l 533 1064 q 568 1013 548 1040 q 610 958 588 986 q 654 905 632 931 q 694 860 677 879 l 694 842 l 556 842 "},"″":{x_min:90,x_max:565.21875,ha:656,o:"m 279 992 l 251 634 l 117 634 l 90 992 l 279 992 m 565 992 l 537 634 l 403 634 l 376 992 l 565 992 "},"„":{x_min:43,x_max:628,ha:720,o:"m 312 145 q 289 67 302 108 q 259 -15 275 26 q 226 -99 243 -57 q 192 -179 209 -141 l 43 -179 q 63 -92 53 -137 q 82 -3 73 -48 q 98 82 91 40 q 111 161 106 125 l 301 161 l 312 145 m 628 145 q 605 67 618 108 q 575 -15 591 26 q 542 -99 559 -57 q 508 -179 525 -141 l 359 -179 q 379 -92 369 -137 q 398 -3 389 -48 q 414 82 407 40 q 427 161 422 125 l 617 161 l 628 145 "},"ч":{x_min:83,x_max:760,ha:869,o:"m 289 758 l 289 471 q 311 400 289 422 q 369 379 333 379 q 464 392 419 379 q 553 428 508 406 l 553 758 l 760 758 l 760 0 l 553 0 l 553 298 q 505 274 530 286 q 451 252 479 261 q 390 237 422 243 q 321 232 358 232 q 222 247 266 232 q 147 293 178 262 q 99 369 116 323 q 83 476 83 415 l 83 758 l 289 758 "},"δ":{x_min:69,x_max:762,ha:832,o:"m 314 622 q 261 666 287 642 q 217 719 236 691 q 186 782 197 748 q 175 854 175 815 q 195 943 175 904 q 253 1009 216 982 q 344 1049 291 1035 q 462 1063 397 1063 q 544 1057 506 1063 q 618 1042 583 1052 q 686 1019 652 1033 q 754 987 719 1005 l 679 841 q 568 891 621 872 q 461 909 515 909 q 418 904 435 909 q 390 889 401 898 q 374 867 379 879 q 369 841 369 855 q 380 805 369 823 q 412 769 390 788 q 466 730 434 750 q 541 686 498 709 q 708 538 655 622 q 762 346 762 455 q 737 185 762 253 q 666 73 712 117 q 556 7 620 28 q 412 -14 491 -14 q 274 6 337 -14 q 166 67 212 27 q 94 164 120 106 q 69 296 69 222 q 87 422 69 368 q 139 515 106 476 q 217 580 172 554 q 314 622 262 606 m 550 333 q 541 399 550 369 q 517 454 533 429 q 480 500 502 479 q 432 537 459 520 q 381 512 408 529 q 332 468 354 496 q 295 400 309 440 q 280 305 280 360 q 289 244 280 272 q 315 195 298 216 q 356 163 332 175 q 412 152 381 152 q 514 198 478 152 q 550 333 550 244 "},"Â":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 596 1071 q 524 1123 561 1093 q 451 1189 486 1152 q 379 1123 414 1152 q 309 1071 344 1093 l 172 1071 l 172 1089 q 211 1134 189 1108 q 254 1187 232 1160 q 296 1242 276 1215 q 332 1293 317 1269 l 573 1293 q 608 1242 588 1269 q 650 1187 628 1215 q 694 1134 672 1160 q 734 1089 717 1108 l 734 1071 l 596 1071 "},"Į":{x_min:44.28125,x_max:495.96875,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 272 -154 q 287 -196 272 -182 q 326 -209 302 -209 q 369 -205 347 -209 q 404 -197 390 -201 l 404 -318 q 357 -329 382 -324 q 298 -334 332 -334 q 227 -322 259 -334 q 174 -290 196 -310 q 140 -241 152 -269 q 129 -177 129 -212 q 138 -124 129 -148 q 164 -78 147 -99 q 203 -38 181 -57 q 251 0 225 -19 l 372 0 q 298 -81 325 -44 q 272 -154 272 -118 "},"ω":{x_min:81,x_max:1091,ha:1171,o:"m 798 -14 q 722 -3 755 -14 q 663 25 689 6 q 620 72 638 45 q 589 133 602 100 l 582 133 q 551 72 570 100 q 508 25 533 45 q 450 -3 483 6 q 374 -14 416 -14 q 245 14 300 -14 q 154 92 190 42 q 99 213 117 143 q 81 367 81 283 q 85 472 81 423 q 99 568 90 521 q 124 662 109 615 q 158 758 138 708 l 360 758 q 296 573 316 666 q 275 378 275 480 q 282 286 275 327 q 303 215 289 244 q 340 168 317 185 q 393 152 362 152 q 439 163 421 152 q 468 195 458 174 q 484 248 479 217 q 489 319 489 279 l 489 517 l 683 517 l 683 319 q 688 248 683 279 q 703 195 692 217 q 733 163 714 174 q 779 152 751 152 q 832 168 810 152 q 868 214 854 185 q 889 285 883 244 q 896 375 896 326 q 876 572 896 477 q 811 758 855 666 l 1012 758 q 1047 662 1032 708 q 1072 568 1062 615 q 1086 472 1082 521 q 1091 367 1091 423 q 1072 213 1091 283 q 1017 92 1053 143 q 925 14 980 42 q 798 -14 870 -14 "},"Ţ":{x_min:28,x_max:735,ha:762,o:"m 487 0 l 277 0 l 277 817 l 28 817 l 28 992 l 735 992 l 735 817 l 487 817 l 487 0 m 250 -288 q 262 -242 256 -268 q 273 -188 268 -216 q 284 -134 279 -161 q 291 -85 289 -107 l 483 -85 l 483 -98 q 434 -198 462 -145 q 370 -307 406 -251 l 250 -307 l 250 -288 "},"´":{x_min:225,x_max:575,ha:802,o:"m 225 842 l 225 860 q 255 905 239 879 q 287 958 271 931 q 317 1013 303 986 q 343 1064 332 1040 l 575 1064 l 575 1049 q 553 1021 567 1037 q 520 985 539 1004 q 481 946 502 966 q 439 907 460 926 q 397 871 417 888 q 362 842 378 854 l 225 842 "},"Ĉ":{x_min:81,x_max:836.296875,ha:885,o:"m 546 831 q 439 807 485 831 q 361 740 392 784 q 313 633 329 696 q 297 492 297 571 q 311 351 297 413 q 356 247 326 289 q 433 183 386 205 q 546 160 481 160 q 667 174 606 160 q 799 213 727 188 l 799 36 q 734 13 766 23 q 669 -1 702 4 q 601 -10 636 -7 q 526 -14 566 -14 q 327 22 411 -14 q 188 125 243 59 q 107 285 133 192 q 81 494 81 379 q 111 700 81 606 q 201 862 142 794 q 346 968 260 930 q 546 1006 433 1006 q 694 987 620 1006 q 836 936 768 968 l 768 765 q 656 811 712 791 q 546 831 600 831 m 666 1071 q 594 1123 631 1093 q 521 1189 556 1152 q 449 1123 484 1152 q 379 1071 414 1093 l 242 1071 l 242 1089 q 281 1134 259 1108 q 324 1187 302 1160 q 366 1242 346 1215 q 402 1293 387 1269 l 643 1293 q 678 1242 658 1269 q 720 1187 698 1215 q 764 1134 742 1160 q 804 1089 787 1108 l 804 1071 l 666 1071 "},"И":{x_min:125,x_max:963,ha:1088,o:"m 125 992 l 312 992 l 312 522 q 311 484 312 505 q 310 440 311 463 q 309 395 310 417 q 307 350 308 372 q 302 248 304 300 l 306 248 l 712 992 l 963 992 l 963 0 l 775 0 l 775 466 q 777 554 775 505 q 781 646 779 602 q 788 750 784 698 l 782 750 l 375 0 l 125 0 l 125 992 "},"Љ":{x_min:11,x_max:1270,ha:1332,o:"m 837 613 l 910 613 q 1070 590 1003 613 q 1182 527 1138 568 q 1248 432 1227 487 q 1270 310 1270 376 q 1247 179 1270 237 q 1179 81 1225 121 q 1061 21 1132 42 q 892 0 990 0 l 627 0 l 627 817 l 471 817 q 453 677 463 753 q 433 525 444 601 q 412 380 423 449 q 390 258 401 310 q 355 142 376 193 q 303 56 335 91 q 226 3 272 21 q 115 -14 179 -14 q 59 -10 85 -14 q 11 1 33 -6 l 11 174 q 46 164 28 168 q 85 160 64 160 q 120 170 105 160 q 147 203 135 179 q 170 264 159 226 q 191 361 180 303 q 207 457 197 395 q 230 603 218 520 q 257 785 243 686 q 284 992 271 884 l 837 992 l 837 613 m 837 174 l 894 174 q 963 182 932 174 q 1015 205 993 189 q 1048 247 1036 221 q 1059 310 1059 273 q 1047 374 1059 349 q 1011 413 1034 399 q 954 432 988 427 q 880 438 921 438 l 837 438 l 837 174 "},"р":{x_min:109,x_max:775,ha:844,o:"m 507 -14 q 440 -5 470 -14 q 388 15 411 2 q 347 45 365 28 q 315 81 330 62 l 305 81 q 310 37 307 57 q 314 0 312 19 q 315 -27 315 -17 l 315 -334 l 109 -334 l 109 758 l 277 758 l 306 659 l 315 659 q 348 703 330 682 q 390 739 366 723 q 445 763 414 754 q 512 773 475 773 q 619 747 571 773 q 702 673 668 722 q 756 550 737 623 q 775 380 775 476 q 755 209 775 283 q 700 86 735 136 q 615 11 664 36 q 507 -14 566 -14 m 443 606 q 384 594 408 606 q 345 556 360 581 q 323 492 330 531 q 315 403 317 454 l 315 380 q 322 282 315 325 q 343 211 328 239 q 383 167 358 182 q 444 152 407 152 q 534 211 505 152 q 563 382 563 269 q 534 550 563 494 q 443 606 505 606 "},"Ω":{x_min:37,x_max:999,ha:1031,o:"m 518 832 q 344 759 399 832 q 290 547 290 686 q 299 434 290 487 q 329 336 308 381 q 384 253 350 290 q 470 189 419 217 l 470 0 l 37 0 l 37 176 l 289 176 q 200 248 240 206 q 132 343 160 290 q 89 459 104 396 q 74 591 74 521 q 102 762 74 685 q 187 893 130 838 q 326 977 243 948 q 518 1007 409 1007 q 709 977 627 1007 q 848 893 792 948 q 933 761 905 838 q 962 589 962 684 q 946 458 962 520 q 902 343 931 396 q 834 248 874 290 q 744 176 794 206 l 999 176 l 999 0 l 561 0 l 561 189 q 649 253 614 216 q 705 336 684 290 q 736 435 727 382 q 745 548 745 488 q 691 759 745 686 q 518 832 636 832 "},"т":{x_min:32,x_max:694,ha:726,o:"m 694 758 l 694 604 l 466 604 l 466 0 l 260 0 l 260 604 l 32 604 l 32 758 l 694 758 "},"П":{x_min:125,x_max:854,ha:979,o:"m 854 0 l 643 0 l 643 817 l 335 817 l 335 0 l 125 0 l 125 992 l 854 992 l 854 0 "},"Ö":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 m 291 1182 q 298 1223 291 1206 q 318 1251 305 1240 q 348 1268 331 1263 q 385 1274 365 1274 q 422 1268 405 1274 q 452 1251 439 1263 q 473 1223 465 1240 q 481 1182 481 1206 q 473 1142 481 1159 q 452 1114 465 1125 q 422 1097 439 1102 q 385 1092 405 1092 q 348 1097 365 1092 q 318 1114 331 1102 q 298 1142 305 1125 q 291 1182 291 1159 m 564 1182 q 571 1223 564 1206 q 591 1251 578 1240 q 622 1268 604 1263 q 660 1274 639 1274 q 696 1268 679 1274 q 727 1251 713 1263 q 748 1223 740 1240 q 756 1182 756 1206 q 748 1142 756 1159 q 727 1114 740 1125 q 696 1097 713 1102 q 660 1092 679 1092 q 591 1114 619 1092 q 564 1182 564 1136 "},z:{x_min:37,x_max:595,ha:635,o:"m 595 0 l 37 0 l 37 117 l 347 604 l 58 604 l 58 758 l 582 758 l 582 628 l 281 153 l 595 153 l 595 0 "},"™":{x_min:11,x_max:978,ha:1040,o:"m 258 503 l 145 503 l 145 895 l 11 895 l 11 992 l 393 992 l 393 895 l 258 895 l 258 503 m 648 503 l 536 861 l 531 861 q 532 839 532 850 q 533 817 533 827 q 534 799 533 807 q 534 786 534 790 l 534 503 l 424 503 l 424 992 l 591 992 l 699 646 l 815 992 l 978 992 l 978 503 l 864 503 l 864 779 q 864 795 864 785 q 865 818 864 806 q 865 841 865 829 q 866 861 866 853 l 862 861 l 744 503 l 648 503 "},"Θ":{x_min:81,x_max:970,ha:1050,o:"m 674 589 l 674 414 l 377 414 l 377 589 l 674 589 m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 "},"Ř":{x_min:125,x_max:875.25,ha:875,o:"m 335 545 l 393 545 q 520 581 481 545 q 558 685 558 616 q 517 786 558 756 q 389 817 476 817 l 335 817 l 335 545 m 335 379 l 335 0 l 125 0 l 125 992 l 396 992 q 678 918 587 992 q 769 694 769 844 q 755 601 769 642 q 719 527 741 559 q 666 471 696 495 q 604 430 637 447 q 739 215 679 310 q 789 136 765 175 q 832 67 813 98 q 863 18 851 37 l 875 0 l 641 0 l 427 379 l 335 379 m 704 1274 q 664 1229 687 1255 q 620 1176 642 1203 q 578 1121 598 1148 q 543 1071 558 1094 l 302 1071 q 266 1121 287 1094 q 224 1176 246 1148 q 181 1229 202 1203 q 142 1274 159 1255 l 142 1293 l 279 1293 q 349 1240 314 1270 q 421 1174 384 1211 q 494 1240 456 1211 q 566 1293 531 1270 l 704 1293 l 704 1274 "},"Ň":{x_min:125,x_max:963,ha:1088,o:"m 963 0 l 697 0 l 305 750 l 299 750 q 306 646 303 698 q 310 554 308 602 q 312 466 312 505 l 312 0 l 125 0 l 125 992 l 389 992 l 781 248 l 785 248 q 780 350 783 300 q 778 395 779 372 q 777 440 777 417 q 776 484 776 463 q 775 522 775 505 l 775 992 l 963 992 l 963 0 m 816 1274 q 776 1229 799 1255 q 732 1176 754 1203 q 690 1121 710 1148 q 655 1071 670 1094 l 414 1071 q 378 1121 399 1094 q 336 1176 358 1148 q 293 1229 314 1203 q 254 1274 271 1255 l 254 1293 l 391 1293 q 461 1240 426 1270 q 533 1174 496 1211 q 606 1240 568 1211 q 678 1293 643 1270 l 816 1293 l 816 1274 "},"É":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 288 1071 l 288 1089 q 318 1134 302 1108 q 350 1187 334 1160 q 380 1242 366 1215 q 406 1293 395 1269 l 638 1293 l 638 1278 q 616 1250 630 1266 q 583 1214 602 1233 q 544 1175 565 1195 q 502 1136 523 1155 q 460 1100 480 1117 q 425 1071 441 1083 l 288 1071 "},"и":{x_min:109,x_max:849,ha:958,o:"m 303 758 l 303 463 q 301 401 303 440 q 296 324 299 362 q 288 231 292 280 l 606 758 l 849 758 l 849 0 l 654 0 l 654 296 q 656 364 654 325 q 661 438 659 402 q 668 524 664 480 l 351 0 l 109 0 l 109 758 l 303 758 "},"³":{x_min:40,x_max:470,ha:526,o:"m 451 846 q 423 766 451 800 q 335 712 396 732 l 335 703 q 395 682 370 697 q 437 649 420 668 q 461 608 453 631 q 470 562 470 586 q 410 433 470 480 q 224 386 350 386 q 128 397 173 386 q 40 433 84 409 l 40 562 q 129 518 84 535 q 224 501 174 501 q 298 519 275 501 q 322 573 322 537 q 316 600 322 587 q 298 623 311 613 q 263 639 285 633 q 208 645 241 645 l 132 645 l 132 754 l 193 754 q 249 760 228 754 q 283 776 271 766 q 299 800 295 787 q 303 828 303 814 q 286 871 303 854 q 235 888 269 888 q 175 875 203 888 q 109 834 147 862 l 41 930 q 134 982 83 961 q 255 1004 185 1004 q 333 992 297 1004 q 395 961 369 981 q 436 911 421 940 q 451 846 451 882 "},"[":{x_min:97,x_max:425,ha:460,o:"m 425 -220 l 97 -220 l 97 992 l 425 992 l 425 848 l 276 848 l 276 -76 l 425 -76 l 425 -220 "},"ζ":{x_min:69,x_max:650,ha:657,o:"m 650 -25 q 642 -86 650 -55 q 622 -147 634 -117 q 595 -205 610 -177 q 563 -257 579 -233 l 355 -257 q 392 -202 374 -230 q 425 -147 411 -174 q 447 -98 439 -121 q 455 -56 455 -74 q 451 -40 455 -48 q 435 -24 447 -31 q 401 -9 423 -16 q 343 5 379 -2 q 228 41 279 17 q 142 104 177 66 q 87 195 106 142 q 69 315 69 247 q 96 484 69 404 q 172 639 124 565 q 282 781 219 713 q 413 913 344 849 q 385 907 402 909 q 348 904 367 905 q 311 902 329 903 q 282 901 293 901 l 108 901 l 108 1055 l 646 1055 l 646 929 q 504 788 563 853 q 404 665 444 722 q 339 559 363 608 q 301 468 314 510 q 284 391 288 426 q 280 326 280 355 q 292 245 280 275 q 326 196 304 214 q 381 169 349 178 q 452 151 412 159 q 546 121 508 138 q 607 81 583 103 q 640 32 630 59 q 650 -25 650 6 "},"∏":{x_min:113,x_max:917,ha:1030,o:"m 700 -310 l 700 817 l 329 817 l 329 -310 l 113 -310 l 113 992 l 917 992 l 917 -310 l 700 -310 "},"Έ":{x_min:-39,x_max:793,ha:875,o:"m 793 0 l 222 0 l 222 992 l 793 992 l 793 817 l 432 817 l 432 602 l 767 602 l 767 427 l 432 427 l 432 174 l 793 174 l 793 0 m -39 789 q -26 835 -32 809 q -15 889 -20 861 q -5 943 -9 916 q 2 993 0 970 l 194 993 l 194 978 q 145 879 173 932 q 81 771 117 826 l -39 771 l -39 789 "},"Ρ":{x_min:125,x_max:769,ha:831,o:"m 335 526 l 377 526 q 513 561 467 526 q 558 674 558 596 q 517 782 558 747 q 389 817 476 817 l 335 817 l 335 526 m 769 682 q 749 557 769 616 q 684 451 729 497 q 565 379 639 406 q 383 352 492 352 l 335 352 l 335 0 l 125 0 l 125 992 l 400 992 q 565 970 496 992 q 680 909 635 949 q 747 812 725 869 q 769 682 769 754 "},"ğ":{x_min:14,x_max:735.140625,ha:766,o:"m 735 757 l 735 644 l 624 610 q 643 562 638 587 q 649 509 649 537 q 630 403 649 451 q 576 322 612 356 q 486 269 540 288 q 360 251 432 251 q 326 252 345 251 q 299 256 308 254 q 279 232 286 244 q 271 201 271 219 q 280 179 271 187 q 303 165 289 170 q 336 158 317 160 q 375 157 355 157 l 493 157 q 591 144 547 157 q 664 106 634 131 q 710 40 694 80 q 727 -54 727 0 q 701 -170 727 -118 q 624 -258 675 -222 q 497 -314 573 -295 q 322 -334 421 -334 q 187 -319 244 -334 q 91 -277 129 -304 q 33 -211 52 -249 q 14 -123 14 -172 q 28 -51 14 -81 q 66 0 42 -20 q 120 36 90 22 q 182 57 150 49 q 154 74 168 63 q 129 99 140 85 q 111 131 118 113 q 104 167 104 148 q 110 206 104 189 q 128 239 116 224 q 159 268 141 254 q 200 296 177 282 q 105 379 140 322 q 71 513 71 436 q 89 622 71 574 q 145 704 108 670 q 236 755 182 737 q 360 773 290 773 q 391 771 374 773 q 424 767 408 769 q 455 762 441 764 q 477 757 469 759 l 735 757 m 193 -107 q 200 -141 193 -125 q 224 -169 207 -157 q 266 -189 240 -181 q 331 -196 293 -196 q 490 -166 437 -196 q 543 -85 543 -135 q 510 -27 543 -42 q 408 -13 477 -13 l 312 -13 q 273 -17 294 -13 q 234 -33 252 -22 q 205 -62 217 -44 q 193 -107 193 -80 m 265 510 q 289 415 265 448 q 360 381 312 381 q 432 415 410 381 q 454 510 454 448 q 432 607 454 571 q 360 643 410 643 q 265 510 265 643 m 592 1071 q 570 978 588 1020 q 522 906 553 936 q 446 858 490 875 q 343 842 401 842 q 239 858 283 842 q 164 904 194 874 q 118 976 134 934 q 100 1071 102 1018 l 215 1071 q 227 1024 218 1041 q 253 998 237 1007 q 292 987 269 989 q 344 985 315 985 q 391 988 369 985 q 430 1000 413 991 q 459 1026 448 1009 q 473 1071 471 1043 l 592 1071 "},"ª":{x_min:32,x_max:444,ha:504,o:"m 351 518 l 330 592 q 264 531 303 553 q 181 510 226 510 q 120 519 147 510 q 73 546 92 528 q 42 594 53 565 q 32 661 32 622 q 46 730 32 701 q 88 776 60 758 q 155 803 115 794 q 246 815 195 812 l 307 818 q 287 876 307 859 q 230 894 267 894 q 170 883 203 894 q 102 855 137 872 l 58 947 q 150 986 100 969 q 262 1003 200 1003 q 342 989 308 1003 q 399 952 376 976 q 432 894 421 928 q 444 817 444 859 l 444 518 l 351 518 m 251 732 q 209 723 225 730 q 184 707 193 716 q 172 685 175 697 q 169 661 169 674 q 181 623 169 636 q 213 611 194 611 q 252 619 234 611 q 281 639 269 626 q 300 671 294 653 q 307 712 307 690 l 307 736 l 251 732 "},"ї":{x_min:-21,x_max:444,ha:424,o:"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m -21 953 q -13 994 -21 977 q 6 1022 -6 1011 q 36 1039 19 1034 q 73 1045 53 1045 q 110 1039 93 1045 q 140 1022 127 1034 q 161 994 153 1011 q 169 953 169 977 q 161 913 169 930 q 140 885 153 896 q 110 868 127 873 q 73 863 93 863 q 36 868 53 863 q 6 885 19 873 q -13 913 -6 896 q -21 953 -21 930 m 252 953 q 259 994 252 977 q 279 1022 266 1011 q 310 1039 292 1034 q 348 1045 327 1045 q 384 1039 367 1045 q 415 1022 401 1034 q 436 994 428 1011 q 444 953 444 977 q 436 913 444 930 q 415 885 428 896 q 384 868 401 873 q 348 863 367 863 q 279 885 307 863 q 252 953 252 907 "},T:{x_min:28,x_max:735,ha:762,o:"m 487 0 l 277 0 l 277 817 l 28 817 l 28 992 l 735 992 l 735 817 l 487 817 l 487 0 "},"š":{x_min:63,x_max:625,ha:668,o:"m 614 225 q 592 120 614 165 q 530 45 570 75 q 433 0 490 15 q 305 -14 376 -14 q 236 -11 268 -14 q 176 -3 204 -9 q 121 9 147 1 q 67 30 94 17 l 67 201 q 127 176 95 187 q 189 156 158 164 q 249 143 220 148 q 304 139 279 139 q 351 144 331 139 q 383 158 370 149 q 401 179 395 167 q 407 205 407 191 q 402 230 407 219 q 382 254 398 242 q 337 283 367 267 q 256 322 307 299 q 171 366 207 344 q 112 415 135 388 q 77 477 88 442 q 66 561 66 512 q 86 653 66 614 q 144 720 106 693 q 234 759 181 746 q 351 773 286 773 q 480 757 419 773 q 605 710 541 741 l 543 564 q 445 604 492 588 q 352 619 398 619 q 291 604 310 619 q 272 563 272 589 q 277 539 272 550 q 296 518 282 529 q 336 493 310 506 q 403 461 362 480 q 490 419 451 440 q 556 372 528 398 q 599 310 584 345 q 614 225 614 275 m 625 1045 q 585 1000 608 1026 q 541 947 563 974 q 499 892 519 919 q 464 842 479 865 l 223 842 q 187 892 208 865 q 145 947 167 919 q 102 1000 123 974 q 63 1045 80 1026 l 63 1064 l 200 1064 q 270 1011 235 1041 q 342 945 305 982 q 415 1011 377 982 q 487 1064 452 1041 l 625 1064 l 625 1045 "},"є":{x_min:69,x_max:648.703125,ha:693,o:"m 424 -14 q 277 8 342 -14 q 165 78 211 30 q 93 198 118 125 q 69 375 69 272 q 94 564 69 488 q 166 687 119 641 q 278 753 212 733 q 424 773 343 773 q 540 759 482 773 q 648 722 597 746 l 588 575 q 501 607 543 595 q 422 619 459 619 q 324 578 358 619 q 280 451 290 536 l 527 451 l 527 303 l 280 303 q 322 179 288 219 q 419 139 355 139 q 527 154 479 139 q 627 193 576 169 l 627 35 q 532 -1 580 10 q 424 -14 484 -14 "},"Þ":{x_min:125,x_max:769,ha:831,o:"m 769 522 q 751 400 769 458 q 694 297 734 342 q 590 225 654 252 q 429 199 525 199 l 335 199 l 335 0 l 125 0 l 125 992 l 335 992 l 335 837 l 444 837 q 589 814 528 837 q 690 751 650 792 q 749 652 730 710 q 769 522 769 594 m 335 365 l 393 365 q 517 402 476 365 q 558 523 558 438 q 522 634 558 598 q 406 670 485 670 l 335 670 l 335 365 "},j:{x_min:-56,x_max:324.5,ha:424,o:"m 68 -334 q 1 -329 36 -334 q -56 -317 -32 -324 l -56 -154 q -16 -164 -34 -161 q 24 -167 1 -167 q 56 -162 41 -167 q 83 -144 72 -157 q 101 -109 94 -131 q 108 -52 108 -87 l 108 758 l 315 758 l 315 -82 q 301 -180 315 -134 q 259 -260 288 -226 q 182 -314 229 -294 q 68 -334 135 -334 m 99 953 q 108 1002 99 983 q 132 1033 116 1021 q 168 1050 147 1045 q 211 1055 188 1055 q 255 1050 234 1055 q 290 1033 275 1045 q 315 1002 306 1021 q 324 953 324 983 q 315 905 324 925 q 290 874 306 885 q 255 857 275 862 q 211 852 234 852 q 168 857 188 852 q 132 874 147 862 q 108 905 116 885 q 99 953 99 925 "},"Σ":{x_min:53,x_max:721,ha:768,o:"m 53 0 l 53 165 l 347 519 l 61 831 l 61 992 l 681 992 l 681 819 l 416 819 q 381 821 404 819 q 337 823 358 822 q 282 827 311 825 l 565 521 l 266 165 q 336 169 303 167 q 365 170 350 170 q 394 172 380 171 q 419 173 407 172 q 438 173 430 173 l 721 173 l 721 0 l 53 0 "},"ϒ":{x_min:-.25,x_max:817,ha:821,o:"m 404 578 q 436 667 420 622 q 470 752 453 711 q 504 830 487 793 q 539 895 521 866 q 572 941 555 921 q 610 973 589 960 q 657 993 631 987 q 717 1000 683 1000 q 770 995 746 1000 q 817 981 793 991 l 817 825 q 797 830 809 827 q 770 833 784 833 q 750 830 760 833 q 731 820 741 827 q 712 801 722 813 q 689 771 701 789 q 653 707 675 749 q 606 612 631 666 q 556 498 581 559 q 512 376 531 437 l 512 0 l 302 0 l 302 379 l 0 992 l 227 992 l 404 578 "},"ℓ":{x_min:27.5625,x_max:645,ha:695,o:"m 420 125 q 478 159 456 125 q 504 265 501 194 l 645 265 q 628 147 642 199 q 585 60 614 96 q 512 6 557 25 q 400 -12 466 -12 q 297 5 343 -12 q 218 55 250 22 q 168 140 185 89 q 151 258 151 191 l 151 344 q 93 328 125 336 q 27 311 62 320 l 27 445 q 91 463 60 453 q 151 482 122 472 l 151 761 q 166 872 151 825 q 213 947 182 918 q 291 990 244 976 q 399 1004 338 1004 q 493 988 451 1004 q 564 944 535 973 q 609 875 593 916 q 625 783 625 834 q 606 664 625 715 q 553 570 588 612 q 465 493 517 528 q 345 425 413 459 l 345 251 q 349 200 345 223 q 362 160 354 177 q 385 134 371 144 q 420 125 400 125 m 446 779 q 435 849 446 824 q 397 874 423 874 q 356 848 367 874 q 345 779 345 822 l 345 572 q 422 653 399 600 q 446 779 446 705 "},"ĉ":{x_min:69,x_max:677,ha:693,o:"m 424 -14 q 277 8 342 -14 q 165 78 211 30 q 93 198 118 125 q 69 375 69 272 q 94 564 69 488 q 166 687 119 641 q 278 753 212 733 q 424 773 343 773 q 540 758 482 773 q 648 718 597 744 l 588 562 q 502 594 544 581 q 423 606 461 606 q 314 549 348 606 q 280 376 280 491 q 314 206 280 261 q 421 152 348 152 q 528 167 480 152 q 627 206 576 182 l 627 35 q 578 13 601 23 q 530 -1 554 4 q 480 -10 506 -7 q 424 -14 453 -14 m 539 842 q 467 894 504 864 q 394 960 429 923 q 322 894 357 923 q 252 842 287 864 l 115 842 l 115 860 q 154 905 132 879 q 197 958 175 931 q 239 1013 219 986 q 275 1064 260 1040 l 516 1064 q 551 1013 531 1040 q 593 958 571 986 q 637 905 615 931 q 677 860 660 879 l 677 842 l 539 842 "},"ī":{x_min:4,x_max:422,ha:424,o:"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 4 985 l 422 985 l 422 842 l 4 842 l 4 985 "},"О":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 "},"ξ":{x_min:69,x_max:650,ha:657,o:"m 69 297 q 82 382 69 344 q 122 453 96 421 q 182 509 147 484 q 260 550 218 533 l 260 557 q 150 616 189 573 q 112 727 112 658 q 123 792 112 764 q 158 843 135 821 q 220 882 182 865 q 308 910 257 898 q 227 906 265 908 q 196 904 212 905 q 166 903 180 903 q 140 902 151 902 q 123 901 129 901 l 108 901 l 108 1055 l 613 1055 l 613 910 l 568 910 q 474 899 519 910 q 394 867 428 888 q 339 814 359 846 q 318 739 318 782 q 326 688 318 710 q 352 650 333 665 q 402 627 371 635 q 480 620 433 620 l 577 620 l 577 482 l 475 482 q 326 439 372 482 q 280 310 280 396 q 292 239 280 266 q 326 195 304 212 q 381 169 349 178 q 452 151 412 159 q 546 121 508 138 q 607 81 583 103 q 640 32 630 59 q 650 -25 650 5 q 642 -86 650 -55 q 622 -147 634 -117 q 595 -205 610 -177 q 563 -257 579 -233 l 355 -257 q 392 -202 374 -230 q 425 -147 411 -174 q 447 -98 439 -121 q 455 -57 455 -74 q 451 -40 455 -48 q 435 -24 447 -31 q 401 -9 423 -16 q 343 5 379 -1 q 228 41 279 17 q 142 101 177 65 q 87 186 106 138 q 69 297 69 235 "},"Ď":{x_min:125,x_max:892,ha:973,o:"m 892 505 q 857 285 892 379 q 758 127 823 190 q 600 31 693 63 q 386 0 506 0 l 125 0 l 125 992 l 415 992 q 612 960 524 992 q 762 868 700 929 q 858 715 824 806 q 892 505 892 624 m 681 499 q 665 641 681 581 q 616 740 648 701 q 538 798 584 779 q 432 817 492 817 l 335 817 l 335 174 l 413 174 q 614 255 547 174 q 681 499 681 336 m 739 1274 q 699 1229 722 1255 q 655 1176 677 1203 q 613 1121 633 1148 q 578 1071 593 1094 l 337 1071 q 301 1121 322 1094 q 259 1176 281 1148 q 216 1229 237 1203 q 177 1274 194 1255 l 177 1293 l 314 1293 q 384 1240 349 1270 q 456 1174 419 1211 q 529 1240 491 1211 q 601 1293 566 1270 l 739 1293 l 739 1274 "},"&":{x_min:56,x_max:1e3,ha:1003,o:"m 1000 0 l 744 0 l 678 67 q 559 8 624 30 q 415 -14 493 -14 q 267 6 333 -14 q 154 63 201 26 q 81 152 107 100 q 56 267 56 204 q 68 361 56 320 q 104 435 81 402 q 160 495 127 468 q 233 547 193 523 q 190 607 208 578 q 161 664 172 636 q 145 720 150 692 q 141 779 141 748 q 161 874 141 832 q 219 945 182 915 q 307 990 256 974 q 419 1006 358 1006 q 527 991 477 1006 q 611 950 576 977 q 667 882 647 922 q 688 790 688 841 q 672 704 688 743 q 632 632 657 665 q 572 571 607 598 q 498 519 538 543 l 673 337 q 716 432 697 382 q 747 532 734 481 l 959 532 q 935 450 948 493 q 903 364 921 407 q 861 278 885 321 q 809 197 838 236 l 1000 0 m 267 287 q 278 233 267 257 q 309 193 289 209 q 355 168 329 177 q 413 159 382 159 q 490 170 455 159 q 555 200 525 180 l 346 423 q 288 362 308 395 q 267 287 267 330 m 493 762 q 486 798 493 783 q 469 822 480 812 q 445 836 458 831 q 418 840 432 840 q 389 836 404 840 q 362 823 374 832 q 343 798 350 814 q 335 761 335 783 q 351 694 335 725 q 393 632 366 663 q 468 691 442 662 q 493 762 493 721 "},G:{x_min:81,x_max:895,ha:1006,o:"m 502 557 l 895 557 l 895 42 q 815 18 855 29 q 732 1 775 8 q 642 -9 689 -5 q 542 -14 595 -14 q 345 18 431 -14 q 200 116 259 51 q 111 276 142 181 q 81 497 81 372 q 114 708 81 613 q 214 868 148 802 q 377 970 281 934 q 599 1006 474 1006 q 754 989 678 1006 q 893 944 830 972 l 823 776 q 719 815 777 799 q 597 831 661 831 q 473 806 528 831 q 378 738 418 782 q 318 632 339 694 q 297 492 297 569 q 311 358 297 419 q 357 253 326 298 q 438 185 388 209 q 555 160 487 160 q 631 165 600 160 q 689 174 662 169 l 689 382 l 502 382 l 502 557 "},"ΰ":{x_min:97,x_max:780,ha:861,o:"m 426 -12 q 266 15 330 -12 q 165 91 202 42 q 112 205 127 139 q 97 345 97 270 l 97 758 l 303 758 l 303 340 q 335 197 303 241 q 432 154 366 154 q 493 168 467 154 q 537 213 520 182 q 564 295 555 244 q 573 417 573 345 q 569 503 573 461 q 559 586 566 545 q 544 670 553 628 q 524 758 535 712 l 732 758 q 752 670 744 712 q 767 587 761 629 q 776 502 773 545 q 780 410 780 459 q 757 221 780 301 q 689 90 734 141 q 579 13 645 38 q 426 -12 513 -12 m 151 953 q 173 1023 151 1001 q 231 1044 195 1044 q 290 1023 267 1044 q 313 953 313 1001 q 290 885 313 907 q 231 863 267 863 q 173 885 195 863 q 151 953 151 907 m 537 953 q 559 1023 537 1001 q 618 1044 581 1044 q 677 1023 654 1044 q 700 953 700 1001 q 677 885 700 907 q 618 863 654 863 q 559 885 581 863 q 537 953 537 907 m 355 959 q 367 1006 361 980 q 379 1059 373 1032 q 389 1114 385 1087 q 397 1164 394 1141 l 575 1164 l 575 1150 q 520 1050 553 1104 q 448 942 487 996 l 355 942 l 355 959 "},"`":{x_min:225,x_max:575,ha:802,o:"m 437 842 q 382 889 414 860 q 318 946 349 917 q 261 1004 287 976 q 225 1049 235 1031 l 225 1064 l 456 1064 q 482 1013 467 1040 q 512 958 496 986 q 544 905 528 931 q 575 860 560 879 l 575 842 l 437 842 "},"ŏ":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 m 660 1071 q 638 978 656 1020 q 590 906 621 936 q 514 858 558 875 q 411 842 469 842 q 307 858 351 842 q 232 904 262 874 q 186 976 202 934 q 168 1071 170 1018 l 283 1071 q 295 1024 286 1041 q 321 998 305 1007 q 360 987 337 989 q 412 985 383 985 q 459 988 437 985 q 498 1000 481 991 q 527 1026 516 1009 q 541 1071 539 1043 l 660 1071 "},"ý":{x_min:-.25,x_max:749.25,ha:749,o:"m 0 758 l 226 758 l 348 331 q 364 256 359 296 q 371 184 369 216 l 375 184 q 378 219 376 200 q 384 257 381 238 q 392 296 388 277 q 401 331 396 316 l 521 758 l 749 758 l 449 -96 q 334 -275 407 -217 q 152 -334 261 -334 q 91 -330 116 -334 q 47 -322 65 -326 l 47 -158 q 83 -164 61 -161 q 128 -167 104 -167 q 184 -158 161 -167 q 224 -133 207 -149 q 252 -95 240 -117 q 273 -44 264 -72 l 286 -6 l 0 758 m 267 842 l 267 860 q 297 905 281 879 q 329 958 313 931 q 359 1013 345 986 q 385 1064 374 1040 l 617 1064 l 617 1049 q 595 1021 609 1037 q 562 985 581 1004 q 523 946 544 966 q 481 907 502 926 q 439 871 459 888 q 404 842 420 854 l 267 842 "},"º":{x_min:39,x_max:472,ha:511,o:"m 472 756 q 456 652 472 697 q 413 574 441 606 q 344 526 384 543 q 254 510 304 510 q 168 526 207 510 q 99 574 128 543 q 54 652 70 606 q 39 756 39 697 q 54 861 39 815 q 97 938 69 907 q 166 986 125 970 q 257 1003 206 1003 q 342 986 303 1003 q 410 938 381 970 q 455 861 439 907 q 472 756 472 815 m 176 757 q 194 653 176 688 q 256 618 213 618 q 316 653 297 618 q 335 757 335 688 q 316 860 335 826 q 256 894 297 894 q 194 860 213 894 q 176 757 176 826 "},"∞":{x_min:77,x_max:905,ha:982,o:"m 905 486 q 889 398 905 440 q 845 325 873 357 q 777 275 816 294 q 690 256 738 256 q 580 286 630 256 q 487 376 530 315 q 397 292 447 324 q 294 261 348 261 q 207 277 247 261 q 137 323 167 293 q 92 395 108 353 q 77 490 77 437 q 92 579 77 537 q 136 651 108 620 q 205 700 165 682 q 294 718 245 718 q 399 690 350 718 q 491 600 449 663 q 580 684 531 654 q 690 715 628 715 q 777 698 738 715 q 845 652 816 682 q 889 580 873 622 q 905 486 905 537 m 307 400 q 362 422 336 400 q 413 490 388 444 q 363 556 389 534 q 305 578 337 578 q 272 571 287 578 q 247 551 257 564 q 230 523 236 539 q 225 488 225 507 q 230 455 225 471 q 245 427 235 439 q 271 407 255 415 q 307 400 286 400 m 675 574 q 566 487 619 574 q 618 420 591 444 q 676 396 646 396 q 709 403 694 396 q 734 422 724 410 q 750 451 744 435 q 756 486 756 468 q 750 521 756 505 q 734 549 744 537 q 708 567 723 561 q 675 574 693 574 "},"ź":{x_min:37,x_max:595,ha:635,o:"m 595 0 l 37 0 l 37 117 l 347 604 l 58 604 l 58 758 l 582 758 l 582 628 l 281 153 l 595 153 l 595 0 m 212 842 l 212 860 q 242 905 226 879 q 274 958 258 931 q 304 1013 290 986 q 330 1064 319 1040 l 562 1064 l 562 1049 q 540 1021 554 1037 q 507 985 526 1004 q 468 946 489 966 q 426 907 447 926 q 384 871 404 888 q 349 842 365 854 l 212 842 "},"я":{x_min:-.25,x_max:673,ha:782,o:"m 223 0 l 0 0 l 196 305 q 141 337 166 317 q 96 384 115 357 q 66 446 77 411 q 56 524 56 481 q 76 624 56 580 q 135 697 97 668 q 226 742 173 727 q 343 758 279 758 l 673 758 l 673 0 l 466 0 l 466 283 l 385 283 l 223 0 m 262 521 q 293 447 262 473 q 372 421 323 421 l 466 421 l 466 610 l 350 610 q 311 603 328 610 q 284 584 295 596 q 268 555 273 571 q 262 521 262 539 "},"Ё":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 186 1182 q 193 1223 186 1206 q 213 1251 200 1240 q 243 1268 226 1263 q 280 1274 260 1274 q 317 1268 300 1274 q 347 1251 334 1263 q 368 1223 360 1240 q 376 1182 376 1206 q 368 1142 376 1159 q 347 1114 360 1125 q 317 1097 334 1102 q 280 1092 300 1092 q 243 1097 260 1092 q 213 1114 226 1102 q 193 1142 200 1125 q 186 1182 186 1159 m 459 1182 q 466 1223 459 1206 q 486 1251 473 1240 q 517 1268 499 1263 q 555 1274 534 1274 q 591 1268 574 1274 q 622 1251 608 1263 q 643 1223 635 1240 q 651 1182 651 1206 q 643 1142 651 1159 q 622 1114 635 1125 q 591 1097 608 1102 q 555 1092 574 1092 q 486 1114 514 1092 q 459 1182 459 1136 "},"ń":{x_min:109,x_max:767,ha:871,o:"m 767 0 l 560 0 l 560 442 q 535 565 560 524 q 456 606 510 606 q 388 590 415 606 q 345 542 361 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 346 711 322 690 q 397 746 369 732 q 456 766 425 760 q 520 773 487 773 q 621 757 575 773 q 699 707 666 741 q 749 620 731 673 q 767 494 767 568 l 767 0 m 320 842 l 320 860 q 350 905 334 879 q 382 958 366 931 q 412 1013 398 986 q 438 1064 427 1040 l 670 1064 l 670 1049 q 648 1021 662 1037 q 615 985 634 1004 q 576 946 597 966 q 534 907 555 926 q 492 871 512 888 q 457 842 473 854 l 320 842 "}," ":{x_min:0,x_max:0,ha:347},"Г":{x_min:125,x_max:696,ha:724,o:"m 696 992 l 696 817 l 335 817 l 335 0 l 125 0 l 125 992 l 696 992 "},"Ь":{x_min:125,x_max:769,ha:831,o:"m 769 310 q 746 179 769 237 q 678 81 724 121 q 560 21 631 42 q 390 0 489 0 l 125 0 l 125 992 l 335 992 l 335 613 l 408 613 q 569 590 501 613 q 681 527 637 568 q 747 432 726 487 q 769 310 769 376 m 335 174 l 393 174 q 462 182 431 174 q 514 205 492 189 q 547 247 536 221 q 558 310 558 273 q 546 374 558 349 q 510 413 534 399 q 453 432 487 427 q 378 438 420 438 l 335 438 l 335 174 "},"¤":{x_min:62,x_max:703,ha:765,o:"m 114 490 q 123 561 114 527 q 149 624 133 594 l 62 710 l 162 810 l 249 724 q 312 750 278 741 q 381 760 347 760 q 451 750 418 760 q 515 722 483 741 l 601 810 l 703 713 l 615 625 q 642 562 632 597 q 652 490 652 527 q 642 419 652 452 q 615 355 633 386 l 700 271 l 601 173 l 515 257 q 452 232 485 241 q 381 223 418 223 q 310 231 344 223 q 247 257 276 239 l 162 174 l 63 272 l 149 357 q 114 490 114 418 m 262 490 q 272 440 262 464 q 297 399 281 417 q 335 372 313 382 q 381 362 356 362 q 428 372 406 362 q 467 399 450 382 q 493 440 484 417 q 503 490 503 464 q 493 541 503 518 q 467 582 484 565 q 428 610 450 599 q 381 620 406 620 q 335 610 356 620 q 297 582 313 599 q 272 541 281 565 q 262 490 262 518 "},"Ĝ":{x_min:81,x_max:895,ha:1006,o:"m 502 557 l 895 557 l 895 42 q 815 18 855 29 q 732 1 775 8 q 642 -9 689 -5 q 542 -14 595 -14 q 345 18 431 -14 q 200 116 259 51 q 111 276 142 181 q 81 497 81 372 q 114 708 81 613 q 214 868 148 802 q 377 970 281 934 q 599 1006 474 1006 q 754 989 678 1006 q 893 944 830 972 l 823 776 q 719 815 777 799 q 597 831 661 831 q 473 806 528 831 q 378 738 418 782 q 318 632 339 694 q 297 492 297 569 q 311 358 297 419 q 357 253 326 298 q 438 185 388 209 q 555 160 487 160 q 631 165 600 160 q 689 174 662 169 l 689 382 l 502 382 l 502 557 m 690 1071 q 618 1123 655 1093 q 545 1189 580 1152 q 473 1123 508 1152 q 403 1071 438 1093 l 266 1071 l 266 1089 q 305 1134 283 1108 q 348 1187 326 1160 q 390 1242 370 1215 q 426 1293 411 1269 l 667 1293 q 702 1242 682 1269 q 744 1187 722 1215 q 788 1134 766 1160 q 828 1089 811 1108 l 828 1071 l 690 1071 "},p:{x_min:109,x_max:775,ha:844,o:"m 507 -14 q 440 -5 470 -14 q 388 15 411 2 q 347 45 365 28 q 315 81 330 62 l 305 81 q 310 37 307 57 q 314 0 312 19 q 315 -27 315 -17 l 315 -334 l 109 -334 l 109 758 l 277 758 l 306 659 l 315 659 q 348 703 330 682 q 390 739 366 723 q 445 763 414 754 q 512 773 475 773 q 619 747 571 773 q 702 673 668 722 q 756 550 737 623 q 775 380 775 476 q 755 209 775 283 q 700 86 735 136 q 615 11 664 36 q 507 -14 566 -14 m 443 606 q 384 594 408 606 q 345 556 360 581 q 323 492 330 531 q 315 403 317 454 l 315 380 q 322 282 315 325 q 343 211 328 239 q 383 167 358 182 q 444 152 407 152 q 534 211 505 152 q 563 382 563 269 q 534 550 563 494 q 443 606 505 606 "},"Ю":{x_min:125,x_max:1350,ha:1430,o:"m 1350 496 q 1324 287 1350 382 q 1248 126 1299 193 q 1118 22 1196 59 q 932 -14 1040 -14 q 760 17 834 -14 q 634 105 686 48 q 554 245 583 163 q 518 427 525 326 l 335 427 l 335 0 l 125 0 l 125 992 l 335 992 l 335 602 l 522 602 q 562 769 532 695 q 644 897 593 844 q 767 978 694 949 q 934 1007 840 1007 q 1119 970 1040 1007 q 1248 867 1197 934 q 1324 706 1299 800 q 1350 496 1350 612 m 734 496 q 746 355 734 417 q 782 250 758 293 q 845 184 807 207 q 934 160 882 160 q 1024 184 986 160 q 1086 250 1061 207 q 1122 355 1110 293 q 1133 496 1133 417 q 1122 636 1133 574 q 1086 742 1110 698 q 1025 808 1062 785 q 935 832 987 832 q 846 808 883 832 q 783 742 808 785 q 746 636 758 698 q 734 496 734 574 "},"ο":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 "},S:{x_min:63.46875,x_max:668,ha:728,o:"m 668 275 q 645 155 668 208 q 578 64 622 102 q 471 6 535 26 q 326 -14 408 -14 q 187 0 254 -14 q 63 45 120 15 l 63 241 q 129 211 96 225 q 196 185 162 197 q 265 167 231 174 q 333 160 299 160 q 392 168 368 160 q 432 190 417 176 q 455 223 448 203 q 462 264 462 242 q 450 314 462 292 q 417 354 438 335 q 365 390 396 372 q 298 427 335 408 q 228 467 267 444 q 155 524 189 490 q 98 607 121 558 q 75 723 75 655 q 97 842 75 790 q 159 931 119 895 q 258 987 200 968 q 388 1006 316 1006 q 458 1001 424 1006 q 526 987 492 996 q 594 965 560 978 q 663 936 627 953 l 596 772 q 539 797 565 786 q 487 816 512 808 q 438 827 462 823 q 389 831 414 831 q 308 802 336 831 q 280 727 280 774 q 288 683 280 702 q 316 646 297 663 q 364 612 334 630 q 435 572 393 594 q 529 517 486 545 q 603 454 572 488 q 651 376 634 420 q 668 275 668 333 "},"/":{x_min:9.75,x_max:567.25,ha:574,o:"m 567 992 l 197 0 l 9 0 l 379 992 l 567 992 "},"Ŧ":{x_min:28,x_max:735,ha:762,o:"m 487 0 l 277 0 l 277 404 l 116 404 l 116 576 l 277 576 l 277 817 l 28 817 l 28 992 l 735 992 l 735 817 l 487 817 l 487 576 l 648 576 l 648 404 l 487 404 l 487 0 "},"ђ":{x_min:3,x_max:767,ha:871,o:"m 521 -334 q 454 -329 488 -334 q 396 -317 419 -324 l 396 -154 q 435 -164 417 -161 q 476 -167 453 -167 q 509 -162 494 -167 q 535 -144 524 -157 q 553 -109 547 -131 q 560 -52 560 -87 l 560 414 q 533 526 560 489 q 456 563 506 563 q 389 547 416 563 q 345 498 362 530 q 322 420 329 467 q 315 314 315 374 l 315 0 l 109 0 l 109 808 l 3 808 l 3 946 l 109 946 l 109 1055 l 315 1055 l 315 946 l 529 946 l 529 808 l 315 808 l 315 796 q 314 736 315 768 q 311 679 313 705 l 306 618 l 317 618 q 402 703 350 677 q 518 730 453 730 q 620 714 575 730 q 699 664 666 698 q 749 577 731 630 q 767 452 767 525 l 767 -82 q 753 -180 767 -134 q 711 -260 740 -226 q 634 -314 681 -294 q 521 -334 587 -334 "},y:{x_min:-.25,x_max:749.25,ha:749,o:"m 0 758 l 226 758 l 348 331 q 364 256 359 296 q 371 184 369 216 l 375 184 q 378 219 376 200 q 384 257 381 238 q 392 296 388 277 q 401 331 396 316 l 521 758 l 749 758 l 449 -96 q 334 -275 407 -217 q 152 -334 261 -334 q 91 -330 116 -334 q 47 -322 65 -326 l 47 -158 q 83 -164 61 -161 q 128 -167 104 -167 q 184 -158 161 -167 q 224 -133 207 -149 q 252 -95 240 -117 q 273 -44 264 -72 l 286 -6 l 0 758 "},"Π":{x_min:125,x_max:854,ha:979,o:"m 854 0 l 643 0 l 643 817 l 335 817 l 335 0 l 125 0 l 125 992 l 854 992 l 854 0 "},"‗":{x_min:-3,x_max:574,ha:571,o:"m 574 -314 l -3 -314 l -3 -219 l 574 -219 l 574 -314 m 574 -125 l -3 -125 l -3 -31 l 574 -31 l 574 -125 "},"–":{x_min:56,x_max:639,ha:695,o:"m 56 296 l 56 452 l 639 452 l 639 296 l 56 296 "},"ë":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 181 953 q 188 994 181 977 q 208 1022 195 1011 q 238 1039 221 1034 q 275 1045 255 1045 q 312 1039 295 1045 q 342 1022 329 1034 q 363 994 355 1011 q 371 953 371 977 q 363 913 371 930 q 342 885 355 896 q 312 868 329 873 q 275 863 295 863 q 238 868 255 863 q 208 885 221 873 q 188 913 195 896 q 181 953 181 930 m 454 953 q 461 994 454 977 q 481 1022 468 1011 q 512 1039 494 1034 q 550 1045 529 1045 q 586 1039 569 1045 q 617 1022 603 1034 q 638 994 630 1011 q 646 953 646 977 q 638 913 646 930 q 617 885 630 896 q 586 868 603 873 q 550 863 569 863 q 481 885 509 863 q 454 953 454 907 "},"б":{x_min:69,x_max:766,ha:851,o:"m 69 454 q 90 677 69 579 q 158 844 111 774 q 278 959 205 915 q 455 1022 351 1003 q 595 1045 524 1035 q 742 1067 666 1056 l 766 886 q 694 876 732 882 q 617 865 656 871 q 542 853 578 859 q 477 843 507 847 q 394 821 429 835 q 334 779 358 807 q 296 706 309 752 q 280 590 284 661 l 288 590 q 318 630 300 610 q 362 667 336 651 q 421 695 388 684 q 494 706 454 706 q 607 684 556 706 q 692 622 657 663 q 747 519 728 581 q 766 374 766 457 q 740 204 766 277 q 669 83 715 131 q 558 10 622 34 q 416 -14 494 -14 q 272 16 336 -14 q 163 106 208 47 q 93 253 118 166 q 69 454 69 340 m 427 152 q 479 162 455 152 q 519 196 502 173 q 545 259 536 220 q 554 355 554 298 q 547 437 554 400 q 528 499 541 473 q 492 538 514 524 q 439 552 470 552 q 384 539 410 552 q 337 508 358 526 q 301 470 316 490 q 280 435 286 450 q 287 331 280 382 q 311 240 294 279 q 356 176 327 200 q 427 152 384 152 "},"ƒ":{x_min:120,x_max:714,ha:765,o:"m 491 -81 q 478 -180 491 -134 q 435 -260 465 -225 q 359 -314 406 -294 q 245 -334 312 -334 q 177 -329 212 -334 q 120 -317 143 -324 l 120 -154 q 159 -164 140 -161 q 200 -167 177 -167 q 232 -162 217 -167 q 259 -143 247 -156 q 278 -108 271 -130 q 285 -51 285 -86 l 285 547 l 171 547 l 171 646 l 285 701 l 285 756 q 302 877 285 829 q 352 953 320 925 q 431 994 385 982 q 535 1006 478 1006 q 641 996 598 1006 q 714 974 684 986 l 665 822 q 621 835 644 829 q 567 841 598 841 q 509 815 526 841 q 493 748 493 789 l 493 701 l 647 701 l 647 547 l 493 547 l 491 -81 "},"у":{x_min:-.25,x_max:749.25,ha:749,o:"m 0 758 l 226 758 l 348 331 q 364 256 359 296 q 371 184 369 216 l 375 184 q 378 219 376 200 q 384 257 381 238 q 392 296 388 277 q 401 331 396 316 l 521 758 l 749 758 l 449 -96 q 334 -275 407 -217 q 152 -334 261 -334 q 91 -330 116 -334 q 47 -322 65 -326 l 47 -158 q 83 -164 61 -161 q 128 -167 104 -167 q 184 -158 161 -167 q 224 -133 207 -149 q 252 -95 240 -117 q 273 -44 264 -72 l 286 -6 l 0 758 "},J:{x_min:-135,x_max:335,ha:460,o:"m -1 -292 q -78 -287 -45 -292 q -135 -277 -111 -283 l -135 -103 q -82 -112 -109 -108 q -22 -117 -54 -117 q 35 -110 8 -117 q 82 -86 62 -103 q 113 -42 102 -70 q 124 27 124 -14 l 124 992 l 335 992 l 335 35 q 310 -111 335 -49 q 241 -213 285 -173 q 134 -273 196 -254 q -1 -292 73 -292 "},"ŷ":{x_min:-.25,x_max:749.25,ha:749,o:"m 0 758 l 226 758 l 348 331 q 364 256 359 296 q 371 184 369 216 l 375 184 q 378 219 376 200 q 384 257 381 238 q 392 296 388 277 q 401 331 396 316 l 521 758 l 749 758 l 449 -96 q 334 -275 407 -217 q 152 -334 261 -334 q 91 -330 116 -334 q 47 -322 65 -326 l 47 -158 q 83 -164 61 -161 q 128 -167 104 -167 q 184 -158 161 -167 q 224 -133 207 -149 q 252 -95 240 -117 q 273 -44 264 -72 l 286 -6 l 0 758 m 519 842 q 447 894 484 864 q 374 960 409 923 q 302 894 337 923 q 232 842 267 864 l 95 842 l 95 860 q 134 905 112 879 q 177 958 155 931 q 219 1013 199 986 q 255 1064 240 1040 l 496 1064 q 531 1013 511 1040 q 573 958 551 986 q 617 905 595 931 q 657 860 640 879 l 657 842 l 519 842 "},"ŕ":{x_min:109,x_max:580,ha:603,o:"m 504 773 q 522 772 512 773 q 541 771 532 772 q 558 769 550 770 q 570 766 565 768 l 570 572 q 555 575 564 574 q 535 578 545 576 q 514 579 524 579 q 497 579 504 579 q 423 569 457 579 q 366 536 390 559 q 329 476 342 513 q 315 386 315 439 l 315 0 l 109 0 l 109 758 l 265 758 l 296 644 l 306 644 q 341 697 322 673 q 383 738 360 721 q 436 763 407 754 q 504 773 466 773 m 230 842 l 230 860 q 260 905 244 879 q 292 958 276 931 q 322 1013 308 986 q 348 1064 337 1040 l 580 1064 l 580 1049 q 558 1021 572 1037 q 525 985 544 1004 q 486 946 507 966 q 444 907 465 926 q 402 871 422 888 q 367 842 383 854 l 230 842 "},"ώ":{x_min:81,x_max:1091,ha:1171,o:"m 798 -14 q 722 -3 755 -14 q 663 25 689 6 q 620 72 638 45 q 589 133 602 100 l 582 133 q 551 72 570 100 q 508 25 533 45 q 450 -3 483 6 q 374 -14 416 -14 q 245 14 300 -14 q 154 92 190 42 q 99 213 117 143 q 81 367 81 283 q 85 472 81 423 q 99 568 90 521 q 124 662 109 615 q 158 758 138 708 l 360 758 q 296 573 316 666 q 275 378 275 480 q 282 286 275 327 q 303 215 289 244 q 340 168 317 185 q 393 152 362 152 q 439 163 421 152 q 468 195 458 174 q 484 248 479 217 q 489 319 489 279 l 489 517 l 683 517 l 683 319 q 688 248 683 279 q 703 195 692 217 q 733 163 714 174 q 779 152 751 152 q 832 168 810 152 q 868 214 854 185 q 889 285 883 244 q 896 375 896 326 q 876 572 896 477 q 811 758 855 666 l 1012 758 q 1047 662 1032 708 q 1072 568 1062 615 q 1086 472 1082 521 q 1091 367 1091 423 q 1072 213 1091 283 q 1017 92 1053 143 q 925 14 980 42 q 798 -14 870 -14 m 521 860 q 533 906 527 880 q 544 960 539 932 q 555 1014 550 987 q 562 1064 559 1041 l 754 1064 l 754 1049 q 705 950 733 1003 q 641 842 677 897 l 521 842 l 521 860 "},"˘":{x_min:154,x_max:646,ha:802,o:"m 646 1071 q 624 978 642 1020 q 576 906 607 936 q 500 858 544 875 q 397 842 455 842 q 293 858 337 842 q 218 904 248 874 q 172 976 188 934 q 154 1071 156 1018 l 269 1071 q 281 1024 272 1041 q 307 998 291 1007 q 346 987 323 989 q 398 985 369 985 q 445 988 423 985 q 484 1000 467 991 q 513 1026 502 1009 q 527 1071 525 1043 l 646 1071 "},D:{x_min:125,x_max:892,ha:973,o:"m 892 505 q 857 285 892 379 q 758 127 823 190 q 600 31 693 63 q 386 0 506 0 l 125 0 l 125 992 l 415 992 q 612 960 524 992 q 762 868 700 929 q 858 715 824 806 q 892 505 892 624 m 681 499 q 665 641 681 581 q 616 740 648 701 q 538 798 584 779 q 432 817 492 817 l 335 817 l 335 174 l 413 174 q 614 255 547 174 q 681 499 681 336 "},"ł":{x_min:.203125,x_max:458.6875,ha:458,o:"m 331 630 l 379 659 l 458 526 l 331 450 l 331 0 l 125 0 l 125 323 l 76 294 l 0 427 l 125 503 l 125 1055 l 331 1055 l 331 630 "},"ĺ":{x_min:109,x_max:472,ha:424,o:"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 m 122 1110 l 122 1128 q 152 1173 136 1147 q 184 1226 168 1199 q 214 1281 200 1254 q 240 1332 229 1308 l 472 1332 l 472 1317 q 450 1289 464 1305 q 417 1253 436 1272 q 378 1214 399 1234 q 336 1175 357 1194 q 294 1139 314 1156 q 259 1110 275 1122 l 122 1110 "},"ц":{x_min:109,x_max:894,ha:914,o:"m 783 151 l 894 151 l 894 -272 l 715 -272 l 715 0 l 109 0 l 109 758 l 315 758 l 315 155 l 576 155 l 576 758 l 783 758 l 783 151 "},"Л":{x_min:11,x_max:854,ha:979,o:"m 854 0 l 643 0 l 643 817 l 470 817 q 452 677 462 753 q 432 525 443 601 q 411 380 422 449 q 389 258 400 310 q 355 142 375 193 q 303 56 334 91 q 225 3 271 21 q 114 -14 179 -14 q 59 -10 85 -14 q 11 1 33 -6 l 11 174 q 46 164 28 168 q 84 160 63 160 q 119 170 104 160 q 146 203 134 179 q 169 264 159 226 q 190 361 179 303 q 206 457 196 395 q 229 603 217 520 q 256 785 242 686 q 283 992 270 884 l 854 992 l 854 0 "},$:{x_min:66,x_max:720,ha:765,o:"m 720 310 q 702 216 720 259 q 648 140 684 172 q 559 86 612 107 q 437 58 507 65 l 437 -80 l 345 -80 l 345 56 q 261 61 300 57 q 190 72 223 65 q 126 90 157 80 q 67 114 96 101 l 67 293 q 129 266 95 279 q 199 242 163 253 q 272 224 235 232 q 345 215 309 217 l 345 430 q 333 435 339 432 q 322 439 327 437 q 313 443 317 441 q 204 492 251 466 q 127 550 158 518 q 81 620 96 582 q 66 708 66 659 q 85 800 66 759 q 140 873 104 842 q 228 923 176 904 q 345 948 280 942 l 345 1055 l 437 1055 l 437 953 q 558 936 496 949 q 688 893 620 922 l 619 734 q 527 766 575 752 q 437 783 479 780 l 437 584 l 464 575 q 576 526 528 551 q 656 470 625 501 q 704 400 688 439 q 720 310 720 361 m 515 306 q 511 334 515 322 q 497 357 507 346 q 473 375 488 367 q 437 393 458 384 l 437 222 q 496 249 477 228 q 515 306 515 269 m 270 712 q 288 659 270 681 q 345 624 305 638 l 345 782 q 289 761 307 778 q 270 712 270 745 "},w:{x_min:-.25,x_max:1120.25,ha:1120,o:"m 688 0 l 629 265 q 622 297 626 276 q 612 346 618 319 q 601 403 607 372 q 589 463 595 433 q 559 613 575 532 l 555 613 q 527 462 539 532 q 515 402 521 432 q 504 344 510 371 q 494 296 499 317 q 487 262 490 274 l 426 0 l 204 0 l 0 758 l 205 758 l 282 422 q 294 359 288 395 q 306 284 301 322 q 317 213 312 246 q 324 160 322 179 l 328 160 q 331 193 329 172 q 337 237 334 214 q 344 286 341 261 q 352 332 348 311 q 359 371 356 354 q 364 394 362 387 l 447 758 l 674 758 l 754 394 q 763 348 757 379 q 774 281 768 317 q 784 212 780 246 q 789 160 788 178 l 793 160 q 800 210 795 176 q 811 281 805 243 q 824 357 817 320 q 837 422 831 395 l 917 758 l 1120 758 l 913 0 l 688 0 "},"о":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 "},"Д":{x_min:7,x_max:978,ha:1006,o:"m 7 174 l 84 174 q 158 338 122 252 q 226 523 195 424 q 281 738 256 622 q 324 992 307 854 l 846 992 l 846 174 l 978 174 l 978 -289 l 772 -289 l 772 0 l 212 0 l 212 -289 l 7 -289 l 7 174 m 490 817 q 463 663 480 745 q 421 497 445 581 q 367 331 397 413 q 305 174 338 248 l 635 174 l 635 817 l 490 817 "},"Ç":{x_min:81,x_max:836.296875,ha:885,o:"m 546 831 q 439 807 485 831 q 361 740 392 784 q 313 633 329 696 q 297 492 297 571 q 311 351 297 413 q 356 247 326 289 q 433 183 386 205 q 546 160 481 160 q 667 174 606 160 q 799 213 727 188 l 799 36 q 734 13 766 23 q 669 -1 702 4 q 601 -10 636 -7 q 526 -14 566 -14 q 327 22 411 -14 q 188 125 243 59 q 107 285 133 192 q 81 494 81 379 q 111 700 81 606 q 201 862 142 794 q 346 968 260 930 q 546 1006 433 1006 q 694 987 620 1006 q 836 936 768 968 l 768 765 q 656 811 712 791 q 546 831 600 831 m 628 -169 q 617 -239 628 -208 q 582 -290 606 -269 q 517 -322 558 -311 q 418 -334 477 -334 q 363 -329 387 -334 q 319 -319 338 -325 l 319 -205 q 341 -210 329 -208 q 367 -215 354 -213 q 393 -218 380 -217 q 416 -220 406 -220 q 450 -210 435 -220 q 465 -178 465 -201 q 440 -133 465 -153 q 352 -105 414 -114 l 405 0 l 536 0 l 517 -41 q 558 -59 538 -48 q 593 -87 578 -71 q 618 -124 608 -103 q 628 -169 628 -144 "},"Ŝ":{x_min:63.46875,x_max:668,ha:728,o:"m 668 275 q 645 155 668 208 q 578 64 622 102 q 471 6 535 26 q 326 -14 408 -14 q 187 0 254 -14 q 63 45 120 15 l 63 241 q 129 211 96 225 q 196 185 162 197 q 265 167 231 174 q 333 160 299 160 q 392 168 368 160 q 432 190 417 176 q 455 223 448 203 q 462 264 462 242 q 450 314 462 292 q 417 354 438 335 q 365 390 396 372 q 298 427 335 408 q 228 467 267 444 q 155 524 189 490 q 98 607 121 558 q 75 723 75 655 q 97 842 75 790 q 159 931 119 895 q 258 987 200 968 q 388 1006 316 1006 q 458 1001 424 1006 q 526 987 492 996 q 594 965 560 978 q 663 936 627 953 l 596 772 q 539 797 565 786 q 487 816 512 808 q 438 827 462 823 q 389 831 414 831 q 308 802 336 831 q 280 727 280 774 q 288 683 280 702 q 316 646 297 663 q 364 612 334 630 q 435 572 393 594 q 529 517 486 545 q 603 454 572 488 q 651 376 634 420 q 668 275 668 333 m 530 1071 q 458 1123 495 1093 q 385 1189 420 1152 q 313 1123 348 1152 q 243 1071 278 1093 l 106 1071 l 106 1089 q 145 1134 123 1108 q 188 1187 166 1160 q 230 1242 210 1215 q 266 1293 251 1269 l 507 1293 q 542 1242 522 1269 q 584 1187 562 1215 q 628 1134 606 1160 q 668 1089 651 1108 l 668 1071 l 530 1071 "},C:{x_min:81,x_max:836.296875,ha:885,o:"m 546 831 q 439 807 485 831 q 361 740 392 784 q 313 633 329 696 q 297 492 297 571 q 311 351 297 413 q 356 247 326 289 q 433 183 386 205 q 546 160 481 160 q 667 174 606 160 q 799 213 727 188 l 799 36 q 734 13 766 23 q 669 -1 702 4 q 601 -10 636 -7 q 526 -14 566 -14 q 327 22 411 -14 q 188 125 243 59 q 107 285 133 192 q 81 494 81 379 q 111 700 81 606 q 201 862 142 794 q 346 968 260 930 q 546 1006 433 1006 q 694 987 620 1006 q 836 936 768 968 l 768 765 q 656 811 712 791 q 546 831 600 831 "},"Ḁ":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 622 -244 q 608 -312 622 -282 q 572 -363 595 -342 q 517 -395 548 -384 q 449 -407 486 -407 q 381 -395 412 -407 q 328 -363 350 -384 q 294 -313 306 -343 q 282 -245 282 -283 q 294 -178 282 -208 q 328 -128 306 -148 q 381 -96 350 -107 q 449 -85 412 -85 q 517 -96 485 -85 q 571 -128 548 -107 q 608 -178 594 -148 q 622 -244 622 -207 m 516 -245 q 498 -197 516 -215 q 452 -180 480 -180 q 405 -197 423 -180 q 387 -245 387 -215 q 403 -293 387 -276 q 452 -311 419 -311 q 498 -293 480 -311 q 516 -245 516 -276 "},"Ĵ":{x_min:-135,x_max:508,ha:460,o:"m -1 -292 q -78 -287 -45 -292 q -135 -277 -111 -283 l -135 -103 q -82 -112 -109 -108 q -22 -117 -54 -117 q 35 -110 8 -117 q 82 -86 62 -103 q 113 -42 102 -70 q 124 27 124 -14 l 124 992 l 335 992 l 335 35 q 310 -111 335 -49 q 241 -213 285 -173 q 134 -273 196 -254 q -1 -292 73 -292 m 370 1071 q 298 1123 335 1093 q 225 1189 260 1152 q 153 1123 188 1152 q 83 1071 118 1093 l -54 1071 l -54 1089 q -14 1134 -36 1108 q 28 1187 6 1160 q 70 1242 50 1215 q 106 1293 91 1269 l 347 1293 q 382 1242 362 1269 q 424 1187 402 1215 q 468 1134 446 1160 q 508 1089 491 1108 l 508 1071 l 370 1071 "},"È":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 388 1071 q 333 1118 365 1089 q 269 1175 300 1146 q 212 1233 238 1205 q 176 1278 186 1260 l 176 1293 l 407 1293 q 433 1242 418 1269 q 463 1187 447 1215 q 495 1134 479 1160 q 526 1089 511 1108 l 526 1071 l 388 1071 "},"ﬁ":{x_min:28,x_max:863.359375,ha:961,o:"m 503 604 l 348 604 l 348 0 l 142 0 l 142 604 l 28 604 l 28 703 l 142 758 l 142 813 q 159 934 142 886 q 209 1010 177 982 q 288 1051 242 1039 q 392 1063 334 1063 q 497 1053 454 1063 q 570 1030 540 1043 l 521 877 q 477 890 500 884 q 422 896 454 896 q 365 871 382 896 q 348 804 348 845 l 348 758 l 503 758 l 503 604 m 638 953 q 647 1002 638 983 q 671 1033 655 1021 q 707 1050 686 1045 q 750 1055 727 1055 q 794 1050 773 1055 q 829 1033 814 1045 q 854 1002 845 1021 q 863 953 863 983 q 854 905 863 925 q 829 874 845 885 q 794 857 814 862 q 750 852 773 852 q 707 857 727 852 q 671 874 686 862 q 647 905 655 885 q 638 953 638 925 m 853 0 l 647 0 l 647 758 l 853 758 l 853 0 "},X:{x_min:-.25,x_max:871.25,ha:871,o:"m 871 0 l 631 0 l 428 375 l 224 0 l 0 0 l 301 511 l 20 992 l 252 992 l 438 635 l 620 992 l 847 992 l 563 500 l 871 0 "},"ô":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 m 557 842 q 485 894 522 864 q 412 960 447 923 q 340 894 375 923 q 270 842 305 864 l 133 842 l 133 860 q 172 905 150 879 q 215 958 193 931 q 257 1013 237 986 q 293 1064 278 1040 l 534 1064 q 569 1013 549 1040 q 611 958 589 986 q 655 905 633 931 q 695 860 678 879 l 695 842 l 557 842 "},"Ė":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 296 1164 q 304 1213 296 1194 q 328 1244 313 1232 q 364 1261 344 1256 q 408 1266 385 1266 q 451 1261 431 1266 q 487 1244 472 1256 q 511 1213 502 1232 q 521 1164 521 1194 q 511 1116 521 1136 q 487 1085 502 1096 q 451 1068 472 1073 q 408 1063 431 1063 q 364 1068 385 1063 q 328 1085 344 1073 q 304 1116 313 1096 q 296 1164 296 1136 "},"г":{x_min:109,x_max:590,ha:623,o:"m 590 758 l 590 604 l 315 604 l 315 0 l 109 0 l 109 758 l 590 758 "},"Ŀ":{x_min:125,x_max:696,ha:743,o:"m 125 0 l 125 992 l 335 992 l 335 174 l 696 174 l 696 0 l 125 0 m 452 509 q 460 558 452 539 q 484 589 469 577 q 520 606 500 601 q 564 611 541 611 q 607 606 587 611 q 643 589 628 601 q 667 558 658 577 q 677 509 677 539 q 667 461 677 481 q 643 430 658 441 q 607 413 628 418 q 564 408 587 408 q 520 413 541 408 q 484 430 500 418 q 460 461 469 441 q 452 509 452 481 "},"х":{x_min:6.75,x_max:754.25,ha:761,o:"m 263 387 l 19 758 l 254 758 l 380 530 l 508 758 l 743 758 l 495 387 l 754 0 l 519 0 l 380 245 l 241 0 l 6 0 l 263 387 "},"ŋ":{x_min:109,x_max:767,ha:871,o:"m 521 -334 q 454 -329 489 -334 q 397 -317 420 -324 l 397 -154 q 435 -164 417 -161 q 476 -167 453 -167 q 509 -162 494 -167 q 535 -143 524 -156 q 553 -108 547 -130 q 560 -51 560 -86 l 560 458 q 533 569 560 532 q 456 606 507 606 q 388 590 415 606 q 345 542 361 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 346 711 322 690 q 397 746 369 732 q 456 766 425 760 q 520 773 487 773 q 621 757 575 773 q 699 707 666 741 q 749 620 731 673 q 767 494 767 568 l 767 -82 q 753 -180 767 -134 q 711 -260 740 -226 q 634 -314 681 -294 q 521 -334 588 -334 "},"Ч":{x_min:74,x_max:831,ha:956,o:"m 831 0 l 620 0 l 620 383 q 545 356 581 368 q 475 337 509 345 q 408 326 441 330 q 341 322 375 322 q 229 339 278 322 q 144 389 179 356 q 92 471 110 422 q 74 581 74 519 l 74 992 l 284 992 l 284 641 q 312 533 284 569 q 408 496 341 496 q 509 509 458 496 q 620 547 559 522 l 620 992 l 831 992 l 831 0 "},"ü":{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 200 953 q 207 994 200 977 q 227 1022 214 1011 q 257 1039 240 1034 q 294 1045 274 1045 q 331 1039 314 1045 q 361 1022 348 1034 q 382 994 374 1011 q 390 953 390 977 q 382 913 390 930 q 361 885 374 896 q 331 868 348 873 q 294 863 314 863 q 257 868 274 863 q 227 885 240 873 q 207 913 214 896 q 200 953 200 930 m 473 953 q 480 994 473 977 q 500 1022 487 1011 q 531 1039 513 1034 q 569 1045 548 1045 q 605 1039 588 1045 q 636 1022 622 1034 q 657 994 649 1011 q 665 953 665 977 q 657 913 665 930 q 636 885 649 896 q 605 868 622 873 q 569 863 588 863 q 500 885 528 863 q 473 953 473 907 "},"ь":{x_min:109,x_max:762,ha:818,o:"m 315 467 l 449 467 q 685 411 609 467 q 762 242 762 356 q 744 142 762 187 q 688 65 726 97 q 591 17 650 34 q 447 0 531 0 l 109 0 l 109 758 l 315 758 l 315 467 m 555 239 q 525 300 555 281 q 436 319 495 319 l 315 319 l 315 147 l 438 147 q 522 168 490 147 q 555 239 555 189 "},"Ÿ":{x_min:-.25,x_max:812.25,ha:811,o:"m 406 583 l 585 992 l 812 992 l 511 385 l 511 0 l 301 0 l 301 379 l 0 992 l 227 992 l 406 583 m 174 1182 q 181 1223 174 1206 q 201 1251 188 1240 q 231 1268 214 1263 q 268 1274 248 1274 q 305 1268 288 1274 q 335 1251 322 1263 q 356 1223 348 1240 q 364 1182 364 1206 q 356 1142 364 1159 q 335 1114 348 1125 q 305 1097 322 1102 q 268 1092 288 1092 q 231 1097 248 1092 q 201 1114 214 1102 q 181 1142 188 1125 q 174 1182 174 1159 m 447 1182 q 454 1223 447 1206 q 474 1251 461 1240 q 505 1268 487 1263 q 543 1274 522 1274 q 579 1268 562 1274 q 610 1251 596 1263 q 631 1223 623 1240 q 639 1182 639 1206 q 631 1142 639 1159 q 610 1114 623 1125 q 579 1097 596 1102 q 543 1092 562 1092 q 474 1114 502 1092 q 447 1182 447 1136 "},"€":{x_min:45,x_max:755.671875,ha:765,o:"m 520 829 q 405 781 450 829 q 345 644 360 734 l 584 644 l 584 523 l 335 523 q 334 512 335 517 q 333 500 333 506 q 333 488 333 494 q 333 468 333 475 q 335 447 333 461 l 542 447 l 542 326 l 346 326 q 410 197 364 238 q 533 155 457 155 q 631 167 586 155 q 717 199 676 179 l 717 26 q 630 -3 678 6 q 518 -14 582 -14 q 261 74 355 -14 q 137 326 167 162 l 45 326 l 45 447 l 125 447 q 122 469 122 458 q 122 488 122 480 q 122 507 122 498 q 123 523 123 517 l 45 523 l 45 644 l 135 644 q 178 793 148 727 q 257 904 209 859 q 370 974 305 950 q 516 999 435 999 q 643 984 586 999 q 755 943 701 970 l 690 786 q 604 817 644 806 q 520 829 563 829 "},"в":{x_min:109,x_max:791,ha:853,o:"m 767 560 q 729 457 767 500 q 615 402 691 414 l 615 397 q 688 378 655 392 q 743 342 720 364 q 778 291 765 320 q 791 228 791 262 q 773 136 791 178 q 717 64 755 94 q 619 17 679 34 q 475 0 560 0 l 109 0 l 109 758 l 473 758 q 590 747 537 758 q 683 714 644 737 q 744 653 722 691 q 767 560 767 616 m 579 241 q 549 306 579 286 q 458 326 519 326 l 315 326 l 315 147 l 461 147 q 509 152 487 147 q 546 168 530 157 q 570 198 561 180 q 579 241 579 216 m 555 543 q 463 610 555 610 l 315 610 l 315 464 l 442 464 q 527 482 498 464 q 555 543 555 501 "},"Η":{x_min:125,x_max:882,ha:1007,o:"m 882 0 l 671 0 l 671 428 l 335 428 l 335 0 l 125 0 l 125 992 l 335 992 l 335 603 l 671 603 l 671 992 l 882 992 l 882 0 "},"С":{x_min:81,x_max:836.296875,ha:885,o:"m 546 831 q 439 807 485 831 q 361 740 392 784 q 313 633 329 696 q 297 492 297 571 q 311 351 297 413 q 356 247 326 289 q 433 183 386 205 q 546 160 481 160 q 667 174 606 160 q 799 213 727 188 l 799 36 q 734 13 766 23 q 669 -1 702 4 q 601 -10 636 -7 q 526 -14 566 -14 q 327 22 411 -14 q 188 125 243 59 q 107 285 133 192 q 81 494 81 379 q 111 700 81 606 q 201 862 142 794 q 346 968 260 930 q 546 1006 433 1006 q 694 987 620 1006 q 836 936 768 968 l 768 765 q 656 811 712 791 q 546 831 600 831 "},"ß":{x_min:109,x_max:897,ha:946,o:"m 805 841 q 791 765 805 798 q 755 706 776 732 q 709 661 734 680 q 662 625 683 641 q 627 594 641 609 q 612 565 612 580 q 621 540 612 551 q 647 515 629 528 q 692 484 665 501 q 758 441 720 467 q 817 398 791 420 q 860 350 843 376 q 887 292 878 323 q 897 220 897 261 q 817 45 897 104 q 584 -14 738 -14 q 469 -4 518 -14 q 379 28 420 5 l 379 192 q 419 170 395 181 q 468 151 442 160 q 521 138 494 143 q 571 133 548 133 q 655 154 625 133 q 685 218 685 175 q 680 250 685 236 q 661 278 675 264 q 622 309 648 292 q 557 348 597 325 q 485 394 514 373 q 438 437 456 416 q 413 481 420 458 q 405 532 405 505 q 419 594 405 567 q 454 641 433 620 q 499 679 475 662 q 545 715 524 697 q 580 753 566 733 q 593 801 593 774 q 560 870 593 844 q 460 896 526 896 q 351 864 388 896 q 315 761 315 831 l 315 0 l 109 0 l 109 772 q 134 901 109 846 q 205 991 159 955 q 317 1045 251 1027 q 461 1063 382 1063 q 602 1048 539 1063 q 711 1005 666 1033 q 781 936 756 977 q 805 841 805 894 "},"њ":{x_min:109,x_max:1143,ha:1198,o:"m 737 467 l 829 467 q 1066 411 989 467 q 1143 242 1143 356 q 1125 142 1143 187 q 1069 65 1107 97 q 971 17 1031 34 q 828 0 912 0 l 531 0 l 531 310 l 315 310 l 315 0 l 109 0 l 109 758 l 315 758 l 315 468 l 531 468 l 531 758 l 737 758 l 737 467 m 936 239 q 906 300 936 281 q 817 319 876 319 l 737 319 l 737 147 l 819 147 q 903 168 871 147 q 936 239 936 189 "},"Ű":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 272 1071 l 272 1089 q 302 1134 286 1108 q 334 1187 318 1160 q 364 1242 350 1215 q 389 1293 379 1269 l 594 1293 l 594 1278 q 572 1250 586 1266 q 539 1214 558 1233 q 500 1175 521 1195 q 457 1136 478 1155 q 416 1100 436 1117 q 381 1071 396 1083 l 272 1071 m 541 1071 l 541 1089 q 571 1134 555 1108 q 603 1187 587 1160 q 633 1242 619 1215 q 658 1293 648 1269 l 863 1293 l 863 1278 q 841 1250 855 1266 q 808 1214 827 1233 q 769 1175 790 1195 q 727 1136 748 1155 q 686 1100 705 1117 q 650 1071 666 1083 l 541 1071 "},c:{x_min:69,x_max:648.703125,ha:693,o:"m 424 -14 q 277 8 342 -14 q 165 78 211 30 q 93 198 118 125 q 69 375 69 272 q 94 564 69 488 q 166 687 119 641 q 278 753 212 733 q 424 773 343 773 q 540 758 482 773 q 648 718 597 744 l 588 562 q 502 594 544 581 q 423 606 461 606 q 314 549 348 606 q 280 376 280 491 q 314 206 280 261 q 421 152 348 152 q 528 167 480 152 q 627 206 576 182 l 627 35 q 578 13 601 23 q 530 -1 554 4 q 480 -10 506 -7 q 424 -14 453 -14 "},"¶":{x_min:77,x_max:792,ha:910,o:"m 792 -176 l 682 -176 l 682 919 l 569 919 l 569 -176 l 460 -176 l 460 379 q 361 367 418 367 q 244 384 296 367 q 154 441 191 401 q 97 546 117 481 q 77 706 77 611 q 99 873 77 806 q 161 980 121 939 q 258 1038 201 1021 q 382 1055 314 1055 l 792 1055 l 792 -176 "},"Ή":{x_min:-39,x_max:965,ha:1091,o:"m 965 0 l 754 0 l 754 428 l 418 428 l 418 0 l 208 0 l 208 992 l 418 992 l 418 603 l 754 603 l 754 992 l 965 992 l 965 0 m -39 789 q -26 835 -32 809 q -15 889 -20 861 q -5 943 -9 916 q 2 993 0 970 l 194 993 l 194 978 q 145 879 173 932 q 81 771 117 826 l -39 771 l -39 789 "},"Ὅ":{x_min:-269,x_max:1026,ha:1106,o:"m 1026 496 q 999 287 1026 382 q 917 126 972 193 q 778 22 862 59 q 581 -14 695 -14 q 383 22 467 -14 q 245 126 299 59 q 163 288 190 193 q 137 498 137 382 q 163 707 137 613 q 245 867 190 801 q 384 970 300 934 q 582 1007 467 1007 q 779 970 696 1007 q 917 867 863 934 q 999 706 972 800 q 1026 496 1026 612 m 353 496 q 366 355 353 417 q 408 250 380 293 q 479 184 436 207 q 581 160 522 160 q 685 184 641 160 q 755 250 728 207 q 796 355 783 293 q 809 496 809 417 q 796 636 809 574 q 755 742 783 698 q 685 808 728 785 q 582 832 642 832 q 480 808 523 832 q 408 742 436 785 q 366 636 380 698 q 353 496 353 574 m -269 858 q -258 904 -269 881 q -223 947 -247 927 q -162 980 -199 966 q -70 1003 -124 995 l -70 952 q -143 925 -119 937 q -166 893 -166 912 q -154 874 -166 880 q -126 862 -141 868 q -98 848 -111 857 q -86 820 -86 839 q -107 780 -86 795 q -173 765 -128 765 q -210 770 -193 765 q -241 787 -228 775 q -261 816 -254 798 q -269 858 -269 834 m -34 788 q -21 834 -28 808 q -5 887 -13 859 q 9 942 1 915 q 21 993 16 969 l 199 993 l 199 979 q 172 930 188 956 q 137 876 156 904 q 98 822 119 849 q 58 771 77 795 l -34 771 l -34 788 "},"γ":{x_min:.75,x_max:747.25,ha:747,o:"m 483 12 q 452 -76 466 -29 q 430 -167 439 -122 q 417 -255 421 -213 q 412 -334 412 -298 l 201 -334 q 206 -264 201 -305 q 220 -176 211 -223 q 242 -82 229 -130 q 268 8 254 -34 l 0 758 l 215 758 l 314 423 q 332 359 323 395 q 350 286 342 322 q 365 218 359 249 q 374 168 371 186 l 378 168 q 384 218 380 189 q 397 278 389 246 q 413 345 404 310 q 433 413 422 379 l 531 758 l 747 758 l 483 12 "},"­":{x_min:41,x_max:406,ha:447,o:"m 41 287 l 41 457 l 406 457 l 406 287 l 41 287 "},":":{x_min:79,x_max:316,ha:396,o:"m 79 97 q 88 151 79 129 q 113 187 97 173 q 151 206 129 200 q 198 213 173 213 q 243 206 221 213 q 280 187 264 200 q 306 151 297 173 q 316 97 316 129 q 306 45 316 66 q 280 9 297 23 q 243 -11 264 -5 q 198 -18 221 -18 q 151 -11 173 -18 q 113 9 129 -5 q 88 45 97 23 q 79 97 79 66 m 79 657 q 88 711 79 689 q 113 747 97 733 q 151 766 129 760 q 198 773 173 773 q 243 766 221 773 q 280 747 264 760 q 306 711 297 733 q 316 657 316 689 q 306 604 316 626 q 280 568 297 582 q 243 548 264 554 q 198 542 221 542 q 151 548 173 542 q 113 568 129 554 q 88 604 97 582 q 79 657 79 626 "},"ś":{x_min:66,x_max:614,ha:668,o:"m 614 225 q 592 120 614 165 q 530 45 570 75 q 433 0 490 15 q 305 -14 376 -14 q 236 -11 268 -14 q 176 -3 204 -9 q 121 9 147 1 q 67 30 94 17 l 67 201 q 127 176 95 187 q 189 156 158 164 q 249 143 220 148 q 304 139 279 139 q 351 144 331 139 q 383 158 370 149 q 401 179 395 167 q 407 205 407 191 q 402 230 407 219 q 382 254 398 242 q 337 283 367 267 q 256 322 307 299 q 171 366 207 344 q 112 415 135 388 q 77 477 88 442 q 66 561 66 512 q 86 653 66 614 q 144 720 106 693 q 234 759 181 746 q 351 773 286 773 q 480 757 419 773 q 605 710 541 741 l 543 564 q 445 604 492 588 q 352 619 398 619 q 291 604 310 619 q 272 563 272 589 q 277 539 272 550 q 296 518 282 529 q 336 493 310 506 q 403 461 362 480 q 490 419 451 440 q 556 372 528 398 q 599 310 584 345 q 614 225 614 275 m 232 842 l 232 860 q 262 905 246 879 q 294 958 278 931 q 324 1013 310 986 q 350 1064 339 1040 l 582 1064 l 582 1049 q 560 1021 574 1037 q 527 985 546 1004 q 488 946 509 966 q 446 907 467 926 q 404 871 424 888 q 369 842 385 854 l 232 842 "}," ":{x_min:0,x_max:0,ha:361},"У":{x_min:-.25,x_max:851.25,ha:851,o:"m 851 992 l 563 290 q 503 162 534 218 q 431 66 473 105 q 332 6 389 27 q 194 -14 275 -14 q 120 -8 159 -14 q 46 6 80 -3 l 46 185 q 118 166 79 171 q 194 160 158 160 q 253 169 229 160 q 294 195 277 178 q 322 232 311 211 q 343 279 334 254 l 0 992 l 222 992 l 409 563 q 420 538 414 553 q 431 509 426 524 q 441 482 437 495 q 446 465 446 470 l 454 465 q 458 483 455 471 q 465 510 461 496 q 473 538 469 524 q 482 562 478 552 l 634 992 l 851 992 "},"¾":{x_min:61,x_max:1161.203125,ha:1224,o:"m 977 992 l 426 0 l 264 0 l 815 992 l 977 992 m 1161 101 l 1076 101 l 1076 0 l 915 0 l 915 101 l 655 101 l 655 207 l 916 599 l 1076 599 l 1076 217 l 1161 217 l 1161 101 m 915 217 l 915 328 q 916 388 915 356 q 919 453 917 419 q 909 429 915 444 q 895 399 902 415 q 880 370 887 384 q 866 346 872 356 l 780 217 l 915 217 m 472 846 q 444 766 472 800 q 356 712 417 732 l 356 703 q 416 682 391 697 q 458 649 441 668 q 482 608 474 631 q 491 562 491 586 q 431 433 491 480 q 245 386 371 386 q 149 397 194 386 q 61 433 105 409 l 61 562 q 150 518 105 535 q 245 501 195 501 q 319 519 296 501 q 343 573 343 537 q 337 600 343 587 q 319 623 332 613 q 284 639 306 633 q 229 645 262 645 l 153 645 l 153 754 l 214 754 q 270 760 249 754 q 304 776 292 766 q 320 800 316 787 q 324 828 324 814 q 307 871 324 854 q 256 888 290 888 q 196 875 224 888 q 130 834 168 862 l 62 930 q 155 982 104 961 q 276 1004 206 1004 q 354 992 318 1004 q 416 961 390 981 q 457 911 442 940 q 472 846 472 882 "},"Ί":{x_min:-39,x_max:666.96875,ha:711,o:"m 666 0 l 215 0 l 215 119 l 336 174 l 336 817 l 215 872 l 215 992 l 666 992 l 666 872 l 546 817 l 546 174 l 666 119 l 666 0 m -39 789 q -26 835 -32 809 q -15 889 -20 861 q -5 943 -9 916 q 2 993 0 970 l 194 993 l 194 978 q 145 879 173 932 q 81 771 117 826 l -39 771 l -39 789 "},"ŉ":{x_min:16,x_max:937,ha:1040,o:"m 937 0 l 730 0 l 730 442 q 705 565 730 524 q 626 606 680 606 q 558 590 585 606 q 515 542 531 574 q 492 463 499 510 q 485 356 485 416 l 485 0 l 279 0 l 279 758 l 437 758 l 464 661 l 476 661 q 516 711 492 690 q 567 746 539 732 q 626 766 595 760 q 690 773 657 773 q 791 757 745 773 q 869 707 836 741 q 919 620 901 673 q 937 494 937 568 l 937 0 m 273 992 l 284 977 q 261 898 274 939 q 232 815 248 857 q 198 731 216 772 q 164 652 181 690 l 16 652 q 35 737 25 692 q 54 827 45 782 q 71 913 63 871 q 83 992 78 956 l 273 992 "},"Ģ":{x_min:81,x_max:895,ha:1006,o:"m 502 557 l 895 557 l 895 42 q 815 18 855 29 q 732 1 775 8 q 642 -9 689 -5 q 542 -14 595 -14 q 345 18 431 -14 q 200 116 259 51 q 111 276 142 181 q 81 497 81 372 q 114 708 81 613 q 214 868 148 802 q 377 970 281 934 q 599 1006 474 1006 q 754 989 678 1006 q 893 944 830 972 l 823 776 q 719 815 777 799 q 597 831 661 831 q 473 806 528 831 q 378 738 418 782 q 318 632 339 694 q 297 492 297 569 q 311 358 297 419 q 357 253 326 298 q 438 185 388 209 q 555 160 487 160 q 631 165 600 160 q 689 174 662 169 l 689 382 l 502 382 l 502 557 m 427 -288 q 439 -242 433 -268 q 450 -188 445 -216 q 461 -134 456 -161 q 468 -85 466 -107 l 660 -85 l 660 -98 q 611 -198 639 -145 q 547 -307 583 -251 l 427 -307 l 427 -288 "},m:{x_min:109,x_max:1204,ha:1308,o:"m 759 0 l 553 0 l 553 442 q 528 565 553 524 q 452 606 504 606 q 386 590 412 606 q 344 542 360 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 345 711 322 690 q 395 746 368 732 q 452 766 422 760 q 514 773 483 773 q 646 746 592 773 q 730 661 701 719 l 747 661 q 786 711 763 690 q 837 746 809 732 q 896 766 865 760 q 958 773 927 773 q 1142 706 1080 773 q 1204 494 1204 640 l 1204 0 l 997 0 l 997 442 q 972 565 997 524 q 896 606 948 606 q 791 548 822 606 q 759 380 759 489 l 759 0 "},"Е":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 "},"ž":{x_min:37,x_max:612,ha:635,o:"m 595 0 l 37 0 l 37 117 l 347 604 l 58 604 l 58 758 l 582 758 l 582 628 l 281 153 l 595 153 l 595 0 m 612 1045 q 572 1000 595 1026 q 528 947 550 974 q 486 892 506 919 q 451 842 466 865 l 210 842 q 174 892 195 865 q 132 947 154 919 q 89 1000 110 974 q 50 1045 67 1026 l 50 1064 l 187 1064 q 257 1011 222 1041 q 329 945 292 982 q 402 1011 364 982 q 474 1064 439 1041 l 612 1064 l 612 1045 "},"á":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 300 842 l 300 860 q 330 905 314 879 q 362 958 346 931 q 392 1013 378 986 q 418 1064 407 1040 l 650 1064 l 650 1049 q 628 1021 642 1037 q 595 985 614 1004 q 556 946 577 966 q 514 907 535 926 q 472 871 492 888 q 437 842 453 854 l 300 842 "},"×":{x_min:73.9375,x_max:691.796875,ha:765,o:"m 276 490 l 73 694 l 176 799 l 380 596 l 587 799 l 691 697 l 484 490 l 689 285 l 587 181 l 380 386 l 176 183 l 75 286 l 276 490 "},"п":{x_min:109,x_max:755,ha:864,o:"m 755 758 l 755 0 l 548 0 l 548 604 l 315 604 l 315 0 l 109 0 l 109 758 l 755 758 "},"Ǻ":{x_min:-.25,x_max:903.25,ha:903,o:"m 622 991 q 614 936 622 961 q 590 891 605 911 l 903 0 l 690 0 l 619 225 l 282 225 l 212 0 l 0 0 l 311 891 q 282 990 282 931 q 294 1058 282 1028 q 328 1108 306 1088 q 381 1140 350 1129 q 450 1152 413 1152 q 517 1140 486 1152 q 572 1108 548 1129 q 609 1058 595 1088 q 622 991 622 1029 m 574 400 l 510 596 q 498 631 506 606 q 480 687 489 657 q 463 747 471 717 q 451 798 455 777 q 444 767 449 785 q 434 728 440 748 q 422 687 428 708 q 411 648 416 666 q 401 616 405 630 q 394 596 396 602 l 331 400 l 574 400 m 368 1189 l 368 1199 q 398 1229 382 1213 q 431 1263 415 1246 q 461 1298 447 1281 q 486 1331 475 1316 l 718 1331 l 718 1322 q 681 1292 707 1310 q 624 1255 656 1275 q 561 1218 593 1236 q 505 1189 529 1201 l 368 1189 m 518 990 q 500 1038 518 1020 q 452 1055 481 1055 q 405 1038 424 1055 q 386 990 386 1020 q 401 943 386 961 q 445 925 415 926 l 458 925 q 501 943 484 926 q 518 990 518 961 "},K:{x_min:125,x_max:880.25,ha:880,o:"m 880 0 l 641 0 l 413 412 l 335 354 l 335 0 l 125 0 l 125 992 l 335 992 l 335 514 l 417 654 l 644 992 l 877 992 l 561 544 l 880 0 "},"¨":{x_min:168,x_max:633,ha:802,o:"m 168 953 q 175 994 168 977 q 195 1022 182 1011 q 225 1039 208 1034 q 262 1045 242 1045 q 299 1039 282 1045 q 329 1022 316 1034 q 350 994 342 1011 q 358 953 358 977 q 350 913 358 930 q 329 885 342 896 q 299 868 316 873 q 262 863 282 863 q 225 868 242 863 q 195 885 208 873 q 175 913 182 896 q 168 953 168 930 m 441 953 q 448 994 441 977 q 468 1022 455 1011 q 499 1039 481 1034 q 537 1045 516 1045 q 573 1039 556 1045 q 604 1022 590 1034 q 625 994 617 1011 q 633 953 633 977 q 625 913 633 930 q 604 885 617 896 q 573 868 590 873 q 537 863 556 863 q 468 885 496 863 q 441 953 441 907 "},Y:{x_min:-.25,x_max:812.25,ha:811,o:"m 406 583 l 585 992 l 812 992 l 511 385 l 511 0 l 301 0 l 301 379 l 0 992 l 227 992 l 406 583 "},E:{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 "},"Ô":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 m 662 1071 q 590 1123 627 1093 q 517 1189 552 1152 q 445 1123 480 1152 q 375 1071 410 1093 l 238 1071 l 238 1089 q 277 1134 255 1108 q 320 1187 298 1160 q 362 1242 342 1215 q 398 1293 383 1269 l 639 1293 q 674 1242 654 1269 q 716 1187 694 1215 q 760 1134 738 1160 q 800 1089 783 1108 l 800 1071 l 662 1071 "},"Є":{x_min:81,x_max:836.296875,ha:885,o:"m 543 831 q 450 814 492 831 q 376 766 408 797 q 324 689 344 735 q 298 586 304 644 l 676 586 l 676 411 l 297 411 q 367 225 304 290 q 544 160 429 160 q 666 174 604 160 q 799 213 727 188 l 799 36 q 734 13 766 23 q 669 -1 702 4 q 601 -10 636 -7 q 526 -14 566 -14 q 327 22 411 -14 q 188 125 243 59 q 107 285 133 192 q 81 494 81 379 q 111 700 81 606 q 201 862 142 794 q 346 968 260 930 q 546 1006 433 1006 q 694 987 620 1006 q 836 936 768 968 l 767 765 q 655 811 711 791 q 543 831 598 831 "},"Ï":{x_min:37,x_max:502,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 37 1182 q 44 1223 37 1206 q 64 1251 51 1240 q 94 1268 77 1263 q 131 1274 111 1274 q 168 1268 151 1274 q 198 1251 185 1263 q 219 1223 211 1240 q 227 1182 227 1206 q 219 1142 227 1159 q 198 1114 211 1125 q 168 1097 185 1102 q 131 1092 151 1092 q 94 1097 111 1092 q 64 1114 77 1102 q 44 1142 51 1125 q 37 1182 37 1159 m 310 1182 q 317 1223 310 1206 q 337 1251 324 1240 q 368 1268 350 1263 q 406 1274 385 1274 q 442 1268 425 1274 q 473 1251 459 1263 q 494 1223 486 1240 q 502 1182 502 1206 q 494 1142 502 1159 q 473 1114 486 1125 q 442 1097 459 1102 q 406 1092 425 1092 q 337 1114 365 1092 q 310 1182 310 1136 "},"ġ":{x_min:14,x_max:735.140625,ha:766,o:"m 735 757 l 735 644 l 624 610 q 643 562 638 587 q 649 509 649 537 q 630 403 649 451 q 576 322 612 356 q 486 269 540 288 q 360 251 432 251 q 326 252 345 251 q 299 256 308 254 q 279 232 286 244 q 271 201 271 219 q 280 179 271 187 q 303 165 289 170 q 336 158 317 160 q 375 157 355 157 l 493 157 q 591 144 547 157 q 664 106 634 131 q 710 40 694 80 q 727 -54 727 0 q 701 -170 727 -118 q 624 -258 675 -222 q 497 -314 573 -295 q 322 -334 421 -334 q 187 -319 244 -334 q 91 -277 129 -304 q 33 -211 52 -249 q 14 -123 14 -172 q 28 -51 14 -81 q 66 0 42 -20 q 120 36 90 22 q 182 57 150 49 q 154 74 168 63 q 129 99 140 85 q 111 131 118 113 q 104 167 104 148 q 110 206 104 189 q 128 239 116 224 q 159 268 141 254 q 200 296 177 282 q 105 379 140 322 q 71 513 71 436 q 89 622 71 574 q 145 704 108 670 q 236 755 182 737 q 360 773 290 773 q 391 771 374 773 q 424 767 408 769 q 455 762 441 764 q 477 757 469 759 l 735 757 m 193 -107 q 200 -141 193 -125 q 224 -169 207 -157 q 266 -189 240 -181 q 331 -196 293 -196 q 490 -166 437 -196 q 543 -85 543 -135 q 510 -27 543 -42 q 408 -13 477 -13 l 312 -13 q 273 -17 294 -13 q 234 -33 252 -22 q 205 -62 217 -44 q 193 -107 193 -80 m 265 510 q 289 415 265 448 q 360 381 312 381 q 432 415 410 381 q 454 510 454 448 q 432 607 454 571 q 360 643 410 643 q 265 510 265 643 m 251 954 q 259 1003 251 984 q 283 1034 268 1022 q 319 1051 299 1046 q 363 1056 340 1056 q 406 1051 386 1056 q 442 1034 427 1046 q 466 1003 457 1022 q 476 954 476 984 q 466 906 476 926 q 442 875 457 886 q 406 858 427 863 q 363 853 386 853 q 319 858 340 853 q 283 875 299 863 q 259 906 268 886 q 251 954 251 926 "},"έ":{x_min:53,x_max:677,ha:729,o:"m 531 464 l 531 316 l 432 316 q 299 292 340 316 q 259 221 259 267 q 268 187 259 202 q 297 161 277 172 q 348 145 317 150 q 424 139 379 139 q 498 144 462 139 q 566 159 533 150 q 626 180 598 168 q 676 203 654 191 l 676 38 q 557 0 627 14 q 400 -14 488 -14 q 242 1 308 -14 q 134 46 177 17 q 72 115 92 74 q 53 206 53 156 q 66 278 53 248 q 104 330 79 308 q 163 366 128 352 q 240 387 198 379 l 240 394 q 129 457 165 411 q 93 571 93 502 q 117 664 93 626 q 184 726 142 702 q 283 762 227 751 q 403 773 340 773 q 477 768 440 773 q 550 757 515 764 q 617 739 585 749 q 677 716 649 728 l 620 566 q 527 603 576 586 q 421 619 478 619 q 365 615 390 619 q 324 603 341 612 q 297 581 306 594 q 287 547 287 567 q 325 483 287 502 q 444 464 363 464 l 531 464 m 323 860 q 335 906 329 880 q 346 960 341 932 q 357 1014 352 987 q 364 1064 361 1041 l 556 1064 l 556 1049 q 507 950 535 1003 q 443 842 479 897 l 323 842 l 323 860 "}," ":{x_min:0,x_max:0,ha:463},"ϋ":{x_min:97,x_max:780,ha:861,o:"m 426 -12 q 266 15 330 -12 q 165 91 202 42 q 112 205 127 139 q 97 345 97 270 l 97 758 l 303 758 l 303 340 q 335 197 303 241 q 432 154 366 154 q 493 168 467 154 q 537 213 520 182 q 564 295 555 244 q 573 417 573 345 q 569 503 573 461 q 559 586 566 545 q 544 670 553 628 q 524 758 535 712 l 732 758 q 752 670 744 712 q 767 587 761 629 q 776 502 773 545 q 780 410 780 459 q 757 221 780 301 q 689 90 734 141 q 579 13 645 38 q 426 -12 513 -12 m 199 953 q 206 994 199 977 q 226 1022 213 1011 q 256 1039 239 1034 q 293 1045 273 1045 q 330 1039 313 1045 q 360 1022 347 1034 q 381 994 373 1011 q 389 953 389 977 q 381 913 389 930 q 360 885 373 896 q 330 868 347 873 q 293 863 313 863 q 256 868 273 863 q 226 885 239 873 q 206 913 213 896 q 199 953 199 930 m 472 953 q 479 994 472 977 q 499 1022 486 1011 q 530 1039 512 1034 q 568 1045 547 1045 q 604 1039 587 1045 q 635 1022 621 1034 q 656 994 648 1011 q 664 953 664 977 q 656 913 664 930 q 635 885 648 896 q 604 868 621 873 q 568 863 587 863 q 499 885 527 863 q 472 953 472 907 "},"й":{x_min:109,x_max:849,ha:958,o:"m 303 758 l 303 463 q 301 401 303 440 q 296 324 299 362 q 288 231 292 280 l 606 758 l 849 758 l 849 0 l 654 0 l 654 296 q 656 364 654 325 q 661 438 659 402 q 668 524 664 480 l 351 0 l 109 0 l 109 758 l 303 758 m 806 1085 q 781 985 800 1030 q 722 909 761 941 q 622 859 684 877 q 471 842 561 842 q 319 858 379 842 q 221 907 258 875 q 168 983 185 939 q 148 1085 152 1028 l 334 1085 q 347 1020 337 1045 q 373 981 356 995 q 415 961 389 967 q 477 955 441 955 q 531 962 506 955 q 574 983 556 968 q 603 1023 592 998 q 619 1085 615 1048 l 806 1085 "},b:{x_min:109,x_max:775,ha:844,o:"m 512 773 q 619 747 571 773 q 701 673 667 722 q 755 550 736 623 q 775 380 775 476 q 755 209 775 282 q 701 85 736 135 q 616 11 665 36 q 507 -14 567 -14 q 440 -5 469 -14 q 387 15 410 2 q 347 46 364 29 q 315 82 330 64 l 301 82 l 267 0 l 109 0 l 109 1055 l 315 1055 l 315 809 q 314 761 315 787 q 311 712 313 734 q 307 659 309 686 l 315 659 q 348 704 330 683 q 390 739 366 724 q 445 764 414 755 q 512 773 475 773 m 443 606 q 384 594 408 606 q 345 556 360 581 q 323 492 330 531 q 315 403 317 454 l 315 380 q 322 282 315 325 q 343 211 328 239 q 383 167 358 182 q 444 152 407 152 q 534 211 505 152 q 563 382 563 269 q 534 550 563 494 q 443 606 505 606 "},"ύ":{x_min:97,x_max:780,ha:861,o:"m 426 -12 q 266 15 330 -12 q 165 91 202 42 q 112 205 127 139 q 97 345 97 270 l 97 758 l 303 758 l 303 340 q 335 197 303 241 q 432 154 366 154 q 493 168 467 154 q 537 213 520 182 q 564 295 555 244 q 573 417 573 345 q 569 503 573 461 q 559 586 566 545 q 544 670 553 628 q 524 758 535 712 l 732 758 q 752 670 744 712 q 767 587 761 629 q 776 502 773 545 q 780 410 780 459 q 757 221 780 301 q 689 90 734 141 q 579 13 645 38 q 426 -12 513 -12 m 354 860 q 366 906 360 880 q 377 960 372 932 q 388 1014 383 987 q 395 1064 392 1041 l 587 1064 l 587 1049 q 538 950 566 1003 q 474 842 510 897 l 354 842 l 354 860 "},"ﬂ":{x_min:28,x_max:853.859375,ha:961,o:"m 503 604 l 348 604 l 348 0 l 142 0 l 142 604 l 28 604 l 28 703 l 142 758 l 142 813 q 159 934 142 886 q 209 1010 177 982 q 288 1051 242 1039 q 392 1063 334 1063 q 497 1053 454 1063 q 570 1030 540 1043 l 521 877 q 477 890 500 884 q 422 896 454 896 q 365 871 382 896 q 348 804 348 845 l 348 758 l 503 758 l 503 604 m 853 0 l 647 0 l 647 1055 l 853 1055 l 853 0 "},"ф":{x_min:69,x_max:1034,ha:1103,o:"m 651 762 q 815 722 744 753 q 935 641 887 691 q 1009 525 984 591 q 1034 379 1034 458 q 1010 232 1034 299 q 938 115 986 165 q 818 34 890 66 q 651 -5 747 3 l 651 -334 l 457 -334 l 457 -5 q 291 35 364 3 q 170 116 219 66 q 94 233 120 167 q 69 379 69 299 q 92 527 69 460 q 163 645 115 595 q 284 725 211 694 q 457 762 357 755 l 457 1055 l 651 1055 l 651 762 m 280 378 q 292 292 280 331 q 327 222 304 252 q 382 173 349 192 q 457 148 415 154 l 457 608 q 383 582 415 602 q 327 532 350 562 q 292 463 305 502 q 280 378 280 424 m 822 378 q 810 463 822 424 q 776 532 798 502 q 722 580 754 562 q 651 606 691 599 l 651 148 q 724 173 692 154 q 777 222 755 192 q 810 292 799 252 q 822 378 822 331 "},"Ŋ":{x_min:113,x_max:950,ha:1063,o:"m 634 -292 q 557 -287 590 -292 q 501 -277 524 -283 l 501 -103 q 553 -112 526 -108 q 614 -117 581 -117 q 670 -111 643 -117 q 719 -92 697 -106 q 756 -55 741 -78 q 775 2 771 -32 l 293 750 l 287 750 q 294 646 291 698 q 298 554 296 602 q 300 466 300 505 l 300 0 l 113 0 l 113 992 l 378 992 l 768 387 l 772 387 q 768 489 770 439 q 766 534 767 511 q 764 579 765 556 q 763 623 763 602 q 762 661 762 644 l 762 992 l 950 992 l 950 0 q 926 -130 950 -75 q 862 -221 903 -186 q 763 -274 821 -257 q 634 -292 705 -292 "},"Ũ":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 382 1135 q 348 1119 361 1135 q 328 1069 336 1103 l 227 1069 q 244 1163 231 1123 q 280 1228 258 1202 q 332 1266 302 1253 q 397 1279 361 1279 q 451 1269 425 1279 q 504 1246 478 1259 q 555 1224 530 1234 q 605 1214 581 1214 q 638 1230 626 1214 q 659 1280 651 1246 l 761 1280 q 743 1187 756 1226 q 706 1122 729 1148 q 654 1083 684 1096 q 590 1071 625 1071 q 536 1081 563 1071 q 483 1103 508 1091 q 432 1125 457 1115 q 382 1135 406 1135 "},"Щ":{x_min:125,x_max:1464,ha:1492,o:"m 825 174 l 1106 174 l 1106 992 l 1317 992 l 1317 166 l 1464 147 l 1464 -289 l 1258 -289 l 1258 0 l 125 0 l 125 992 l 335 992 l 335 174 l 615 174 l 615 992 l 825 992 l 825 174 "},L:{x_min:125,x_max:696,ha:743,o:"m 125 0 l 125 992 l 335 992 l 335 174 l 696 174 l 696 0 l 125 0 "},"ď":{x_min:69,x_max:1031,ha:844,o:"m 329 -14 q 224 11 271 -14 q 141 85 176 36 q 88 208 107 134 q 69 377 69 281 q 88 549 69 475 q 142 672 107 622 q 227 747 178 722 q 335 773 276 773 q 402 764 372 773 q 457 741 433 756 q 500 706 481 726 q 534 663 520 687 l 541 663 q 534 716 537 690 q 528 765 530 739 q 526 813 526 791 l 526 1055 l 735 1055 l 735 0 l 575 0 l 534 99 l 526 99 q 493 54 512 75 q 451 18 475 34 q 397 -5 427 3 q 329 -14 367 -14 m 406 152 q 467 164 442 152 q 508 202 492 177 q 531 266 524 228 q 540 355 539 304 l 540 378 q 533 476 540 433 q 511 547 526 519 q 470 591 496 576 q 404 606 444 606 q 310 547 340 606 q 280 376 280 489 q 310 208 280 264 q 406 152 341 152 m 798 851 q 810 898 804 872 q 821 951 816 924 q 832 1006 827 979 q 839 1056 837 1033 l 1031 1056 l 1031 1042 q 982 942 1010 996 q 918 834 954 888 l 798 834 l 798 851 "},"Ο":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 "},"Ĭ":{x_min:22,x_max:514,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 514 1300 q 492 1207 510 1249 q 444 1135 475 1165 q 368 1087 412 1104 q 265 1071 323 1071 q 161 1087 205 1071 q 86 1133 116 1103 q 40 1205 56 1163 q 22 1300 24 1247 l 137 1300 q 149 1253 140 1270 q 175 1227 159 1236 q 214 1216 191 1218 q 266 1214 237 1214 q 313 1217 291 1214 q 352 1229 335 1220 q 381 1255 370 1238 q 395 1300 393 1272 l 514 1300 "},"ŧ":{x_min:32,x_max:530,ha:575,o:"m 416 152 q 474 158 446 152 q 530 175 501 165 l 530 20 q 457 -4 500 5 q 364 -14 414 -14 q 271 -2 314 -14 q 198 37 229 8 q 148 114 166 66 q 131 234 131 162 l 131 334 l 44 334 l 44 472 l 131 472 l 131 604 l 32 604 l 32 692 l 145 759 l 205 924 l 337 924 l 337 758 l 521 758 l 521 604 l 337 604 l 337 472 l 498 472 l 498 334 l 337 334 l 337 236 q 359 172 337 193 q 416 152 381 152 "},"À":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 429 1071 q 374 1118 406 1089 q 310 1175 341 1146 q 253 1233 279 1205 q 217 1278 227 1260 l 217 1293 l 448 1293 q 474 1242 459 1269 q 504 1187 488 1215 q 536 1134 520 1160 q 567 1089 552 1108 l 567 1071 l 429 1071 "},"Ϊ":{x_min:37,x_max:502,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 37 1182 q 44 1223 37 1206 q 64 1251 51 1240 q 94 1268 77 1263 q 131 1274 111 1274 q 168 1268 151 1274 q 198 1251 185 1263 q 219 1223 211 1240 q 227 1182 227 1206 q 219 1142 227 1159 q 198 1114 211 1125 q 168 1097 185 1102 q 131 1092 151 1092 q 94 1097 111 1092 q 64 1114 77 1102 q 44 1142 51 1125 q 37 1182 37 1159 m 310 1182 q 317 1223 310 1206 q 337 1251 324 1240 q 368 1268 350 1263 q 406 1274 385 1274 q 442 1268 425 1274 q 473 1251 459 1263 q 494 1223 486 1240 q 502 1182 502 1206 q 494 1142 502 1159 q 473 1114 486 1125 q 442 1097 459 1102 q 406 1092 425 1092 q 337 1114 365 1092 q 310 1182 310 1136 "},"ḁ":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 563 -244 q 549 -312 563 -282 q 513 -363 536 -342 q 458 -395 489 -384 q 390 -407 427 -407 q 322 -395 353 -407 q 269 -363 291 -384 q 235 -313 247 -343 q 223 -245 223 -283 q 235 -178 223 -208 q 269 -128 247 -148 q 322 -96 291 -107 q 390 -85 353 -85 q 458 -96 426 -85 q 512 -128 489 -107 q 549 -178 535 -148 q 563 -244 563 -207 m 457 -245 q 439 -197 457 -215 q 393 -180 421 -180 q 346 -197 364 -180 q 328 -245 328 -215 q 344 -293 328 -276 q 393 -311 360 -311 q 439 -293 421 -311 q 457 -245 457 -276 "},"½":{x_min:32,x_max:1164.28125,ha:1224,o:"m 929 992 l 378 0 l 216 0 l 767 992 l 929 992 m 365 397 l 204 397 l 204 700 q 204 734 204 713 q 205 776 204 755 q 207 814 206 797 q 209 840 208 832 q 198 828 205 835 q 185 813 192 820 q 171 799 178 805 q 158 787 164 792 l 105 746 l 32 832 l 235 992 l 365 992 l 365 397 m 1164 0 l 725 0 l 725 111 l 877 260 q 930 313 909 290 q 963 354 951 335 q 981 388 976 372 q 986 422 986 404 q 970 462 986 448 q 926 476 953 476 q 869 462 899 476 q 803 418 839 449 l 719 521 q 818 584 763 560 q 947 609 873 609 q 1029 597 992 609 q 1092 564 1066 586 q 1133 511 1118 543 q 1148 438 1148 479 q 1139 379 1148 406 q 1112 323 1131 351 q 1065 265 1094 295 q 996 197 1037 234 l 925 132 l 1164 132 l 1164 0 "},"'":{x_min:90,x_max:279.21875,ha:370,o:"m 279 992 l 251 634 l 117 634 l 90 992 l 279 992 "},"ĳ":{x_min:100.1875,x_max:721.5,ha:821,o:"m 100 953 q 109 1002 100 983 q 133 1033 117 1021 q 169 1050 148 1045 q 212 1055 189 1055 q 256 1050 235 1055 q 291 1033 276 1045 q 316 1002 307 1021 q 325 953 325 983 q 316 905 325 925 q 291 874 307 885 q 256 857 276 862 q 212 852 235 852 q 169 857 189 852 q 133 874 148 862 q 109 905 117 885 q 100 953 100 925 m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 465 -334 q 398 -329 433 -334 q 341 -317 364 -324 l 341 -154 q 380 -164 362 -161 q 421 -167 398 -167 q 453 -162 438 -167 q 480 -144 469 -157 q 498 -109 491 -131 q 505 -52 505 -87 l 505 758 l 712 758 l 712 -82 q 698 -180 712 -134 q 656 -260 685 -226 q 579 -314 626 -294 q 465 -334 532 -334 m 496 953 q 505 1002 496 983 q 529 1033 513 1021 q 565 1050 544 1045 q 608 1055 585 1055 q 652 1050 631 1055 q 687 1033 672 1045 q 712 1002 703 1021 q 721 953 721 983 q 712 905 721 925 q 687 874 703 885 q 652 857 672 862 q 608 852 631 852 q 565 857 585 852 q 529 874 544 862 q 505 905 513 885 q 496 953 496 925 "},"Р":{x_min:125,x_max:769,ha:831,o:"m 335 526 l 377 526 q 513 561 467 526 q 558 674 558 596 q 517 782 558 747 q 389 817 476 817 l 335 817 l 335 526 m 769 682 q 749 557 769 616 q 684 451 729 497 q 565 379 639 406 q 383 352 492 352 l 335 352 l 335 0 l 125 0 l 125 992 l 400 992 q 565 970 496 992 q 680 909 635 949 q 747 812 725 869 q 769 682 769 754 "},"˛":{x_min:7,x_max:282,ha:286,o:"m 150 -154 q 165 -196 150 -182 q 204 -209 180 -209 q 247 -205 225 -209 q 282 -197 268 -201 l 282 -318 q 235 -329 260 -324 q 176 -334 210 -334 q 105 -322 137 -334 q 52 -290 74 -310 q 18 -241 30 -269 q 7 -177 7 -212 q 16 -124 7 -148 q 42 -78 25 -99 q 81 -38 59 -57 q 129 0 103 -19 l 250 0 q 176 -81 203 -44 q 150 -154 150 -118 "},"Ć":{x_min:81,x_max:836.296875,ha:885,o:"m 546 831 q 439 807 485 831 q 361 740 392 784 q 313 633 329 696 q 297 492 297 571 q 311 351 297 413 q 356 247 326 289 q 433 183 386 205 q 546 160 481 160 q 667 174 606 160 q 799 213 727 188 l 799 36 q 734 13 766 23 q 669 -1 702 4 q 601 -10 636 -7 q 526 -14 566 -14 q 327 22 411 -14 q 188 125 243 59 q 107 285 133 192 q 81 494 81 379 q 111 700 81 606 q 201 862 142 794 q 346 968 260 930 q 546 1006 433 1006 q 694 987 620 1006 q 836 936 768 968 l 768 765 q 656 811 712 791 q 546 831 600 831 m 434 1071 l 434 1089 q 464 1134 448 1108 q 496 1187 480 1160 q 526 1242 512 1215 q 552 1293 541 1269 l 784 1293 l 784 1278 q 762 1250 776 1266 q 729 1214 748 1233 q 690 1175 711 1195 q 648 1136 669 1155 q 606 1100 626 1117 q 571 1071 587 1083 l 434 1071 "},"Т":{x_min:28,x_max:735,ha:762,o:"m 487 0 l 277 0 l 277 817 l 28 817 l 28 992 l 735 992 l 735 817 l 487 817 l 487 0 "},"£":{x_min:56,x_max:739,ha:765,o:"m 461 1006 q 596 989 535 1006 q 711 950 656 973 l 649 794 q 563 824 602 813 q 482 836 524 836 q 413 810 438 836 q 388 719 388 784 l 388 589 l 608 589 l 608 441 l 388 441 l 388 344 q 379 279 388 306 q 355 231 369 251 q 322 198 340 211 q 285 174 304 184 l 739 174 l 739 0 l 56 0 l 56 166 q 107 193 84 179 q 145 227 129 207 q 169 275 161 247 q 178 342 178 303 l 178 441 l 57 441 l 57 589 l 178 589 l 178 721 q 199 852 178 798 q 258 940 220 906 q 347 990 295 974 q 461 1006 399 1006 "},"ů":{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 604 1002 q 590 934 604 964 q 554 883 577 904 q 499 851 530 862 q 431 840 468 840 q 363 851 394 840 q 310 883 332 862 q 276 933 288 903 q 264 1001 264 964 q 276 1068 264 1038 q 310 1118 288 1098 q 363 1150 332 1139 q 431 1162 394 1162 q 499 1150 467 1162 q 553 1118 530 1139 q 590 1068 576 1098 q 604 1002 604 1039 m 498 1001 q 480 1049 498 1031 q 434 1066 462 1066 q 387 1049 405 1066 q 369 1001 369 1031 q 385 953 369 970 q 434 935 401 935 q 480 953 462 935 q 498 1001 498 970 "},"Ō":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 m 316 1214 l 734 1214 l 734 1071 l 316 1071 l 316 1214 "},"а":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 "},"Ğ":{x_min:81,x_max:895,ha:1006,o:"m 502 557 l 895 557 l 895 42 q 815 18 855 29 q 732 1 775 8 q 642 -9 689 -5 q 542 -14 595 -14 q 345 18 431 -14 q 200 116 259 51 q 111 276 142 181 q 81 497 81 372 q 114 708 81 613 q 214 868 148 802 q 377 970 281 934 q 599 1006 474 1006 q 754 989 678 1006 q 893 944 830 972 l 823 776 q 719 815 777 799 q 597 831 661 831 q 473 806 528 831 q 378 738 418 782 q 318 632 339 694 q 297 492 297 569 q 311 358 297 419 q 357 253 326 298 q 438 185 388 209 q 555 160 487 160 q 631 165 600 160 q 689 174 662 169 l 689 382 l 502 382 l 502 557 m 782 1300 q 760 1207 778 1249 q 712 1135 743 1165 q 636 1087 680 1104 q 533 1071 591 1071 q 429 1087 473 1071 q 354 1133 384 1103 q 308 1205 324 1163 q 290 1300 292 1247 l 405 1300 q 417 1253 408 1270 q 443 1227 427 1236 q 482 1216 459 1218 q 534 1214 505 1214 q 581 1217 559 1214 q 620 1229 603 1220 q 649 1255 638 1238 q 663 1300 661 1272 l 782 1300 "},v:{x_min:-.25,x_max:749.25,ha:749,o:"m 268 0 l 0 758 l 216 758 l 341 326 q 361 245 353 287 q 372 170 370 204 l 376 170 q 387 247 378 206 q 407 326 395 287 l 532 758 l 749 758 l 480 0 l 268 0 "},"Ї":{x_min:37,x_max:502,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 37 1182 q 44 1223 37 1206 q 64 1251 51 1240 q 94 1268 77 1263 q 131 1274 111 1274 q 168 1268 151 1274 q 198 1251 185 1263 q 219 1223 211 1240 q 227 1182 227 1206 q 219 1142 227 1159 q 198 1114 211 1125 q 168 1097 185 1102 q 131 1092 151 1092 q 94 1097 111 1092 q 64 1114 77 1102 q 44 1142 51 1125 q 37 1182 37 1159 m 310 1182 q 317 1223 310 1206 q 337 1251 324 1240 q 368 1268 350 1263 q 406 1274 385 1274 q 442 1268 425 1274 q 473 1251 459 1263 q 494 1223 486 1240 q 502 1182 502 1206 q 494 1142 502 1159 q 473 1114 486 1125 q 442 1097 459 1102 q 406 1092 425 1092 q 337 1114 365 1092 q 310 1182 310 1136 "},"û":{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 571 842 q 499 894 536 864 q 426 960 461 923 q 354 894 389 923 q 284 842 319 864 l 147 842 l 147 860 q 186 905 164 879 q 229 958 207 931 q 271 1013 251 986 q 307 1064 292 1040 l 548 1064 q 583 1013 563 1040 q 625 958 603 986 q 669 905 647 931 q 709 860 692 879 l 709 842 l 571 842 "},"Ź":{x_min:33,x_max:716,ha:749,o:"m 716 0 l 33 0 l 33 137 l 453 817 l 45 817 l 45 992 l 703 992 l 703 855 l 283 174 l 716 174 l 716 0 m 264 1071 l 264 1089 q 294 1134 278 1108 q 326 1187 310 1160 q 356 1242 342 1215 q 382 1293 371 1269 l 614 1293 l 614 1278 q 592 1250 606 1266 q 559 1214 578 1233 q 520 1175 541 1195 q 478 1136 499 1155 q 436 1100 456 1117 q 401 1071 417 1083 l 264 1071 "},"ˉ":{x_min:178,x_max:596,ha:774,o:"m 178 985 l 596 985 l 596 842 l 178 842 l 178 985 "},"Ĺ":{x_min:125,x_max:696,ha:743,o:"m 125 0 l 125 992 l 335 992 l 335 174 l 696 174 l 696 0 l 125 0 m 182 1071 l 182 1089 q 212 1134 196 1108 q 244 1187 228 1160 q 274 1242 260 1215 q 300 1293 289 1269 l 532 1293 l 532 1278 q 510 1250 524 1266 q 477 1214 496 1233 q 438 1175 459 1195 q 396 1136 417 1155 q 354 1100 374 1117 q 319 1071 335 1083 l 182 1071 "},"₤":{x_min:56,x_max:739,ha:765,o:"m 461 1006 q 596 989 535 1006 q 711 950 656 973 l 649 794 q 563 824 602 813 q 483 836 525 836 q 414 810 439 836 q 389 720 389 784 l 389 644 l 597 644 l 597 523 l 389 523 l 389 447 l 597 447 l 597 326 l 388 326 q 376 269 386 293 q 352 227 367 245 q 321 197 338 210 q 287 176 304 185 l 739 176 l 739 0 l 56 0 l 56 168 q 104 192 83 179 q 142 223 126 205 q 166 266 157 242 q 178 326 175 291 l 57 326 l 57 447 l 178 447 l 178 523 l 57 523 l 57 644 l 178 644 l 178 722 q 199 852 178 798 q 258 940 220 906 q 347 990 295 974 q 461 1006 399 1006 "},"Č":{x_min:81,x_max:836.296875,ha:885,o:"m 546 831 q 439 807 485 831 q 361 740 392 784 q 313 633 329 696 q 297 492 297 571 q 311 351 297 413 q 356 247 326 289 q 433 183 386 205 q 546 160 481 160 q 667 174 606 160 q 799 213 727 188 l 799 36 q 734 13 766 23 q 669 -1 702 4 q 601 -10 636 -7 q 526 -14 566 -14 q 327 22 411 -14 q 188 125 243 59 q 107 285 133 192 q 81 494 81 379 q 111 700 81 606 q 201 862 142 794 q 346 968 260 930 q 546 1006 433 1006 q 694 987 620 1006 q 836 936 768 968 l 768 765 q 656 811 712 791 q 546 831 600 831 m 808 1274 q 768 1229 791 1255 q 724 1176 746 1203 q 682 1121 702 1148 q 647 1071 662 1094 l 406 1071 q 370 1121 391 1094 q 328 1176 350 1148 q 285 1229 306 1203 q 246 1274 263 1255 l 246 1293 l 383 1293 q 453 1240 418 1270 q 525 1174 488 1211 q 598 1240 560 1211 q 670 1293 635 1270 l 808 1293 l 808 1274 "},x:{x_min:6.75,x_max:754.25,ha:761,o:"m 263 387 l 19 758 l 254 758 l 380 530 l 508 758 l 743 758 l 495 387 l 754 0 l 519 0 l 380 245 l 241 0 l 6 0 l 263 387 "},"è":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 392 842 q 337 889 369 860 q 273 946 304 917 q 216 1004 242 976 q 180 1049 190 1031 l 180 1064 l 411 1064 q 437 1013 422 1040 q 467 958 451 986 q 499 905 483 931 q 530 860 515 879 l 530 842 l 392 842 "},"Ń":{x_min:125,x_max:963,ha:1088,o:"m 963 0 l 697 0 l 305 750 l 299 750 q 306 646 303 698 q 310 554 308 602 q 312 466 312 505 l 312 0 l 125 0 l 125 992 l 389 992 l 781 248 l 785 248 q 780 350 783 300 q 778 395 779 372 q 777 440 777 417 q 776 484 776 463 q 775 522 775 505 l 775 992 l 963 992 l 963 0 m 417 1071 l 417 1089 q 447 1134 431 1108 q 479 1187 463 1160 q 509 1242 495 1215 q 535 1293 524 1269 l 767 1293 l 767 1278 q 745 1250 759 1266 q 712 1214 731 1233 q 673 1175 694 1195 q 631 1136 652 1155 q 589 1100 609 1117 q 554 1071 570 1083 l 417 1071 "},"ḿ":{x_min:109,x_max:1204,ha:1308,o:"m 759 0 l 553 0 l 553 442 q 528 565 553 524 q 452 606 504 606 q 386 590 412 606 q 344 542 360 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 345 711 322 690 q 395 746 368 732 q 452 766 422 760 q 514 773 483 773 q 646 746 592 773 q 730 661 701 719 l 747 661 q 786 711 763 690 q 837 746 809 732 q 896 766 865 760 q 958 773 927 773 q 1142 706 1080 773 q 1204 494 1204 640 l 1204 0 l 997 0 l 997 442 q 972 565 997 524 q 896 606 948 606 q 791 548 822 606 q 759 380 759 489 l 759 0 m 546 842 l 546 860 q 576 905 560 879 q 608 958 592 931 q 638 1013 624 986 q 664 1064 653 1040 l 896 1064 l 896 1049 q 874 1021 888 1037 q 841 985 860 1004 q 802 946 823 966 q 760 907 781 926 q 718 871 738 888 q 683 842 699 854 l 546 842 "},"μ":{x_min:109,x_max:766,ha:875,o:"m 315 315 q 341 193 315 234 q 421 152 366 152 q 486 168 460 152 q 529 216 513 184 q 552 295 545 248 q 559 401 559 341 l 559 758 l 766 758 l 766 0 l 607 0 l 578 102 l 570 102 q 511 15 547 44 q 425 -14 476 -14 q 358 1 388 -14 q 309 47 328 17 q 312 -10 310 18 q 314 -64 313 -35 q 315 -117 315 -92 l 315 -334 l 109 -334 l 109 758 l 315 758 l 315 315 "},".":{x_min:79,x_max:316,ha:396,o:"m 79 97 q 88 151 79 129 q 113 187 97 173 q 151 206 129 200 q 198 213 173 213 q 243 206 221 213 q 280 187 264 200 q 306 151 297 173 q 316 97 316 129 q 306 45 316 66 q 280 9 297 23 q 243 -11 264 -5 q 198 -18 221 -18 q 151 -11 173 -18 q 113 9 129 -5 q 88 45 97 23 q 79 97 79 66 "},"‘":{x_min:16,x_max:284,ha:298,o:"m 25 652 l 16 666 q 38 744 25 703 q 67 828 51 786 q 100 912 83 870 q 135 992 118 954 l 284 992 q 263 905 273 950 q 244 816 254 861 q 228 730 235 772 q 215 652 220 687 l 25 652 "},"π":{x_min:17,x_max:936,ha:985,o:"m 840 148 q 886 154 864 148 q 928 171 908 160 l 928 23 q 899 9 915 15 q 862 -2 882 2 q 821 -10 842 -7 q 778 -14 799 -14 q 691 -1 730 -14 q 625 38 652 11 q 584 108 599 65 q 570 209 570 150 l 570 604 l 381 604 l 381 0 l 175 0 l 175 604 l 17 604 l 17 690 l 137 758 l 936 758 l 936 604 l 776 604 l 776 216 q 795 164 776 181 q 840 148 813 148 "},l:{x_min:109,x_max:315.859375,ha:424,o:"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 "},"Ъ":{x_min:28,x_max:920,ha:982,o:"m 920 310 q 897 179 920 237 q 829 81 875 121 q 711 21 782 42 q 542 0 640 0 l 277 0 l 277 817 l 28 817 l 28 992 l 487 992 l 487 613 l 560 613 q 720 590 653 613 q 832 527 788 568 q 898 432 877 487 q 920 310 920 376 m 487 174 l 544 174 q 613 182 583 174 q 665 205 644 189 q 698 247 687 221 q 709 310 709 273 q 697 374 709 349 q 661 413 685 399 q 605 432 638 427 q 530 438 572 438 l 487 438 l 487 174 "}," ":{x_min:0,x_max:0,ha:139},"Ś":{x_min:63.46875,x_max:668,ha:728,o:"m 668 275 q 645 155 668 208 q 578 64 622 102 q 471 6 535 26 q 326 -14 408 -14 q 187 0 254 -14 q 63 45 120 15 l 63 241 q 129 211 96 225 q 196 185 162 197 q 265 167 231 174 q 333 160 299 160 q 392 168 368 160 q 432 190 417 176 q 455 223 448 203 q 462 264 462 242 q 450 314 462 292 q 417 354 438 335 q 365 390 396 372 q 298 427 335 408 q 228 467 267 444 q 155 524 189 490 q 98 607 121 558 q 75 723 75 655 q 97 842 75 790 q 159 931 119 895 q 258 987 200 968 q 388 1006 316 1006 q 458 1001 424 1006 q 526 987 492 996 q 594 965 560 978 q 663 936 627 953 l 596 772 q 539 797 565 786 q 487 816 512 808 q 438 827 462 823 q 389 831 414 831 q 308 802 336 831 q 280 727 280 774 q 288 683 280 702 q 316 646 297 663 q 364 612 334 630 q 435 572 393 594 q 529 517 486 545 q 603 454 572 488 q 651 376 634 420 q 668 275 668 333 m 278 1071 l 278 1089 q 308 1134 292 1108 q 340 1187 324 1160 q 370 1242 356 1215 q 396 1293 385 1269 l 628 1293 l 628 1278 q 606 1250 620 1266 q 573 1214 592 1233 q 534 1175 555 1195 q 492 1136 513 1155 q 450 1100 470 1117 q 415 1071 431 1083 l 278 1071 "},"Ü":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 267 1182 q 274 1223 267 1206 q 294 1251 281 1240 q 324 1268 307 1263 q 361 1274 341 1274 q 398 1268 381 1274 q 428 1251 415 1263 q 449 1223 441 1240 q 457 1182 457 1206 q 449 1142 457 1159 q 428 1114 441 1125 q 398 1097 415 1102 q 361 1092 381 1092 q 324 1097 341 1092 q 294 1114 307 1102 q 274 1142 281 1125 q 267 1182 267 1159 m 540 1182 q 547 1223 540 1206 q 567 1251 554 1240 q 598 1268 580 1263 q 636 1274 615 1274 q 672 1268 655 1274 q 703 1251 689 1263 q 724 1223 716 1240 q 732 1182 732 1206 q 724 1142 732 1159 q 703 1114 716 1125 q 672 1097 689 1102 q 636 1092 655 1092 q 567 1114 595 1092 q 540 1182 540 1136 "},"à":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 375 842 q 320 889 352 860 q 256 946 287 917 q 199 1004 225 976 q 163 1049 173 1031 l 163 1064 l 394 1064 q 420 1013 405 1040 q 450 958 434 986 q 482 905 466 931 q 513 860 498 879 l 513 842 l 375 842 "},"η":{x_min:109,x_max:767,ha:871,o:"m 560 -334 l 560 438 q 534 564 560 522 q 454 606 509 606 q 388 590 415 606 q 345 542 362 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 345 710 322 689 q 395 745 368 732 q 452 766 422 759 q 515 773 483 773 q 704 702 642 773 q 767 487 767 632 l 767 -334 l 560 -334 "},"ó":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 m 294 842 l 294 860 q 324 905 308 879 q 356 958 340 931 q 386 1013 372 986 q 412 1064 401 1040 l 644 1064 l 644 1049 q 622 1021 636 1037 q 589 985 608 1004 q 550 946 571 966 q 508 907 529 926 q 466 871 486 888 q 431 842 447 854 l 294 842 "},"¦":{x_min:309,x_max:457.53125,ha:765,o:"m 309 1051 l 457 1051 l 457 499 l 309 499 l 309 1051 m 309 238 l 457 238 l 457 -315 l 309 -315 l 309 238 "},"Ő":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 m 310 1071 l 310 1089 q 340 1134 324 1108 q 372 1187 356 1160 q 402 1242 388 1215 q 427 1293 417 1269 l 632 1293 l 632 1278 q 610 1250 624 1266 q 577 1214 596 1233 q 538 1175 559 1195 q 495 1136 516 1155 q 454 1100 474 1117 q 419 1071 434 1083 l 310 1071 m 579 1071 l 579 1089 q 609 1134 593 1108 q 641 1187 625 1160 q 671 1242 657 1215 q 696 1293 686 1269 l 901 1293 l 901 1278 q 879 1250 893 1266 q 846 1214 865 1233 q 807 1175 828 1195 q 765 1136 786 1155 q 724 1100 743 1117 q 688 1071 704 1083 l 579 1071 "},"Ž":{x_min:33,x_max:716,ha:749,o:"m 716 0 l 33 0 l 33 137 l 453 817 l 45 817 l 45 992 l 703 992 l 703 855 l 283 174 l 716 174 l 716 0 m 645 1274 q 605 1229 628 1255 q 561 1176 583 1203 q 519 1121 539 1148 q 484 1071 499 1094 l 243 1071 q 207 1121 228 1094 q 165 1176 187 1148 q 122 1229 143 1203 q 83 1274 100 1255 l 83 1293 l 220 1293 q 290 1240 255 1270 q 362 1174 325 1211 q 435 1240 397 1211 q 507 1293 472 1270 l 645 1293 l 645 1274 "},"е":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 "},"Î":{x_min:-11,x_max:551,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 413 1071 q 341 1123 378 1093 q 268 1189 303 1152 q 196 1123 231 1152 q 126 1071 161 1093 l -11 1071 l -11 1089 q 28 1134 6 1108 q 71 1187 49 1160 q 113 1242 93 1215 q 149 1293 134 1269 l 390 1293 q 425 1242 405 1269 q 467 1187 445 1215 q 511 1134 489 1160 q 551 1089 534 1108 l 551 1071 l 413 1071 "},e:{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 "},"ό":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 m 343 860 q 355 906 349 880 q 366 960 361 932 q 377 1014 372 987 q 384 1064 381 1041 l 576 1064 l 576 1049 q 527 950 555 1003 q 463 842 499 897 l 343 842 l 343 860 "},"Ĕ":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 658 1300 q 636 1207 654 1249 q 588 1135 619 1165 q 512 1087 556 1104 q 409 1071 467 1071 q 305 1087 349 1071 q 230 1133 260 1103 q 184 1205 200 1163 q 166 1300 168 1247 l 281 1300 q 293 1253 284 1270 q 319 1227 303 1236 q 358 1216 335 1218 q 410 1214 381 1214 q 457 1217 435 1214 q 496 1229 479 1220 q 525 1255 514 1238 q 539 1300 537 1272 l 658 1300 "},"ļ":{x_min:82,x_max:315.859375,ha:424,o:"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 m 82 -288 q 94 -242 88 -268 q 105 -188 100 -216 q 116 -134 111 -161 q 123 -85 121 -107 l 315 -85 l 315 -98 q 266 -198 294 -145 q 202 -307 238 -251 l 82 -307 l 82 -288 "}," ":{x_min:0,x_max:0,ha:695},"Ѓ":{x_min:125,x_max:696,ha:724,o:"m 696 992 l 696 817 l 335 817 l 335 0 l 125 0 l 125 992 l 696 992 m 288 1071 l 288 1089 q 318 1134 302 1108 q 350 1187 334 1160 q 380 1242 366 1215 q 406 1293 395 1269 l 638 1293 l 638 1278 q 616 1250 630 1266 q 583 1214 602 1233 q 544 1175 565 1195 q 502 1136 523 1155 q 460 1100 480 1117 q 425 1071 441 1083 l 288 1071 "},"ò":{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 m 396 842 q 341 889 373 860 q 277 946 308 917 q 220 1004 246 976 q 184 1049 194 1031 l 184 1064 l 415 1064 q 441 1013 426 1040 q 471 958 455 986 q 503 905 487 931 q 534 860 519 879 l 534 842 l 396 842 "},"ﬄ":{x_min:28,x_max:1389.859375,ha:1498,o:"m 503 604 l 348 604 l 348 0 l 142 0 l 142 604 l 28 604 l 28 703 l 142 758 l 142 813 q 159 934 142 886 q 209 1010 177 982 q 288 1051 242 1039 q 392 1063 334 1063 q 497 1053 454 1063 q 570 1030 540 1043 l 521 877 q 477 890 500 884 q 422 896 454 896 q 365 871 382 896 q 348 804 348 845 l 348 758 l 503 758 l 503 604 m 1041 604 l 886 604 l 886 0 l 680 0 l 680 604 l 566 604 l 566 703 l 680 758 l 680 813 q 697 934 680 886 q 747 1010 715 982 q 826 1051 780 1039 q 930 1063 872 1063 q 1035 1053 992 1063 q 1108 1030 1078 1043 l 1059 877 q 1015 890 1038 884 q 960 896 992 896 q 903 871 920 896 q 886 804 886 845 l 886 758 l 1041 758 l 1041 604 m 1389 0 l 1183 0 l 1183 1055 l 1389 1055 l 1389 0 "},"^":{x_min:5,x_max:736,ha:739,o:"m 5 353 l 302 997 l 399 997 l 736 353 l 573 353 l 355 788 q 259 569 308 679 q 165 353 211 458 l 5 353 "},"ⁿ":{x_min:69,x_max:500,ha:560,o:"m 363 518 l 363 792 q 346 865 363 843 q 296 887 329 887 q 256 880 273 887 q 227 857 238 874 q 211 813 216 841 q 206 744 206 785 l 206 518 l 69 518 l 69 992 l 180 992 l 199 937 l 207 937 q 262 986 230 970 q 341 1003 295 1003 q 500 833 500 1003 l 500 518 l 363 518 "},"к":{x_min:109,x_max:818.25,ha:818,o:"m 563 758 l 791 758 l 522 394 l 818 0 l 583 0 l 315 384 l 315 0 l 109 0 l 109 758 l 315 758 l 315 389 l 563 758 "},"￼":{x_min:57,x_max:1346,ha:1389,o:"m 57 823 l 57 1030 l 262 1030 l 262 954 l 132 954 l 132 823 l 57 823 m 1139 954 l 1139 1030 l 1346 1030 l 1346 823 l 1272 823 l 1272 954 l 1139 954 m 57 -260 l 57 -54 l 132 -54 l 132 -186 l 262 -186 l 262 -260 l 57 -260 m 1139 -260 l 1139 -186 l 1272 -186 l 1272 -54 l 1346 -54 l 1346 -260 l 1139 -260 m 875 -260 l 875 -186 l 1060 -186 l 1060 -260 l 875 -260 m 345 -260 l 345 -186 l 528 -186 l 528 -260 l 345 -260 m 345 954 l 345 1030 l 528 1030 l 528 954 l 345 954 m 1346 26 l 1272 26 l 1272 210 l 1346 210 l 1346 26 m 1346 558 l 1272 558 l 1272 742 l 1346 742 l 1346 558 m 610 -260 l 610 -186 l 794 -186 l 794 -260 l 610 -260 m 132 26 l 57 26 l 57 210 l 132 210 l 132 26 m 610 954 l 610 1030 l 794 1030 l 794 954 l 610 954 m 875 954 l 875 1030 l 1060 1030 l 1060 954 l 875 954 m 132 291 l 57 291 l 57 476 l 132 476 l 132 291 m 132 558 l 57 558 l 57 742 l 132 742 l 132 558 m 1346 291 l 1272 291 l 1272 476 l 1346 476 l 1346 291 m 408 224 q 276 277 322 224 q 231 427 231 331 q 276 577 231 525 q 408 631 322 630 q 540 578 494 631 q 586 427 586 525 q 540 277 586 331 q 408 224 494 224 m 408 294 q 478 329 457 294 q 499 427 499 364 q 478 525 499 490 q 408 559 457 559 q 339 525 361 559 q 317 427 317 490 q 339 329 317 364 q 408 294 361 294 m 643 626 l 759 626 q 871 603 833 626 q 909 524 909 580 q 893 468 909 491 q 847 439 878 445 l 847 437 q 903 406 886 429 q 921 344 921 383 q 884 259 921 289 q 783 229 847 229 l 643 229 l 643 626 m 726 469 l 770 469 q 814 480 801 469 q 826 513 826 491 q 812 546 826 536 q 766 556 798 556 l 726 556 l 726 469 m 726 402 l 726 298 l 776 298 q 822 312 809 298 q 834 352 834 327 q 821 388 834 374 q 773 402 809 402 l 726 402 m 956 231 l 956 300 q 978 297 967 298 q 1002 295 989 295 q 1044 307 1028 295 q 1061 353 1061 319 l 1061 626 l 1146 626 l 1146 356 q 1110 258 1146 292 q 1011 225 1075 225 q 956 231 969 225 "},"ū":{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 224 985 l 642 985 l 642 842 l 224 842 l 224 985 "},"ˆ":{x_min:119,x_max:681,ha:802,o:"m 543 842 q 471 894 508 864 q 398 960 433 923 q 326 894 361 923 q 256 842 291 864 l 119 842 l 119 860 q 158 905 136 879 q 201 958 179 931 q 243 1013 223 986 q 279 1064 264 1040 l 520 1064 q 555 1013 535 1040 q 597 958 575 986 q 641 905 619 931 q 681 860 664 879 l 681 842 l 543 842 "},"Ẅ":{x_min:-.25,x_max:1287.25,ha:1287,o:"m 1048 0 l 809 0 l 687 489 q 681 517 684 499 q 672 559 677 536 q 663 607 667 582 q 654 656 658 632 q 647 700 650 679 q 642 732 644 720 q 638 700 641 720 q 631 656 635 679 q 622 608 627 633 q 613 559 618 582 q 605 517 609 536 q 598 487 601 498 l 477 0 l 238 0 l 0 992 l 206 992 l 319 450 q 325 418 321 439 q 333 372 328 398 q 343 318 338 346 q 353 262 348 289 q 361 211 357 235 q 368 173 366 188 q 373 211 370 188 q 381 260 377 234 q 390 314 385 286 q 399 366 395 342 q 407 409 404 390 q 413 436 411 428 l 551 992 l 735 992 l 873 436 q 879 409 875 428 q 887 366 882 390 q 896 314 891 342 q 905 260 901 286 q 913 211 910 234 q 919 173 917 188 q 925 211 921 188 q 933 262 929 235 q 943 318 938 289 q 953 372 948 346 q 962 418 958 398 q 967 450 965 439 l 1080 992 l 1287 992 l 1048 0 m 410 1182 q 417 1223 410 1206 q 437 1251 424 1240 q 467 1268 450 1263 q 504 1274 484 1274 q 541 1268 524 1274 q 571 1251 558 1263 q 592 1223 584 1240 q 600 1182 600 1206 q 592 1142 600 1159 q 571 1114 584 1125 q 541 1097 558 1102 q 504 1092 524 1092 q 467 1097 484 1092 q 437 1114 450 1102 q 417 1142 424 1125 q 410 1182 410 1159 m 683 1182 q 690 1223 683 1206 q 710 1251 697 1240 q 741 1268 723 1263 q 779 1274 758 1274 q 815 1268 798 1274 q 846 1251 832 1263 q 867 1223 859 1240 q 875 1182 875 1206 q 867 1142 875 1159 q 846 1114 859 1125 q 815 1097 832 1102 q 779 1092 798 1092 q 710 1114 738 1092 q 683 1182 683 1136 "},"č":{x_min:69,x_max:687,ha:693,o:"m 424 -14 q 277 8 342 -14 q 165 78 211 30 q 93 198 118 125 q 69 375 69 272 q 94 564 69 488 q 166 687 119 641 q 278 753 212 733 q 424 773 343 773 q 540 758 482 773 q 648 718 597 744 l 588 562 q 502 594 544 581 q 423 606 461 606 q 314 549 348 606 q 280 376 280 491 q 314 206 280 261 q 421 152 348 152 q 528 167 480 152 q 627 206 576 182 l 627 35 q 578 13 601 23 q 530 -1 554 4 q 480 -10 506 -7 q 424 -14 453 -14 m 687 1045 q 647 1000 670 1026 q 603 947 625 974 q 561 892 581 919 q 526 842 541 865 l 285 842 q 249 892 270 865 q 207 947 229 919 q 164 1000 185 974 q 125 1045 142 1026 l 125 1064 l 262 1064 q 332 1011 297 1041 q 404 945 367 982 q 477 1011 439 982 q 549 1064 514 1041 l 687 1064 l 687 1045 "},"’":{x_min:16,x_max:284,ha:298,o:"m 273 992 l 284 977 q 261 898 274 939 q 232 815 248 857 q 198 731 216 772 q 164 652 181 690 l 16 652 q 35 737 25 692 q 54 827 45 782 q 71 913 63 871 q 83 992 78 956 l 273 992 "},"Ν":{x_min:125,x_max:963,ha:1088,o:"m 963 0 l 697 0 l 305 750 l 299 750 q 306 646 303 698 q 310 554 308 602 q 312 466 312 505 l 312 0 l 125 0 l 125 992 l 389 992 l 781 248 l 785 248 q 780 350 783 300 q 778 395 779 372 q 777 440 777 417 q 776 484 776 463 q 775 522 775 505 l 775 992 l 963 992 l 963 0 "},"-":{x_min:41,x_max:406,ha:447,o:"m 41 287 l 41 457 l 406 457 l 406 287 l 41 287 "},Q:{x_min:81,x_max:999.25,ha:1050,o:"m 970 496 q 956 345 970 416 q 916 215 943 274 q 849 112 889 157 q 754 36 809 66 l 999 -236 l 729 -236 l 547 -12 q 538 -13 542 -12 q 531 -14 535 -14 q 525 -14 527 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 "},"ј":{x_min:-56,x_max:324.5,ha:424,o:"m 68 -334 q 1 -329 36 -334 q -56 -317 -32 -324 l -56 -154 q -16 -164 -34 -161 q 24 -167 1 -167 q 56 -162 41 -167 q 83 -144 72 -157 q 101 -109 94 -131 q 108 -52 108 -87 l 108 758 l 315 758 l 315 -82 q 301 -180 315 -134 q 259 -260 288 -226 q 182 -314 229 -294 q 68 -334 135 -334 m 99 953 q 108 1002 99 983 q 132 1033 116 1021 q 168 1050 147 1045 q 211 1055 188 1055 q 255 1050 234 1055 q 290 1033 275 1045 q 315 1002 306 1021 q 324 953 324 983 q 315 905 324 925 q 290 874 306 885 q 255 857 275 862 q 211 852 234 852 q 168 857 188 852 q 132 874 147 862 q 108 905 116 885 q 99 953 99 925 "},"ě":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 698 1045 q 658 1000 681 1026 q 614 947 636 974 q 572 892 592 919 q 537 842 552 865 l 296 842 q 260 892 281 865 q 218 947 240 919 q 175 1000 196 974 q 136 1045 153 1026 l 136 1064 l 273 1064 q 343 1011 308 1041 q 415 945 378 982 q 488 1011 450 982 q 560 1064 525 1041 l 698 1064 l 698 1045 "},"œ":{x_min:69,x_max:1222,ha:1289,o:"m 922 -14 q 774 11 842 -14 q 657 90 706 36 q 551 11 612 37 q 413 -14 489 -14 q 274 12 337 -14 q 166 88 211 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 335 773 q 548 746 488 773 q 653 667 608 719 q 759 746 698 720 q 895 773 821 773 q 1031 750 970 773 q 1134 683 1092 727 q 1199 574 1176 639 q 1222 427 1222 510 l 1222 327 l 757 327 l 757 321 q 808 187 761 235 q 936 139 854 139 q 1001 143 970 139 q 1062 154 1032 146 q 1120 172 1091 161 q 1179 198 1149 184 l 1179 39 q 1124 15 1151 25 q 1066 -1 1096 5 q 1000 -10 1035 -7 q 922 -14 965 -14 m 280 380 q 312 209 280 267 q 416 152 344 152 q 519 210 487 152 q 551 380 551 267 q 519 550 551 494 q 414 606 487 606 q 312 550 343 606 q 280 380 280 494 m 896 625 q 844 616 868 625 q 803 586 821 606 q 775 536 786 567 q 761 465 764 506 l 1027 465 q 1018 529 1026 499 q 993 579 1010 558 q 953 613 977 601 q 896 625 928 625 "},"#":{x_min:31,x_max:867,ha:897,o:"m 677 574 l 645 414 l 821 414 l 821 275 l 619 275 l 567 0 l 417 0 l 470 275 l 339 275 l 287 0 l 142 0 l 192 275 l 31 275 l 31 414 l 218 414 l 250 574 l 80 574 l 80 714 l 275 714 l 328 990 l 476 990 l 424 714 l 558 714 l 611 990 l 757 990 l 704 714 l 867 714 l 867 574 l 677 574 m 365 414 l 498 414 l 530 574 l 397 574 l 365 414 "},"Џ":{x_min:125,x_max:854,ha:979,o:"m 854 0 l 593 0 l 593 -289 l 388 -289 l 388 0 l 125 0 l 125 992 l 335 992 l 335 174 l 643 174 l 643 992 l 854 992 l 854 0 "},"Å":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 622 1062 q 608 994 622 1024 q 572 943 595 964 q 517 911 548 922 q 449 900 486 900 q 381 911 412 900 q 328 943 350 922 q 294 993 306 963 q 282 1061 282 1024 q 294 1128 282 1098 q 328 1178 306 1158 q 381 1210 350 1199 q 449 1222 412 1222 q 517 1210 485 1222 q 571 1178 548 1199 q 608 1128 594 1158 q 622 1062 622 1099 m 516 1061 q 498 1109 516 1091 q 452 1126 480 1126 q 405 1109 423 1126 q 387 1061 387 1091 q 403 1013 387 1030 q 452 995 419 995 q 498 1013 480 995 q 516 1061 516 1030 "},"ș":{x_min:66,x_max:614,ha:668,o:"m 614 225 q 592 120 614 165 q 530 45 570 75 q 433 0 490 15 q 305 -14 376 -14 q 236 -11 268 -14 q 176 -3 204 -9 q 121 9 147 1 q 67 30 94 17 l 67 201 q 127 176 95 187 q 189 156 158 164 q 249 143 220 148 q 304 139 279 139 q 351 144 331 139 q 383 158 370 149 q 401 179 395 167 q 407 205 407 191 q 402 230 407 219 q 382 254 398 242 q 337 283 367 267 q 256 322 307 299 q 171 366 207 344 q 112 415 135 388 q 77 477 88 442 q 66 561 66 512 q 86 653 66 614 q 144 720 106 693 q 234 759 181 746 q 351 773 286 773 q 480 757 419 773 q 605 710 541 741 l 543 564 q 445 604 492 588 q 352 619 398 619 q 291 604 310 619 q 272 563 272 589 q 277 539 272 550 q 296 518 282 529 q 336 493 310 506 q 403 461 362 480 q 490 419 451 440 q 556 372 528 398 q 599 310 584 345 q 614 225 614 275 m 218 -288 q 230 -242 224 -268 q 241 -188 236 -216 q 252 -134 247 -161 q 259 -85 257 -107 l 451 -85 l 451 -98 q 402 -198 430 -145 q 338 -307 374 -251 l 218 -307 l 218 -288 "},"¸":{x_min:-25,x_max:284,ha:285,o:"m 284 -169 q 273 -239 284 -208 q 238 -290 262 -269 q 173 -322 214 -311 q 74 -334 133 -334 q 19 -329 43 -334 q -25 -319 -5 -325 l -25 -205 q -2 -210 -14 -208 q 23 -215 10 -213 q 49 -218 36 -217 q 72 -220 62 -220 q 106 -210 91 -220 q 121 -178 121 -201 q 96 -133 121 -153 q 8 -105 70 -114 l 61 0 l 192 0 l 173 -41 q 214 -59 194 -48 q 249 -87 234 -71 q 274 -124 264 -103 q 284 -169 284 -144 "},"=":{x_min:60,x_max:705,ha:765,o:"m 60 546 l 60 695 l 705 695 l 705 546 l 60 546 m 60 284 l 60 433 l 705 433 l 705 284 l 60 284 "},"ρ":{x_min:82,x_max:754,ha:823,o:"m 754 379 q 733 211 754 284 q 676 88 713 138 q 584 12 638 38 q 464 -14 530 -14 q 369 0 415 -14 q 288 38 323 15 l 278 38 q 283 -22 280 9 q 287 -80 285 -48 q 288 -143 288 -112 l 288 -334 l 82 -334 l 82 380 q 106 547 82 474 q 174 670 130 620 q 281 746 218 720 q 422 773 344 773 q 554 746 494 773 q 660 670 615 720 q 729 546 704 619 q 754 379 754 472 m 417 606 q 360 594 384 606 q 320 556 336 582 q 296 489 304 529 q 288 390 288 448 l 288 210 q 347 166 314 181 q 417 152 381 152 q 474 165 450 152 q 513 205 497 178 q 535 276 528 233 q 542 379 542 318 q 535 483 542 440 q 513 554 528 526 q 474 594 497 581 q 417 606 450 606 "},"Ћ":{x_min:28,x_max:989,ha:1063,o:"m 778 0 l 778 348 q 755 432 778 408 q 677 457 731 457 l 487 457 l 487 0 l 277 0 l 277 817 l 28 817 l 28 992 l 728 992 l 728 817 l 487 817 l 487 632 l 692 632 q 817 614 762 632 q 910 561 872 596 q 969 477 949 526 q 989 364 989 427 l 989 0 l 778 0 "},"ú":{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 313 842 l 313 860 q 343 905 327 879 q 375 958 359 931 q 405 1013 391 986 q 431 1064 420 1040 l 663 1064 l 663 1049 q 641 1021 655 1037 q 608 985 627 1004 q 569 946 590 966 q 527 907 548 926 q 485 871 505 888 q 450 842 466 854 l 313 842 "},"˚":{x_min:231,x_max:571,ha:802,o:"m 571 1002 q 557 934 571 964 q 521 883 544 904 q 466 851 497 862 q 398 840 435 840 q 330 851 361 840 q 277 883 299 862 q 243 933 255 903 q 231 1001 231 964 q 243 1068 231 1038 q 277 1118 255 1098 q 330 1150 299 1139 q 398 1162 361 1162 q 466 1150 434 1162 q 520 1118 497 1139 q 557 1068 543 1098 q 571 1002 571 1039 m 465 1001 q 447 1049 465 1031 q 401 1066 429 1066 q 354 1049 372 1066 q 336 1001 336 1031 q 352 953 336 970 q 401 935 368 935 q 447 953 429 935 q 465 1001 465 970 "},"д":{x_min:20,x_max:860,ha:879,o:"m 542 153 l 542 604 l 428 604 q 382 365 411 478 q 300 153 352 252 l 542 153 m 860 -272 l 681 -272 l 681 0 l 198 0 l 198 -272 l 20 -272 l 20 153 l 83 153 q 150 280 121 210 q 199 428 178 350 q 233 589 220 505 q 255 758 247 673 l 749 758 l 749 153 l 860 153 l 860 -272 "},"¯":{x_min:-4,x_max:699,ha:695,o:"m 699 1056 l -4 1056 l -4 1192 l 699 1192 l 699 1056 "},u:{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 "},"З":{x_min:63.859375,x_max:784,ha:844,o:"m 753 759 q 735 668 753 709 q 687 598 718 628 q 614 548 656 568 q 521 521 572 529 l 521 517 q 632 491 583 510 q 715 441 681 471 q 766 371 748 411 q 784 281 784 331 q 758 162 784 216 q 684 68 733 108 q 562 7 634 29 q 395 -14 490 -14 q 210 0 290 -14 q 72 39 130 13 l 72 215 q 136 188 101 200 q 208 169 171 177 q 281 157 245 161 q 349 152 318 152 q 520 190 467 152 q 573 296 573 227 q 554 357 573 332 q 499 399 535 382 q 413 423 464 415 q 300 431 363 431 l 220 431 l 220 598 l 290 598 q 415 606 366 598 q 494 632 465 615 q 535 672 523 649 q 547 727 547 696 q 507 808 547 778 q 390 839 467 839 q 264 816 322 839 q 154 757 206 794 l 63 897 q 136 942 99 922 q 217 976 174 962 q 311 998 260 991 q 424 1006 363 1006 q 563 987 501 1006 q 666 936 624 969 q 730 858 708 903 q 753 759 753 813 "},"Α":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 "},"⅝":{x_min:61,x_max:1183,ha:1224,o:"m 273 789 q 358 776 319 789 q 426 739 397 764 q 472 679 455 715 q 489 597 489 644 q 424 441 489 496 q 236 386 360 386 q 141 394 187 386 q 61 421 94 403 l 61 551 q 98 538 78 544 q 140 528 119 532 q 183 521 162 523 q 223 518 205 518 q 309 538 276 518 q 341 604 341 558 q 311 666 341 645 q 226 687 281 687 q 185 683 209 687 q 145 675 162 680 l 71 703 l 96 992 l 448 992 l 448 859 l 207 859 l 196 783 q 230 787 210 785 q 273 789 249 789 m 960 992 l 409 0 l 247 0 l 798 992 l 960 992 m 951 607 q 1033 597 995 607 q 1100 569 1071 588 q 1144 523 1128 551 q 1161 458 1161 495 q 1153 413 1161 434 q 1132 376 1146 393 q 1102 347 1119 360 q 1064 323 1084 334 q 1108 295 1087 309 q 1146 263 1129 281 q 1172 221 1162 244 q 1183 169 1183 198 q 1166 95 1183 129 q 1119 36 1149 61 q 1046 -2 1088 11 q 951 -16 1003 -16 q 851 -2 894 -16 q 778 34 808 10 q 734 92 749 58 q 719 165 719 126 q 727 218 719 195 q 751 259 736 241 q 785 291 765 277 q 825 317 804 305 q 792 345 807 330 q 764 376 776 359 q 746 414 752 393 q 740 458 740 434 q 756 523 740 495 q 802 569 773 550 q 869 597 831 587 q 951 607 908 607 m 866 169 q 887 114 866 135 q 949 92 908 92 q 1013 114 991 92 q 1035 169 1035 135 q 1012 223 1035 201 q 948 261 989 246 l 939 264 q 885 226 904 248 q 866 169 866 203 m 949 498 q 903 482 919 498 q 887 447 887 467 q 906 403 887 420 q 951 373 924 387 q 975 386 964 379 q 995 402 987 393 q 1008 422 1003 411 q 1013 447 1013 433 q 998 482 1013 467 q 949 498 983 498 "},"é":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 304 842 l 304 860 q 334 905 318 879 q 366 958 350 931 q 396 1013 382 986 q 422 1064 411 1040 l 654 1064 l 654 1049 q 632 1021 646 1037 q 599 985 618 1004 q 560 946 581 966 q 518 907 539 926 q 476 871 496 888 q 441 842 457 854 l 304 842 "},"Ş":{x_min:63.46875,x_max:668,ha:728,o:"m 668 275 q 645 155 668 208 q 578 64 622 102 q 471 6 535 26 q 326 -14 408 -14 q 187 0 254 -14 q 63 45 120 15 l 63 241 q 129 211 96 225 q 196 185 162 197 q 265 167 231 174 q 333 160 299 160 q 392 168 368 160 q 432 190 417 176 q 455 223 448 203 q 462 264 462 242 q 450 314 462 292 q 417 354 438 335 q 365 390 396 372 q 298 427 335 408 q 228 467 267 444 q 155 524 189 490 q 98 607 121 558 q 75 723 75 655 q 97 842 75 790 q 159 931 119 895 q 258 987 200 968 q 388 1006 316 1006 q 458 1001 424 1006 q 526 987 492 996 q 594 965 560 978 q 663 936 627 953 l 596 772 q 539 797 565 786 q 487 816 512 808 q 438 827 462 823 q 389 831 414 831 q 308 802 336 831 q 280 727 280 774 q 288 683 280 702 q 316 646 297 663 q 364 612 334 630 q 435 572 393 594 q 529 517 486 545 q 603 454 572 488 q 651 376 634 420 q 668 275 668 333 m 510 -169 q 499 -239 510 -208 q 464 -290 488 -269 q 399 -322 440 -311 q 300 -334 359 -334 q 245 -329 269 -334 q 201 -319 220 -325 l 201 -205 q 223 -210 211 -208 q 249 -215 236 -213 q 275 -218 262 -217 q 298 -220 288 -220 q 332 -210 317 -220 q 347 -178 347 -201 q 322 -133 347 -153 q 234 -105 296 -114 l 287 0 l 418 0 l 399 -41 q 440 -59 420 -48 q 475 -87 460 -71 q 500 -124 490 -103 q 510 -169 510 -144 "},B:{x_min:125,x_max:818,ha:892,o:"m 125 992 l 415 992 q 579 978 508 992 q 697 936 649 965 q 768 858 744 906 q 793 740 793 810 q 782 662 793 698 q 752 597 772 625 q 705 551 733 569 q 640 526 677 532 l 640 519 q 709 496 677 511 q 766 454 742 480 q 804 386 790 427 q 818 287 818 345 q 794 166 818 219 q 726 76 770 113 q 618 19 681 39 q 474 0 554 0 l 125 0 l 125 992 m 335 599 l 444 599 q 509 606 483 599 q 552 627 536 613 q 575 662 568 641 q 582 711 582 683 q 547 792 582 768 q 434 817 511 817 l 335 817 l 335 599 m 335 432 l 335 174 l 459 174 q 529 184 501 174 q 575 211 557 193 q 600 253 592 228 q 607 309 607 278 q 600 359 607 336 q 574 398 592 382 q 527 423 556 414 q 454 432 497 432 l 335 432 "},"…":{x_min:79,x_max:1109,ha:1188,o:"m 79 97 q 88 151 79 129 q 113 187 97 173 q 151 206 129 200 q 198 213 173 213 q 243 206 221 213 q 280 187 264 200 q 306 151 297 173 q 316 97 316 129 q 306 45 316 66 q 280 9 297 23 q 243 -11 264 -5 q 198 -18 221 -18 q 151 -11 173 -18 q 113 9 129 -5 q 88 45 97 23 q 79 97 79 66 m 475 97 q 484 151 475 129 q 509 187 493 173 q 547 206 525 200 q 595 213 569 213 q 640 206 618 213 q 677 187 661 200 q 703 151 694 173 q 713 97 713 129 q 703 45 713 66 q 677 9 694 23 q 640 -11 661 -5 q 595 -18 618 -18 q 547 -11 569 -18 q 509 9 525 -5 q 484 45 493 23 q 475 97 475 66 m 872 97 q 881 151 872 129 q 906 187 890 173 q 944 206 922 200 q 991 213 966 213 q 1036 206 1014 213 q 1073 187 1057 200 q 1099 151 1090 173 q 1109 97 1109 129 q 1099 45 1109 66 q 1073 9 1090 23 q 1036 -11 1057 -5 q 991 -18 1014 -18 q 944 -11 966 -18 q 906 9 922 -5 q 881 45 890 23 q 872 97 872 66 "},H:{x_min:125,x_max:882,ha:1007,o:"m 882 0 l 671 0 l 671 428 l 335 428 l 335 0 l 125 0 l 125 992 l 335 992 l 335 603 l 671 603 l 671 992 l 882 992 l 882 0 "},"î":{x_min:-70,x_max:492,ha:424,o:"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 354 842 q 282 894 319 864 q 209 960 244 923 q 137 894 172 923 q 67 842 102 864 l -70 842 l -70 860 q -30 905 -52 879 q 12 958 -9 931 q 54 1013 34 986 q 90 1064 75 1040 l 331 1064 q 366 1013 346 1040 q 408 958 386 986 q 452 905 430 931 q 492 860 475 879 l 492 842 l 354 842 "},"ν":{x_min:3.75,x_max:731,ha:785,o:"m 3 758 l 216 758 l 345 337 q 356 301 350 322 q 367 258 362 280 q 378 217 373 237 q 387 183 384 197 l 393 183 q 453 294 428 235 q 494 423 478 353 q 516 576 509 493 q 524 758 524 659 l 731 758 q 718 545 731 645 q 674 353 705 446 q 589 174 642 261 q 454 0 536 87 l 268 0 l 3 758 "},"Ό":{x_min:-39,x_max:1026,ha:1106,o:"m 1026 496 q 999 287 1026 382 q 917 126 972 193 q 778 22 862 59 q 581 -14 695 -14 q 383 22 467 -14 q 245 126 299 59 q 163 288 190 193 q 137 498 137 382 q 163 707 137 613 q 245 867 190 801 q 384 970 300 934 q 582 1007 467 1007 q 779 970 696 1007 q 917 867 863 934 q 999 706 972 800 q 1026 496 1026 612 m 353 496 q 366 355 353 417 q 408 250 380 293 q 479 184 436 207 q 581 160 522 160 q 685 184 641 160 q 755 250 728 207 q 796 355 783 293 q 809 496 809 417 q 796 636 809 574 q 755 742 783 698 q 685 808 728 785 q 582 832 642 832 q 480 808 523 832 q 408 742 436 785 q 366 636 380 698 q 353 496 353 574 m -39 789 q -26 835 -32 809 q -15 889 -20 861 q -5 943 -9 916 q 2 993 0 970 l 194 993 l 194 978 q 145 879 173 932 q 81 771 117 826 l -39 771 l -39 789 "},"−":{x_min:60,x_max:705,ha:765,o:"m 60 415 l 60 564 l 705 564 l 705 415 l 60 415 "},"⅜":{x_min:40,x_max:1183,ha:1224,o:"m 451 846 q 423 766 451 800 q 335 712 396 732 l 335 703 q 395 682 370 697 q 437 649 420 668 q 461 608 453 631 q 470 562 470 586 q 410 433 470 480 q 224 386 350 386 q 128 397 173 386 q 40 433 84 409 l 40 562 q 129 518 84 535 q 224 501 174 501 q 298 519 275 501 q 322 573 322 537 q 316 600 322 587 q 298 623 311 613 q 263 639 285 633 q 208 645 241 645 l 132 645 l 132 754 l 193 754 q 249 760 228 754 q 283 776 271 766 q 299 800 295 787 q 303 828 303 814 q 286 871 303 854 q 235 888 269 888 q 175 875 203 888 q 109 834 147 862 l 41 930 q 134 982 83 961 q 255 1004 185 1004 q 333 992 297 1004 q 395 961 369 981 q 436 911 421 940 q 451 846 451 882 m 960 992 l 409 0 l 247 0 l 798 992 l 960 992 m 951 607 q 1033 597 995 607 q 1100 569 1071 588 q 1144 523 1128 551 q 1161 458 1161 495 q 1153 413 1161 434 q 1132 376 1146 393 q 1102 347 1119 360 q 1064 323 1084 334 q 1108 295 1087 309 q 1146 263 1129 281 q 1172 221 1162 244 q 1183 169 1183 198 q 1166 95 1183 129 q 1119 36 1149 61 q 1046 -2 1088 11 q 951 -16 1003 -16 q 851 -2 894 -16 q 778 34 808 10 q 734 92 749 58 q 719 165 719 126 q 727 218 719 195 q 751 259 736 241 q 785 291 765 277 q 825 317 804 305 q 792 345 807 330 q 764 376 776 359 q 746 414 752 393 q 740 458 740 434 q 756 523 740 495 q 802 569 773 550 q 869 597 831 587 q 951 607 908 607 m 866 169 q 887 114 866 135 q 949 92 908 92 q 1013 114 991 92 q 1035 169 1035 135 q 1012 223 1035 201 q 948 261 989 246 l 939 264 q 885 226 904 248 q 866 169 866 203 m 949 498 q 903 482 919 498 q 887 447 887 467 q 906 403 887 420 q 951 373 924 387 q 975 386 964 379 q 995 402 987 393 q 1008 422 1003 411 q 1013 447 1013 433 q 998 482 1013 467 q 949 498 983 498 "},"ǰ":{x_min:-70,x_max:492,ha:424,o:"m 68 -334 q 1 -329 36 -334 q -56 -317 -32 -324 l -56 -154 q -16 -164 -34 -161 q 24 -167 1 -167 q 56 -162 41 -167 q 83 -144 72 -157 q 101 -109 94 -131 q 108 -52 108 -87 l 108 758 l 315 758 l 315 -82 q 301 -180 315 -134 q 259 -260 288 -226 q 182 -314 229 -294 q 68 -334 135 -334 m 492 1045 q 452 1000 475 1026 q 408 947 430 974 q 366 892 386 919 q 331 842 346 865 l 90 842 q 54 892 75 865 q 12 947 34 919 q -30 1000 -9 974 q -70 1045 -52 1026 l -70 1064 l 67 1064 q 137 1011 102 1041 q 209 945 172 982 q 282 1011 244 982 q 354 1064 319 1041 l 492 1064 l 492 1045 "},"ā":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 189 985 l 607 985 l 607 842 l 189 842 l 189 985 "},"ĵ":{x_min:-70,x_max:492,ha:424,o:"m 68 -334 q 1 -329 36 -334 q -56 -317 -32 -324 l -56 -154 q -16 -164 -34 -161 q 24 -167 1 -167 q 56 -162 41 -167 q 83 -144 72 -157 q 101 -109 94 -131 q 108 -52 108 -87 l 108 758 l 315 758 l 315 -82 q 301 -180 315 -134 q 259 -260 288 -226 q 182 -314 229 -294 q 68 -334 135 -334 m 354 842 q 282 894 319 864 q 209 960 244 923 q 137 894 172 923 q 67 842 102 864 l -70 842 l -70 860 q -30 905 -52 879 q 12 958 -9 931 q 54 1013 34 986 q 90 1064 75 1040 l 331 1064 q 366 1013 346 1040 q 408 958 386 986 q 452 905 430 931 q 492 860 475 879 l 492 842 l 354 842 "},"Ĩ":{x_min:3,x_max:537,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 158 1135 q 124 1119 137 1135 q 104 1069 112 1103 l 3 1069 q 20 1163 7 1123 q 56 1228 34 1202 q 108 1266 78 1253 q 173 1279 137 1279 q 227 1269 201 1279 q 280 1246 254 1259 q 331 1224 306 1234 q 381 1214 357 1214 q 414 1230 402 1214 q 435 1280 427 1246 l 537 1280 q 519 1187 532 1226 q 482 1122 505 1148 q 430 1083 460 1096 q 366 1071 401 1071 q 312 1081 339 1071 q 259 1103 284 1091 q 208 1125 233 1115 q 158 1135 182 1135 "},"*":{x_min:42.8125,x_max:714.546875,ha:757,o:"m 467 1055 l 439 805 l 692 875 l 714 704 l 483 688 l 635 487 l 481 405 l 375 617 l 282 406 l 122 487 l 272 688 l 42 706 l 69 875 l 316 805 l 289 1055 l 467 1055 "},"ă":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 654 1071 q 632 978 650 1020 q 584 906 615 936 q 508 858 552 875 q 405 842 463 842 q 301 858 345 842 q 226 904 256 874 q 180 976 196 934 q 162 1071 164 1018 l 277 1071 q 289 1024 280 1041 q 315 998 299 1007 q 354 987 331 989 q 406 985 377 985 q 453 988 431 985 q 492 1000 475 991 q 521 1026 510 1009 q 535 1071 533 1043 l 654 1071 "},"Χ":{x_min:-.25,x_max:871.25,ha:871,o:"m 871 0 l 631 0 l 428 375 l 224 0 l 0 0 l 301 511 l 20 992 l 252 992 l 438 635 l 620 992 l 847 992 l 563 500 l 871 0 "},"†":{x_min:83,x_max:633,ha:717,o:"m 633 628 l 408 649 l 445 0 l 256 0 l 294 649 l 83 628 l 83 792 l 294 772 l 256 1055 l 445 1055 l 408 772 l 633 792 l 633 628 "},"°":{x_min:63,x_max:532,ha:595,o:"m 63 771 q 81 862 63 819 q 131 936 99 904 q 206 987 163 968 q 297 1006 248 1006 q 389 987 346 1006 q 463 936 432 968 q 513 862 495 904 q 532 771 532 819 q 513 679 532 722 q 463 605 495 637 q 389 555 432 573 q 297 538 346 538 q 206 555 248 538 q 131 605 163 573 q 81 679 99 637 q 63 771 63 722 m 211 771 q 218 735 211 752 q 236 705 224 718 q 263 685 248 692 q 297 677 279 677 q 330 685 314 677 q 358 705 346 692 q 376 735 369 718 q 383 771 383 752 q 376 807 383 790 q 358 838 369 825 q 330 858 346 851 q 297 866 314 866 q 263 858 279 866 q 236 838 248 851 q 218 807 224 825 q 211 771 211 790 "},"Ξ":{x_min:55,x_max:682,ha:737,o:"m 138 602 l 598 602 l 598 427 l 138 427 l 138 602 m 83 992 l 654 992 l 654 817 l 83 817 l 83 992 m 682 174 l 682 0 l 55 0 l 55 174 l 682 174 "},"Ķ":{x_min:125,x_max:880.25,ha:880,o:"m 880 0 l 641 0 l 413 412 l 335 354 l 335 0 l 125 0 l 125 992 l 335 992 l 335 514 l 417 654 l 644 992 l 877 992 l 561 544 l 880 0 m 300 -288 q 312 -242 306 -268 q 323 -188 318 -216 q 334 -134 329 -161 q 341 -85 339 -107 l 533 -85 l 533 -98 q 484 -198 512 -145 q 420 -307 456 -251 l 300 -307 l 300 -288 "},"ŵ":{x_min:-.25,x_max:1120.25,ha:1120,o:"m 688 0 l 629 265 q 622 297 626 276 q 612 346 618 319 q 601 403 607 372 q 589 463 595 433 q 559 613 575 532 l 555 613 q 527 462 539 532 q 515 402 521 432 q 504 344 510 371 q 494 296 499 317 q 487 262 490 274 l 426 0 l 204 0 l 0 758 l 205 758 l 282 422 q 294 359 288 395 q 306 284 301 322 q 317 213 312 246 q 324 160 322 179 l 328 160 q 331 193 329 172 q 337 237 334 214 q 344 286 341 261 q 352 332 348 311 q 359 371 356 354 q 364 394 362 387 l 447 758 l 674 758 l 754 394 q 763 348 757 379 q 774 281 768 317 q 784 212 780 246 q 789 160 788 178 l 793 160 q 800 210 795 176 q 811 281 805 243 q 824 357 817 320 q 837 422 831 395 l 917 758 l 1120 758 l 913 0 l 688 0 m 702 842 q 630 894 667 864 q 557 960 592 923 q 485 894 520 923 q 415 842 450 864 l 278 842 l 278 860 q 317 905 295 879 q 360 958 338 931 q 402 1013 382 986 q 438 1064 423 1040 l 679 1064 q 714 1013 694 1040 q 756 958 734 986 q 800 905 778 931 q 840 860 823 879 l 840 842 l 702 842 "},"΄":{x_min:319,x_max:552,ha:802,o:"m 319 860 q 331 906 325 880 q 342 960 337 932 q 353 1014 348 987 q 360 1064 357 1041 l 552 1064 l 552 1049 q 503 950 531 1003 q 439 842 475 897 l 319 842 l 319 860 "},"ǽ":{x_min:58,x_max:1159,ha:1225,o:"m 860 -14 q 698 20 771 -14 q 578 125 625 54 q 521 62 549 89 q 459 19 492 36 q 384 -5 426 2 q 287 -14 342 -14 q 199 0 241 -14 q 126 44 157 15 q 76 119 94 74 q 58 226 58 164 q 135 404 58 346 q 367 467 212 461 l 488 471 l 488 528 q 460 598 488 575 q 384 620 433 620 q 289 606 335 620 q 195 568 242 592 l 128 705 q 254 755 185 737 q 399 774 323 774 q 618 685 544 774 q 832 773 704 773 q 968 750 907 773 q 1071 683 1029 727 q 1136 574 1113 639 q 1159 427 1159 510 l 1159 327 l 694 327 q 708 248 696 283 q 744 189 721 213 q 799 152 767 165 q 873 139 831 139 q 996 154 937 139 q 1116 199 1056 168 l 1116 39 q 1061 15 1089 25 q 1003 -1 1034 5 q 937 -10 972 -7 q 860 -14 902 -14 m 488 351 l 419 348 q 348 337 377 347 q 302 312 320 328 q 277 274 285 296 q 269 226 269 252 q 292 159 269 178 q 353 139 316 139 q 406 149 382 139 q 449 177 431 158 q 477 225 467 197 q 488 289 488 252 l 488 351 m 833 625 q 740 586 777 625 q 698 465 704 548 l 964 465 q 955 529 963 499 q 931 579 947 558 q 890 613 915 601 q 833 625 866 625 m 513 842 l 513 860 q 543 905 527 879 q 575 958 559 931 q 605 1013 591 986 q 631 1064 620 1040 l 863 1064 l 863 1049 q 841 1021 855 1037 q 808 985 827 1004 q 769 946 790 966 q 727 907 748 926 q 685 871 705 888 q 650 842 666 854 l 513 842 "},"Β":{x_min:125,x_max:818,ha:892,o:"m 125 992 l 415 992 q 579 978 508 992 q 697 936 649 965 q 768 858 744 906 q 793 740 793 810 q 782 662 793 698 q 752 597 772 625 q 705 551 733 569 q 640 526 677 532 l 640 519 q 709 496 677 511 q 766 454 742 480 q 804 386 790 427 q 818 287 818 345 q 794 166 818 219 q 726 76 770 113 q 618 19 681 39 q 474 0 554 0 l 125 0 l 125 992 m 335 599 l 444 599 q 509 606 483 599 q 552 627 536 613 q 575 662 568 641 q 582 711 582 683 q 547 792 582 768 q 434 817 511 817 l 335 817 l 335 599 m 335 432 l 335 174 l 459 174 q 529 184 501 174 q 575 211 557 193 q 600 253 592 228 q 607 309 607 278 q 600 359 607 336 q 574 398 592 382 q 527 423 556 414 q 454 432 497 432 l 335 432 "},"Ļ":{x_min:125,x_max:696,ha:743,o:"m 125 0 l 125 992 l 335 992 l 335 174 l 696 174 l 696 0 l 125 0 m 268 -288 q 280 -242 274 -268 q 291 -188 286 -216 q 302 -134 297 -161 q 309 -85 307 -107 l 501 -85 l 501 -98 q 452 -198 480 -145 q 388 -307 424 -251 l 268 -307 l 268 -288 "},"Õ":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 m 415 1135 q 381 1119 394 1135 q 361 1069 369 1103 l 260 1069 q 277 1163 264 1123 q 313 1228 291 1202 q 365 1266 335 1253 q 430 1279 394 1279 q 484 1269 458 1279 q 537 1246 511 1259 q 588 1224 563 1234 q 638 1214 614 1214 q 671 1230 659 1214 q 692 1280 684 1246 l 794 1280 q 776 1187 789 1226 q 739 1122 762 1148 q 687 1083 717 1096 q 623 1071 658 1071 q 569 1081 596 1071 q 516 1103 541 1091 q 465 1125 490 1115 q 415 1135 439 1135 "},"№":{x_min:92,x_max:1321,ha:1372,o:"m 807 0 l 577 0 l 272 710 l 262 710 q 271 608 267 659 q 276 516 274 565 q 279 426 279 467 l 279 0 l 92 0 l 92 992 l 321 992 l 625 286 l 636 286 q 627 379 631 332 q 622 468 624 420 q 619 559 619 516 l 619 992 l 807 992 l 807 0 m 901 0 l 901 132 l 1306 132 l 1306 0 l 901 0 m 1321 438 q 1305 333 1321 379 q 1262 256 1290 287 q 1193 207 1233 224 q 1102 191 1152 191 q 1016 207 1056 191 q 948 256 977 224 q 903 333 919 287 q 888 438 888 379 q 903 542 888 497 q 946 619 918 588 q 1015 667 974 651 q 1105 684 1055 684 q 1190 667 1151 684 q 1259 619 1230 651 q 1304 542 1287 588 q 1321 438 1321 497 m 1058 438 q 1069 334 1058 369 q 1104 299 1080 299 q 1139 334 1128 299 q 1150 438 1150 369 q 1139 541 1150 507 q 1104 575 1128 575 q 1069 541 1080 575 q 1058 438 1058 507 "},"χ":{x_min:-33.1875,x_max:789.25,ha:781,o:"m 155 768 q 235 756 202 768 q 291 721 268 745 q 332 661 314 698 q 365 573 349 624 l 412 423 l 581 758 l 789 758 l 501 236 l 625 -87 q 644 -126 634 -111 q 666 -151 654 -141 q 693 -164 678 -160 q 725 -167 707 -167 q 753 -166 738 -167 q 789 -159 767 -164 l 789 -313 q 761 -322 774 -319 q 733 -328 748 -326 q 701 -332 718 -331 q 664 -334 685 -334 q 586 -321 620 -334 q 527 -284 552 -308 q 482 -222 501 -259 q 447 -135 462 -184 l 379 85 l 187 -334 l -33 -334 l 286 270 l 202 511 q 183 555 194 538 q 161 583 173 573 q 136 597 149 593 q 108 601 122 601 q 76 599 95 601 q 36 588 57 596 l 36 747 q 92 761 64 755 q 155 768 120 768 "},"ί":{x_min:109,x_max:509,ha:538,o:"m 315 758 l 315 236 q 337 171 315 192 q 395 150 359 150 q 453 157 425 150 q 509 174 480 164 l 509 20 q 436 -4 479 5 q 342 -14 393 -14 q 250 -2 292 -14 q 176 37 207 9 q 126 115 144 66 q 109 237 109 163 l 109 758 l 315 758 m 140 860 q 152 906 146 880 q 163 960 158 932 q 174 1014 169 987 q 181 1064 178 1041 l 373 1064 l 373 1049 q 324 950 352 1003 q 260 842 296 897 l 140 842 l 140 860 "},"Ζ":{x_min:33,x_max:716,ha:749,o:"m 716 0 l 33 0 l 33 137 l 453 817 l 45 817 l 45 992 l 703 992 l 703 855 l 283 174 l 716 174 l 716 0 "},"Ľ":{x_min:125,x_max:696,ha:743,o:"m 125 0 l 125 992 l 335 992 l 335 174 l 696 174 l 696 0 l 125 0 m 444 788 q 456 835 450 809 q 467 888 462 861 q 478 943 473 916 q 485 993 483 970 l 677 993 l 677 979 q 628 879 656 933 q 564 771 600 825 l 444 771 l 444 788 "},"ť":{x_min:32,x_max:654,ha:575,o:"m 416 152 q 474 158 446 152 q 530 175 501 165 l 530 20 q 457 -4 500 5 q 364 -14 414 -14 q 271 -2 314 -14 q 198 38 229 9 q 148 115 166 67 q 131 237 131 164 l 131 604 l 32 604 l 32 691 l 145 759 l 205 919 l 337 919 l 337 758 l 521 758 l 521 604 l 337 604 l 337 238 q 359 173 337 194 q 416 152 381 152 m 421 865 q 433 912 427 886 q 444 965 439 938 q 455 1020 450 993 q 462 1070 460 1047 l 654 1070 l 654 1056 q 605 956 633 1010 q 541 848 577 902 l 421 848 l 421 865 "},o:{x_min:69,x_max:762,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 "},"Ѕ":{x_min:63.46875,x_max:668,ha:728,o:"m 668 275 q 645 155 668 208 q 578 64 622 102 q 471 6 535 26 q 326 -14 408 -14 q 187 0 254 -14 q 63 45 120 15 l 63 241 q 129 211 96 225 q 196 185 162 197 q 265 167 231 174 q 333 160 299 160 q 392 168 368 160 q 432 190 417 176 q 455 223 448 203 q 462 264 462 242 q 450 314 462 292 q 417 354 438 335 q 365 390 396 372 q 298 427 335 408 q 228 467 267 444 q 155 524 189 490 q 98 607 121 558 q 75 723 75 655 q 97 842 75 790 q 159 931 119 895 q 258 987 200 968 q 388 1006 316 1006 q 458 1001 424 1006 q 526 987 492 996 q 594 965 560 978 q 663 936 627 953 l 596 772 q 539 797 565 786 q 487 816 512 808 q 438 827 462 823 q 389 831 414 831 q 308 802 336 831 q 280 727 280 774 q 288 683 280 702 q 316 646 297 663 q 364 612 334 630 q 435 572 393 594 q 529 517 486 545 q 603 454 572 488 q 651 376 634 420 q 668 275 668 333 "},"�":{x_min:57.328125,x_max:1331.03125,ha:1389,o:"m 693 1055 l 1331 419 l 693 -216 l 57 419 l 693 1055 m 737 249 l 737 280 q 748 331 737 310 q 811 392 759 352 q 904 488 878 443 q 931 592 931 532 q 914 676 931 639 q 866 737 897 712 q 791 775 835 762 q 692 789 747 789 q 632 783 662 789 q 572 769 601 778 q 514 747 542 759 q 464 722 487 736 l 519 601 q 608 640 565 624 q 689 656 651 656 q 753 636 732 656 q 774 584 774 616 q 761 528 774 551 q 692 461 747 505 q 620 384 645 425 q 595 289 595 343 l 595 249 l 737 249 m 577 62 q 601 -4 577 20 q 672 -29 625 -29 q 742 -4 718 -29 q 767 62 767 20 q 742 130 767 105 q 672 155 718 155 q 601 130 625 155 q 577 62 577 105 "},d:{x_min:69,x_max:735,ha:844,o:"m 329 -14 q 224 11 271 -14 q 141 85 176 36 q 88 208 107 134 q 69 377 69 281 q 88 549 69 475 q 142 672 107 622 q 227 747 178 722 q 335 773 276 773 q 402 764 372 773 q 457 741 433 756 q 500 706 481 726 q 534 663 520 687 l 541 663 q 534 716 537 690 q 528 765 530 739 q 526 813 526 791 l 526 1055 l 735 1055 l 735 0 l 575 0 l 534 99 l 526 99 q 493 54 512 75 q 451 18 475 34 q 397 -5 427 3 q 329 -14 367 -14 m 406 152 q 467 164 442 152 q 508 202 492 177 q 531 266 524 228 q 540 355 539 304 l 540 378 q 533 476 540 433 q 511 547 526 519 q 470 591 496 576 q 404 606 444 606 q 310 547 340 606 q 280 376 280 489 q 310 208 280 264 q 406 152 341 152 "},",":{x_min:43,x_max:312,ha:403,o:"m 312 145 q 289 67 302 108 q 259 -15 275 26 q 226 -99 243 -57 q 192 -179 209 -141 l 43 -179 q 63 -92 53 -137 q 82 -3 73 -48 q 98 82 91 40 q 111 161 106 125 l 301 161 l 312 145 "},'"':{x_min:90,x_max:565.21875,ha:656,o:"m 279 992 l 251 634 l 117 634 l 90 992 l 279 992 m 565 992 l 537 634 l 403 634 l 376 992 l 565 992 "},"ľ":{x_min:109,x_max:611,ha:424,o:"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 m 378 851 q 390 898 384 872 q 401 951 396 924 q 412 1006 407 979 q 419 1056 417 1033 l 611 1056 l 611 1042 q 562 942 590 996 q 498 834 534 888 l 378 834 l 378 851 "},"ė":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 296 954 q 304 1003 296 984 q 328 1034 313 1022 q 364 1051 344 1046 q 408 1056 385 1056 q 451 1051 431 1056 q 487 1034 472 1046 q 511 1003 502 1022 q 521 954 521 984 q 511 906 521 926 q 487 875 502 886 q 451 858 472 863 q 408 853 431 853 q 364 858 385 853 q 328 875 344 863 q 304 906 313 886 q 296 954 296 926 "},"Í":{x_min:44.28125,x_max:510,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 160 1071 l 160 1089 q 190 1134 174 1108 q 222 1187 206 1160 q 252 1242 238 1215 q 278 1293 267 1269 l 510 1293 l 510 1278 q 488 1250 502 1266 q 455 1214 474 1233 q 416 1175 437 1195 q 374 1136 395 1155 q 332 1100 352 1117 q 297 1071 313 1083 l 160 1071 "},"Ú":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 387 1071 l 387 1089 q 417 1134 401 1108 q 449 1187 433 1160 q 479 1242 465 1215 q 505 1293 494 1269 l 737 1293 l 737 1278 q 715 1250 729 1266 q 682 1214 701 1233 q 643 1175 664 1195 q 601 1136 622 1155 q 559 1100 579 1117 q 524 1071 540 1083 l 387 1071 "}," ":{x_min:0,x_max:0,ha:278},"Ŷ":{x_min:-.25,x_max:812.25,ha:811,o:"m 406 583 l 585 992 l 812 992 l 511 385 l 511 0 l 301 0 l 301 379 l 0 992 l 227 992 l 406 583 m 548 1071 q 476 1123 513 1093 q 403 1189 438 1152 q 331 1123 366 1152 q 261 1071 296 1093 l 124 1071 l 124 1089 q 163 1134 141 1108 q 206 1187 184 1160 q 248 1242 228 1215 q 284 1293 269 1269 l 525 1293 q 560 1242 540 1269 q 602 1187 580 1215 q 646 1134 624 1160 q 686 1089 669 1108 l 686 1071 l 548 1071 "},"Ý":{x_min:-.25,x_max:812.25,ha:811,o:"m 406 583 l 585 992 l 812 992 l 511 385 l 511 0 l 301 0 l 301 379 l 0 992 l 227 992 l 406 583 m 287 1071 l 287 1089 q 317 1134 301 1108 q 349 1187 333 1160 q 379 1242 365 1215 q 405 1293 394 1269 l 637 1293 l 637 1278 q 615 1250 629 1266 q 582 1214 601 1233 q 543 1175 564 1195 q 501 1136 522 1155 q 459 1100 479 1117 q 424 1071 440 1083 l 287 1071 "},"ŝ":{x_min:66,x_max:633,ha:668,o:"m 614 225 q 592 120 614 165 q 530 45 570 75 q 433 0 490 15 q 305 -14 376 -14 q 236 -11 268 -14 q 176 -3 204 -9 q 121 9 147 1 q 67 30 94 17 l 67 201 q 127 176 95 187 q 189 156 158 164 q 249 143 220 148 q 304 139 279 139 q 351 144 331 139 q 383 158 370 149 q 401 179 395 167 q 407 205 407 191 q 402 230 407 219 q 382 254 398 242 q 337 283 367 267 q 256 322 307 299 q 171 366 207 344 q 112 415 135 388 q 77 477 88 442 q 66 561 66 512 q 86 653 66 614 q 144 720 106 693 q 234 759 181 746 q 351 773 286 773 q 480 757 419 773 q 605 710 541 741 l 543 564 q 445 604 492 588 q 352 619 398 619 q 291 604 310 619 q 272 563 272 589 q 277 539 272 550 q 296 518 282 529 q 336 493 310 506 q 403 461 362 480 q 490 419 451 440 q 556 372 528 398 q 599 310 584 345 q 614 225 614 275 m 495 842 q 423 894 460 864 q 350 960 385 923 q 278 894 313 923 q 208 842 243 864 l 71 842 l 71 860 q 110 905 88 879 q 153 958 131 931 q 195 1013 175 986 q 231 1064 216 1040 l 472 1064 q 507 1013 487 1040 q 549 958 527 986 q 593 905 571 931 q 633 860 616 879 l 633 842 l 495 842 "}," ":{x_min:0,x_max:0,ha:1389},"ą":{x_min:58,x_max:702,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 570 -154 q 585 -196 570 -182 q 624 -209 600 -209 q 667 -205 645 -209 q 702 -197 688 -201 l 702 -318 q 655 -329 680 -324 q 596 -334 630 -334 q 525 -322 557 -334 q 472 -290 494 -310 q 438 -241 450 -269 q 427 -177 427 -212 q 436 -124 427 -148 q 462 -78 445 -99 q 501 -38 479 -57 q 549 0 523 -19 l 670 0 q 596 -81 623 -44 q 570 -154 570 -118 "},"​":{x_min:0,x_max:0,ha:0},"ã":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 289 906 q 255 890 268 906 q 235 840 243 874 l 134 840 q 151 934 138 894 q 187 999 165 973 q 239 1037 209 1024 q 304 1050 268 1050 q 358 1040 332 1050 q 411 1017 385 1030 q 462 995 437 1005 q 512 985 488 985 q 545 1001 533 985 q 566 1051 558 1017 l 668 1051 q 650 958 663 997 q 613 893 636 919 q 561 854 591 867 q 497 842 532 842 q 443 852 470 842 q 390 874 415 862 q 339 896 364 886 q 289 906 313 906 "},"æ":{x_min:58,x_max:1159,ha:1225,o:"m 860 -14 q 698 20 771 -14 q 578 125 625 54 q 521 62 549 89 q 459 19 492 36 q 384 -5 426 2 q 287 -14 342 -14 q 199 0 241 -14 q 126 44 157 15 q 76 119 94 74 q 58 226 58 164 q 135 404 58 346 q 367 467 212 461 l 488 471 l 488 528 q 460 598 488 575 q 384 620 433 620 q 289 606 335 620 q 195 568 242 592 l 128 705 q 254 755 185 737 q 399 774 323 774 q 618 685 544 774 q 832 773 704 773 q 968 750 907 773 q 1071 683 1029 727 q 1136 574 1113 639 q 1159 427 1159 510 l 1159 327 l 694 327 q 708 248 696 283 q 744 189 721 213 q 799 152 767 165 q 873 139 831 139 q 996 154 937 139 q 1116 199 1056 168 l 1116 39 q 1061 15 1089 25 q 1003 -1 1034 5 q 937 -10 972 -7 q 860 -14 902 -14 m 488 351 l 419 348 q 348 337 377 347 q 302 312 320 328 q 277 274 285 296 q 269 226 269 252 q 292 159 269 178 q 353 139 316 139 q 406 149 382 139 q 449 177 431 158 q 477 225 467 197 q 488 289 488 252 l 488 351 m 833 625 q 740 586 777 625 q 698 465 704 548 l 964 465 q 955 529 963 499 q 931 579 947 558 q 890 613 915 601 q 833 625 866 625 "},"ĩ":{x_min:-55,x_max:479,ha:424,o:"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 100 906 q 66 890 79 906 q 46 840 54 874 l -55 840 q -37 934 -50 894 q -1 999 -23 973 q 50 1037 20 1024 q 115 1050 79 1050 q 169 1040 143 1050 q 222 1017 196 1030 q 273 995 248 1005 q 323 985 299 985 q 356 1001 344 985 q 377 1051 369 1017 l 479 1051 q 461 958 474 997 q 424 893 447 919 q 372 854 402 867 q 308 842 343 842 q 254 852 281 842 q 201 874 226 862 q 150 896 175 886 q 100 906 124 906 "},"~":{x_min:60,x_max:705,ha:765,o:"m 358 417 q 313 435 333 428 q 278 447 294 443 q 248 453 262 452 q 218 455 234 455 q 177 449 198 455 q 136 431 156 442 q 96 405 116 420 q 60 373 77 390 l 60 530 q 137 585 94 566 q 233 604 180 604 q 271 602 253 604 q 307 595 288 600 q 350 582 326 591 q 406 560 374 574 q 451 542 432 549 q 487 531 471 535 q 518 525 503 526 q 547 523 532 523 q 587 529 566 523 q 629 547 608 536 q 668 573 649 558 q 705 605 688 588 l 705 448 q 531 375 636 375 q 493 376 511 375 q 457 382 476 378 q 414 395 438 387 q 358 417 390 404 "},"ŀ":{x_min:109,x_max:620,ha:603,o:"m 315 0 l 109 0 l 109 1055 l 315 1055 l 315 0 m 395 471 q 403 520 395 501 q 427 551 412 539 q 463 568 443 563 q 507 573 484 573 q 550 568 530 573 q 586 551 571 563 q 610 520 601 539 q 620 471 620 501 q 610 423 620 443 q 586 392 601 403 q 550 375 571 380 q 507 370 530 370 q 463 375 484 370 q 427 392 443 380 q 403 423 412 403 q 395 471 395 443 "},"Ċ":{x_min:81,x_max:836.296875,ha:885,o:"m 546 831 q 439 807 485 831 q 361 740 392 784 q 313 633 329 696 q 297 492 297 571 q 311 351 297 413 q 356 247 326 289 q 433 183 386 205 q 546 160 481 160 q 667 174 606 160 q 799 213 727 188 l 799 36 q 734 13 766 23 q 669 -1 702 4 q 601 -10 636 -7 q 526 -14 566 -14 q 327 22 411 -14 q 188 125 243 59 q 107 285 133 192 q 81 494 81 379 q 111 700 81 606 q 201 862 142 794 q 346 968 260 930 q 546 1006 433 1006 q 694 987 620 1006 q 836 936 768 968 l 768 765 q 656 811 712 791 q 546 831 600 831 m 424 1183 q 432 1232 424 1213 q 456 1263 441 1251 q 492 1280 472 1275 q 536 1285 513 1285 q 579 1280 559 1285 q 615 1263 600 1275 q 639 1232 630 1251 q 649 1183 649 1213 q 639 1135 649 1155 q 615 1104 630 1115 q 579 1087 600 1092 q 536 1082 559 1082 q 492 1087 513 1082 q 456 1104 472 1092 q 432 1135 441 1115 q 424 1183 424 1155 "},"¡":{x_min:79,x_max:316,ha:397,o:"m 113 410 l 278 410 l 313 -250 l 79 -250 l 113 410 m 316 642 q 306 588 316 610 q 281 552 297 566 q 243 533 265 539 q 196 527 221 527 q 151 533 173 527 q 114 552 130 539 q 88 588 97 566 q 79 642 79 610 q 88 695 79 673 q 114 731 97 717 q 151 751 130 745 q 196 758 173 758 q 243 751 221 758 q 281 731 265 745 q 306 695 297 717 q 316 642 316 673 "},"ẅ":{x_min:-.25,x_max:1120.25,ha:1120,o:"m 688 0 l 629 265 q 622 297 626 276 q 612 346 618 319 q 601 403 607 372 q 589 463 595 433 q 559 613 575 532 l 555 613 q 527 462 539 532 q 515 402 521 432 q 504 344 510 371 q 494 296 499 317 q 487 262 490 274 l 426 0 l 204 0 l 0 758 l 205 758 l 282 422 q 294 359 288 395 q 306 284 301 322 q 317 213 312 246 q 324 160 322 179 l 328 160 q 331 193 329 172 q 337 237 334 214 q 344 286 341 261 q 352 332 348 311 q 359 371 356 354 q 364 394 362 387 l 447 758 l 674 758 l 754 394 q 763 348 757 379 q 774 281 768 317 q 784 212 780 246 q 789 160 788 178 l 793 160 q 800 210 795 176 q 811 281 805 243 q 824 357 817 320 q 837 422 831 395 l 917 758 l 1120 758 l 913 0 l 688 0 m 327 953 q 334 994 327 977 q 354 1022 341 1011 q 384 1039 367 1034 q 421 1045 401 1045 q 458 1039 441 1045 q 488 1022 475 1034 q 509 994 501 1011 q 517 953 517 977 q 509 913 517 930 q 488 885 501 896 q 458 868 475 873 q 421 863 441 863 q 384 868 401 863 q 354 885 367 873 q 334 913 341 896 q 327 953 327 930 m 600 953 q 607 994 600 977 q 627 1022 614 1011 q 658 1039 640 1034 q 696 1045 675 1045 q 732 1039 715 1045 q 763 1022 749 1034 q 784 994 776 1011 q 792 953 792 977 q 784 913 792 930 q 763 885 776 896 q 732 868 749 873 q 696 863 715 863 q 627 885 655 863 q 600 953 600 907 "},"К":{x_min:125,x_max:878.25,ha:878,o:"m 878 0 l 639 0 l 335 502 l 335 0 l 125 0 l 125 992 l 335 992 l 335 511 l 635 992 l 859 992 l 552 515 l 878 0 "},"Γ":{x_min:125,x_max:696,ha:724,o:"m 696 992 l 696 817 l 335 817 l 335 0 l 125 0 l 125 992 l 696 992 "},P:{x_min:125,x_max:769,ha:831,o:"m 335 526 l 377 526 q 513 561 467 526 q 558 674 558 596 q 517 782 558 747 q 389 817 476 817 l 335 817 l 335 526 m 769 682 q 749 557 769 616 q 684 451 729 497 q 565 379 639 406 q 383 352 492 352 l 335 352 l 335 0 l 125 0 l 125 992 l 400 992 q 565 970 496 992 q 680 909 635 949 q 747 812 725 869 q 769 682 769 754 "},"%":{x_min:43,x_max:1181,ha:1224,o:"m 213 695 q 229 566 213 608 q 278 523 244 523 q 327 565 311 523 q 343 695 343 607 q 278 865 343 865 q 229 823 244 865 q 213 695 213 781 m 514 695 q 500 564 514 622 q 457 465 486 505 q 383 404 427 425 q 276 383 338 383 q 175 404 219 383 q 102 465 131 425 q 57 564 72 505 q 43 695 43 622 q 56 826 43 769 q 98 924 70 884 q 171 984 127 963 q 276 1006 215 1006 q 379 984 335 1006 q 453 924 423 963 q 498 826 483 884 q 514 695 514 769 m 967 992 l 416 0 l 254 0 l 805 992 l 967 992 m 880 299 q 896 170 880 213 q 945 128 911 128 q 994 170 978 128 q 1010 299 1010 212 q 945 469 1010 469 q 896 427 911 469 q 880 299 880 386 m 1181 300 q 1167 168 1181 226 q 1123 70 1153 110 q 1050 9 1094 30 q 943 -12 1005 -12 q 842 9 885 -12 q 769 70 798 30 q 724 168 739 110 q 710 300 710 226 q 723 430 710 373 q 765 528 737 488 q 838 588 794 567 q 943 610 882 610 q 1046 588 1001 610 q 1120 528 1090 567 q 1165 430 1150 488 q 1181 300 1181 373 "},"ϖ":{x_min:35.03125,x_max:1310.578125,ha:1346,o:"m 886 -14 q 810 -3 843 -14 q 751 25 777 6 q 708 72 726 45 q 677 133 690 100 l 670 133 q 640 72 658 100 q 596 25 621 45 q 538 -3 571 6 q 462 -14 505 -14 q 334 9 389 -14 q 243 79 279 33 q 188 190 206 124 q 170 341 170 256 q 181 474 170 407 q 212 604 193 541 l 35 604 l 35 689 l 148 758 l 1310 758 l 1310 604 l 1135 604 q 1166 474 1154 541 q 1179 341 1179 407 q 1160 190 1179 256 q 1105 79 1141 124 q 1013 9 1068 33 q 886 -14 958 -14 m 984 348 q 973 474 984 409 q 944 604 963 540 l 403 604 q 374 477 384 541 q 364 350 364 413 q 392 200 364 249 q 481 152 420 152 q 527 163 509 152 q 557 195 546 174 q 572 248 567 217 q 577 320 577 279 l 577 412 l 771 412 l 771 320 q 776 248 771 279 q 791 195 780 217 q 821 163 802 174 q 867 152 839 152 q 956 200 929 152 q 984 348 984 249 "},_:{x_min:-3,x_max:574,ha:571,o:"m 574 -219 l -3 -219 l -3 -125 l 574 -125 l 574 -219 "},"ñ":{x_min:109,x_max:767,ha:871,o:"m 767 0 l 560 0 l 560 442 q 535 565 560 524 q 456 606 510 606 q 388 590 415 606 q 345 542 361 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 346 711 322 690 q 397 746 369 732 q 456 766 425 760 q 520 773 487 773 q 621 757 575 773 q 699 707 666 741 q 749 620 731 673 q 767 494 767 568 l 767 0 m 324 906 q 290 890 303 906 q 270 840 278 874 l 169 840 q 186 934 173 894 q 222 999 200 973 q 274 1037 244 1024 q 339 1050 303 1050 q 393 1040 367 1050 q 446 1017 420 1030 q 497 995 472 1005 q 547 985 523 985 q 580 1001 568 985 q 601 1051 593 1017 l 703 1051 q 685 958 698 997 q 648 893 671 919 q 596 854 626 867 q 532 842 567 842 q 478 852 505 842 q 425 874 450 862 q 374 896 399 886 q 324 906 348 906 "},"Ŕ":{x_min:125,x_max:875.25,ha:875,o:"m 335 545 l 393 545 q 520 581 481 545 q 558 685 558 616 q 517 786 558 756 q 389 817 476 817 l 335 817 l 335 545 m 335 379 l 335 0 l 125 0 l 125 992 l 396 992 q 678 918 587 992 q 769 694 769 844 q 755 601 769 642 q 719 527 741 559 q 666 471 696 495 q 604 430 637 447 q 739 215 679 310 q 789 136 765 175 q 832 67 813 98 q 863 18 851 37 l 875 0 l 641 0 l 427 379 l 335 379 m 310 1071 l 310 1089 q 340 1134 324 1108 q 372 1187 356 1160 q 402 1242 388 1215 q 428 1293 417 1269 l 660 1293 l 660 1278 q 638 1250 652 1266 q 605 1214 624 1233 q 566 1175 587 1195 q 524 1136 545 1155 q 482 1100 502 1117 q 447 1071 463 1083 l 310 1071 "},"‚":{x_min:43,x_max:312,ha:403,o:"m 312 145 q 289 67 302 108 q 259 -15 275 26 q 226 -99 243 -57 q 192 -179 209 -141 l 43 -179 q 63 -92 53 -137 q 82 -3 73 -48 q 98 82 91 40 q 111 161 106 125 l 301 161 l 312 145 "},"⅞":{x_min:45,x_max:1145,ha:1224,o:"m 109 397 l 336 859 l 45 859 l 45 992 l 498 992 l 498 882 l 270 397 l 109 397 m 899 992 l 348 0 l 186 0 l 737 992 l 899 992 m 913 607 q 995 597 957 607 q 1062 569 1033 588 q 1106 523 1090 551 q 1123 458 1123 495 q 1115 413 1123 434 q 1094 376 1108 393 q 1064 347 1081 360 q 1026 323 1046 334 q 1070 295 1049 309 q 1108 263 1091 281 q 1134 221 1124 244 q 1145 169 1145 198 q 1128 95 1145 129 q 1081 36 1111 61 q 1008 -2 1050 11 q 913 -16 965 -16 q 813 -2 856 -16 q 740 34 770 10 q 696 92 711 58 q 681 165 681 126 q 689 218 681 195 q 713 259 698 241 q 747 291 727 277 q 787 317 766 305 q 754 345 769 330 q 726 376 738 359 q 708 414 714 393 q 702 458 702 434 q 718 523 702 495 q 764 569 735 550 q 831 597 793 587 q 913 607 870 607 m 828 169 q 849 114 828 135 q 911 92 870 92 q 975 114 953 92 q 997 169 997 135 q 974 223 997 201 q 910 261 951 246 l 901 264 q 847 226 866 248 q 828 169 828 203 m 911 498 q 865 482 881 498 q 849 447 849 467 q 868 403 849 420 q 913 373 886 387 q 937 386 926 379 q 957 402 949 393 q 970 422 965 411 q 975 447 975 433 q 960 482 975 467 q 911 498 945 498 "},"Æ":{x_min:0,x_max:1198,ha:1280,o:"m 1198 0 l 628 0 l 628 235 l 315 235 l 213 0 l 0 0 l 444 992 l 1198 992 l 1198 817 l 838 817 l 838 602 l 1173 602 l 1173 427 l 838 427 l 838 174 l 1198 174 l 1198 0 m 392 410 l 628 410 l 628 810 l 562 810 l 392 410 "},"₣":{x_min:24,x_max:693,ha:765,o:"m 335 299 l 518 299 l 518 178 l 335 178 l 335 0 l 125 0 l 125 178 l 24 178 l 24 299 l 125 299 l 125 992 l 693 992 l 693 822 l 335 822 l 335 592 l 667 592 l 667 422 l 335 422 l 335 299 "},"Ū":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 287 1214 l 705 1214 l 705 1071 l 287 1071 l 287 1214 "},"ы":{x_min:109,x_max:1031,ha:1139,o:"m 315 467 l 407 467 q 644 411 567 467 q 721 242 721 356 q 703 142 721 187 q 647 65 685 97 q 550 17 609 34 q 405 0 490 0 l 109 0 l 109 758 l 315 758 l 315 467 m 514 239 q 484 300 514 281 q 395 319 454 319 l 315 319 l 315 147 l 397 147 q 444 152 423 147 q 481 168 466 156 q 505 196 496 179 q 514 239 514 214 m 1031 0 l 824 0 l 824 758 l 1031 758 l 1031 0 "},"ѓ":{x_min:109,x_max:590,ha:623,o:"m 590 758 l 590 604 l 315 604 l 315 0 l 109 0 l 109 758 l 590 758 m 231 842 l 231 860 q 261 905 245 879 q 293 958 277 931 q 323 1013 309 986 q 349 1064 338 1040 l 581 1064 l 581 1049 q 559 1021 573 1037 q 526 985 545 1004 q 487 946 508 966 q 445 907 466 926 q 403 871 423 888 q 368 842 384 854 l 231 842 "},"Œ":{x_min:81,x_max:1228,ha:1310,o:"m 1228 0 l 657 0 q 594 -10 627 -6 q 525 -14 561 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 412 1007 q 596 1003 563 1007 q 660 992 629 999 l 1228 992 l 1228 817 l 868 817 l 868 602 l 1203 602 l 1203 427 l 868 427 l 868 174 l 1228 174 l 1228 0 m 526 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 599 167 566 160 q 658 187 632 174 l 658 804 q 600 824 632 817 q 526 832 567 832 "},"΅":{x_min:126,x_max:675,ha:802,o:"m 126 953 q 148 1023 126 1001 q 206 1044 170 1044 q 265 1023 242 1044 q 288 953 288 1001 q 265 885 288 907 q 206 863 242 863 q 148 885 170 863 q 126 953 126 907 m 512 953 q 534 1023 512 1001 q 593 1044 556 1044 q 652 1023 629 1044 q 675 953 675 1001 q 652 885 675 907 q 593 863 629 863 q 534 885 556 863 q 512 953 512 907 m 330 959 q 342 1006 336 980 q 354 1059 348 1032 q 364 1114 360 1087 q 372 1164 369 1141 l 550 1164 l 550 1150 q 495 1050 528 1104 q 423 942 462 996 l 330 942 l 330 959 "},"Ą":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 712 -154 q 727 -196 712 -182 q 766 -209 742 -209 q 809 -205 787 -209 q 844 -197 830 -201 l 844 -318 q 797 -329 822 -324 q 738 -334 772 -334 q 667 -322 699 -334 q 614 -290 636 -310 q 580 -241 592 -269 q 569 -177 569 -212 q 578 -124 569 -148 q 604 -78 587 -99 q 643 -38 621 -57 q 691 0 665 -19 l 812 0 q 738 -81 765 -44 q 712 -154 712 -118 "},"Њ":{x_min:125,x_max:1274,ha:1336,o:"m 1274 310 q 1251 179 1274 237 q 1183 81 1229 121 q 1066 21 1137 42 q 896 0 994 0 l 632 0 l 632 429 l 335 429 l 335 0 l 125 0 l 125 992 l 335 992 l 335 604 l 632 604 l 632 992 l 842 992 l 842 612 l 915 612 q 1075 589 1008 612 q 1187 527 1142 567 q 1252 431 1231 487 q 1274 310 1274 376 m 842 174 l 899 174 q 967 182 937 174 q 1019 205 998 189 q 1052 247 1041 221 q 1063 311 1063 274 q 1051 375 1063 350 q 1015 414 1038 400 q 959 434 992 429 q 885 439 926 439 l 842 439 l 842 174 "},"›":{x_min:55,x_max:413,ha:469,o:"m 413 370 l 203 63 l 55 143 l 202 380 l 55 616 l 203 697 l 413 388 l 413 370 "},"ћ":{x_min:3,x_max:767,ha:871,o:"m 767 0 l 560 0 l 560 400 q 534 522 560 482 q 456 563 509 563 q 389 547 416 563 q 345 498 362 530 q 322 420 329 467 q 315 314 315 374 l 315 0 l 109 0 l 109 808 l 3 808 l 3 946 l 109 946 l 109 1055 l 315 1055 l 315 946 l 529 946 l 529 808 l 315 808 l 315 796 q 314 736 315 768 q 311 679 313 705 l 306 618 l 317 618 q 402 703 350 677 q 518 730 453 730 q 620 714 575 730 q 699 664 666 698 q 749 577 731 630 q 767 452 767 525 l 767 0 "},"<":{x_min:60,x_max:705,ha:765,o:"m 705 138 l 60 434 l 60 531 l 705 868 l 705 705 l 268 490 l 705 300 l 705 138 "},"¬":{x_min:60,x_max:705,ha:765,o:"m 705 168 l 556 168 l 556 415 l 60 415 l 60 564 l 705 564 l 705 168 "},t:{x_min:32,x_max:530,ha:575,o:"m 416 152 q 474 158 446 152 q 530 175 501 165 l 530 20 q 457 -4 500 5 q 364 -14 414 -14 q 271 -2 314 -14 q 198 38 229 9 q 148 115 166 67 q 131 237 131 164 l 131 604 l 32 604 l 32 691 l 145 759 l 205 919 l 337 919 l 337 758 l 521 758 l 521 604 l 337 604 l 337 238 q 359 173 337 194 q 416 152 381 152 "},"Ц":{x_min:125,x_max:1002,ha:1030,o:"m 855 166 l 1002 147 l 1002 -289 l 796 -289 l 796 0 l 125 0 l 125 992 l 335 992 l 335 174 l 644 174 l 644 992 l 855 992 l 855 166 "},"ù":{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 395 842 q 340 889 372 860 q 276 946 307 917 q 219 1004 245 976 q 183 1049 193 1031 l 183 1064 l 414 1064 q 440 1013 425 1040 q 470 958 454 986 q 502 905 486 931 q 533 860 518 879 l 533 842 l 395 842 "},"ï":{x_min:-21,x_max:444,ha:424,o:"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m -21 953 q -13 994 -21 977 q 6 1022 -6 1011 q 36 1039 19 1034 q 73 1045 53 1045 q 110 1039 93 1045 q 140 1022 127 1034 q 161 994 153 1011 q 169 953 169 977 q 161 913 169 930 q 140 885 153 896 q 110 868 127 873 q 73 863 93 863 q 36 868 53 863 q 6 885 19 873 q -13 913 -6 896 q -21 953 -21 930 m 252 953 q 259 994 252 977 q 279 1022 266 1011 q 310 1039 292 1034 q 348 1045 327 1045 q 384 1039 367 1045 q 415 1022 401 1034 q 436 994 428 1011 q 444 953 444 977 q 436 913 444 930 q 415 885 428 896 q 384 868 401 873 q 348 863 367 863 q 279 885 307 863 q 252 953 252 907 "},"Ф":{x_min:62,x_max:1077,ha:1139,o:"m 663 305 l 671 305 q 763 321 724 305 q 828 366 802 337 q 867 433 854 394 q 881 516 881 471 q 869 592 881 556 q 834 656 858 629 q 774 700 810 684 q 688 717 738 717 l 663 717 l 663 305 m 476 -14 l 476 139 l 462 139 q 328 155 387 139 q 225 199 269 171 q 149 264 181 227 q 99 343 118 301 q 70 429 79 385 q 62 514 62 472 q 84 649 62 583 q 153 768 106 716 q 272 852 200 820 q 442 884 343 884 l 476 884 l 476 1006 l 663 1006 l 663 884 l 696 884 q 867 852 795 884 q 985 768 938 820 q 1054 649 1032 716 q 1077 514 1077 583 q 1068 429 1077 472 q 1039 343 1059 385 q 989 264 1020 301 q 913 199 958 227 q 810 155 869 171 q 676 139 751 139 l 663 139 l 663 -14 l 476 -14 m 476 717 l 451 717 q 365 700 401 717 q 305 656 328 684 q 269 592 281 629 q 258 516 258 556 q 271 433 258 471 q 310 366 284 394 q 375 321 336 337 q 467 305 414 305 l 476 305 l 476 717 "},"Ò":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 m 495 1071 q 440 1118 472 1089 q 376 1175 407 1146 q 319 1233 345 1205 q 283 1278 293 1260 l 283 1293 l 514 1293 q 540 1242 525 1269 q 570 1187 554 1215 q 602 1134 586 1160 q 633 1089 618 1108 l 633 1071 l 495 1071 "},I:{x_min:44.28125,x_max:495.96875,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 "},"˝":{x_min:106,x_max:697,ha:802,o:"m 106 842 l 106 860 q 136 905 120 879 q 168 958 152 931 q 198 1013 184 986 q 223 1064 213 1040 l 428 1064 l 428 1049 q 406 1021 420 1037 q 373 985 392 1004 q 334 946 355 966 q 291 907 312 926 q 250 871 270 888 q 215 842 230 854 l 106 842 m 375 842 l 375 860 q 405 905 389 879 q 437 958 421 931 q 467 1013 453 986 q 492 1064 482 1040 l 697 1064 l 697 1049 q 675 1021 689 1037 q 642 985 661 1004 q 603 946 624 966 q 561 907 582 926 q 520 871 539 888 q 484 842 500 854 l 375 842 "},"·":{x_min:79,x_max:316,ha:396,o:"m 79 490 q 88 544 79 522 q 113 580 97 566 q 151 599 129 593 q 198 606 173 606 q 243 599 221 606 q 280 580 264 593 q 306 544 297 566 q 316 490 316 522 q 306 437 316 459 q 280 401 297 415 q 243 381 264 387 q 198 375 221 375 q 151 381 173 375 q 113 401 129 387 q 88 437 97 415 q 79 490 79 459 "},"¿":{x_min:45,x_max:628,ha:638,o:"m 465 410 l 465 359 q 457 297 465 325 q 436 243 450 269 q 398 194 421 218 q 342 145 375 171 q 294 105 314 122 q 262 70 274 87 q 245 34 250 53 q 239 -9 239 15 q 266 -73 239 -48 q 345 -98 292 -98 q 446 -78 392 -98 q 558 -30 501 -58 l 628 -180 q 564 -213 598 -197 q 492 -239 529 -228 q 417 -258 455 -251 q 343 -265 379 -265 q 218 -248 274 -265 q 125 -200 163 -231 q 65 -123 86 -168 q 45 -19 45 -77 q 54 56 45 22 q 82 118 63 89 q 129 174 101 147 q 194 231 157 201 q 240 270 222 253 q 268 301 258 286 q 282 332 278 316 q 285 370 285 349 l 285 410 l 465 410 m 487 642 q 477 588 487 610 q 452 552 468 566 q 414 533 436 539 q 367 527 392 527 q 322 533 344 527 q 285 552 301 539 q 259 588 268 566 q 250 642 250 610 q 259 695 250 673 q 285 731 268 717 q 322 751 301 745 q 367 758 344 758 q 414 751 392 758 q 452 731 436 745 q 477 695 468 717 q 487 642 487 673 "},"ſ":{x_min:109,x_max:537,ha:504,o:"m 389 896 q 332 870 349 896 q 315 804 315 844 l 315 0 l 109 0 l 109 814 q 126 934 109 886 q 176 1010 144 982 q 255 1051 209 1039 q 358 1063 301 1063 q 464 1053 421 1063 q 537 1030 507 1043 l 488 877 q 444 890 467 884 q 389 896 421 896 "},"Ђ":{x_min:28,x_max:989,ha:1063,o:"m 713 -12 q 642 -6 677 -12 q 575 13 606 0 l 575 184 q 636 162 606 170 q 691 154 666 154 q 724 157 708 154 q 752 171 740 160 q 771 202 764 182 q 778 260 778 223 l 778 346 q 755 431 778 407 q 677 456 731 456 l 487 456 l 487 0 l 277 0 l 277 817 l 28 817 l 28 992 l 728 992 l 728 817 l 487 817 l 487 631 l 692 631 q 817 613 762 631 q 910 560 872 595 q 969 476 949 526 q 989 363 989 426 l 989 276 q 919 61 989 134 q 713 -12 850 -12 "},"ű":{x_min:104,x_max:804,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 213 842 l 213 860 q 243 905 227 879 q 275 958 259 931 q 305 1013 291 986 q 330 1064 320 1040 l 535 1064 l 535 1049 q 513 1021 527 1037 q 480 985 499 1004 q 441 946 462 966 q 398 907 419 926 q 357 871 377 888 q 322 842 337 854 l 213 842 m 482 842 l 482 860 q 512 905 496 879 q 544 958 528 931 q 574 1013 560 986 q 599 1064 589 1040 l 804 1064 l 804 1049 q 782 1021 796 1037 q 749 985 768 1004 q 710 946 731 966 q 668 907 689 926 q 627 871 646 888 q 591 842 607 854 l 482 842 "},"Ǽ":{x_min:0,x_max:1198,ha:1280,o:"m 1198 0 l 628 0 l 628 235 l 315 235 l 213 0 l 0 0 l 444 992 l 1198 992 l 1198 817 l 838 817 l 838 602 l 1173 602 l 1173 427 l 838 427 l 838 174 l 1198 174 l 1198 0 m 392 410 l 628 410 l 628 810 l 562 810 l 392 410 m 666 1071 l 666 1089 q 696 1134 680 1108 q 728 1187 712 1160 q 758 1242 744 1215 q 784 1293 773 1269 l 1016 1293 l 1016 1278 q 994 1250 1008 1266 q 961 1214 980 1233 q 922 1175 943 1195 q 880 1136 901 1155 q 838 1100 858 1117 q 803 1071 819 1083 l 666 1071 "},"φ":{x_min:69,x_max:1003,ha:1072,o:"m 808 397 q 802 481 808 442 q 783 551 796 521 q 748 599 770 582 q 696 616 727 616 q 642 589 661 616 q 622 497 622 563 l 622 145 q 699 169 665 149 q 758 223 734 190 q 795 300 782 256 q 808 397 808 345 m 428 -334 l 428 -8 q 285 26 351 0 q 172 98 220 52 q 96 213 124 145 q 69 376 69 282 q 80 489 69 435 q 112 592 91 543 q 162 687 133 641 q 226 775 191 732 l 375 677 q 328 605 349 641 q 293 533 307 570 q 271 456 278 496 q 263 370 263 416 q 276 277 263 316 q 311 211 289 238 q 363 168 333 184 q 428 145 393 152 l 428 497 q 447 615 428 564 q 501 700 467 666 q 583 752 536 735 q 688 770 631 770 q 819 744 760 770 q 918 671 877 719 q 981 555 959 623 q 1003 401 1003 487 q 971 230 1003 304 q 888 106 940 157 q 766 27 835 56 q 622 -8 697 0 l 622 -334 l 428 -334 "},";":{x_min:43,x_max:316,ha:403,o:"m 301 161 l 312 145 q 289 67 302 108 q 259 -15 275 26 q 226 -99 243 -57 q 192 -179 209 -141 l 43 -179 q 63 -92 53 -137 q 82 -3 73 -48 q 98 82 91 40 q 111 161 106 125 l 301 161 m 79 657 q 88 711 79 689 q 113 747 97 733 q 151 766 129 760 q 198 773 173 773 q 243 766 221 773 q 280 747 264 760 q 306 711 297 733 q 316 657 316 689 q 306 604 316 626 q 280 568 297 582 q 243 548 264 554 q 198 542 221 542 q 151 548 173 542 q 113 568 129 554 q 88 604 97 582 q 79 657 79 626 "},"Ș":{x_min:63.46875,x_max:668,ha:728,o:"m 668 275 q 645 155 668 208 q 578 64 622 102 q 471 6 535 26 q 326 -14 408 -14 q 187 0 254 -14 q 63 45 120 15 l 63 241 q 129 211 96 225 q 196 185 162 197 q 265 167 231 174 q 333 160 299 160 q 392 168 368 160 q 432 190 417 176 q 455 223 448 203 q 462 264 462 242 q 450 314 462 292 q 417 354 438 335 q 365 390 396 372 q 298 427 335 408 q 228 467 267 444 q 155 524 189 490 q 98 607 121 558 q 75 723 75 655 q 97 842 75 790 q 159 931 119 895 q 258 987 200 968 q 388 1006 316 1006 q 458 1001 424 1006 q 526 987 492 996 q 594 965 560 978 q 663 936 627 953 l 596 772 q 539 797 565 786 q 487 816 512 808 q 438 827 462 823 q 389 831 414 831 q 308 802 336 831 q 280 727 280 774 q 288 683 280 702 q 316 646 297 663 q 364 612 334 630 q 435 572 393 594 q 529 517 486 545 q 603 454 572 488 q 651 376 634 420 q 668 275 668 333 m 238 -288 q 250 -242 244 -268 q 261 -188 256 -216 q 272 -134 267 -161 q 279 -85 277 -107 l 471 -85 l 471 -98 q 422 -198 450 -145 q 358 -307 394 -251 l 238 -307 l 238 -288 "},"Ġ":{x_min:81,x_max:895,ha:1006,o:"m 502 557 l 895 557 l 895 42 q 815 18 855 29 q 732 1 775 8 q 642 -9 689 -5 q 542 -14 595 -14 q 345 18 431 -14 q 200 116 259 51 q 111 276 142 181 q 81 497 81 372 q 114 708 81 613 q 214 868 148 802 q 377 970 281 934 q 599 1006 474 1006 q 754 989 678 1006 q 893 944 830 972 l 823 776 q 719 815 777 799 q 597 831 661 831 q 473 806 528 831 q 378 738 418 782 q 318 632 339 694 q 297 492 297 569 q 311 358 297 419 q 357 253 326 298 q 438 185 388 209 q 555 160 487 160 q 631 165 600 160 q 689 174 662 169 l 689 382 l 502 382 l 502 557 m 437 1183 q 445 1232 437 1213 q 469 1263 454 1251 q 505 1280 485 1275 q 549 1285 526 1285 q 592 1280 572 1285 q 628 1263 613 1275 q 652 1232 643 1251 q 662 1183 662 1213 q 652 1135 662 1155 q 628 1104 643 1115 q 592 1087 613 1092 q 549 1082 572 1082 q 505 1087 526 1082 q 469 1104 485 1092 q 445 1135 454 1115 q 437 1183 437 1155 "},n:{x_min:109,x_max:767,ha:871,o:"m 767 0 l 560 0 l 560 442 q 535 565 560 524 q 456 606 510 606 q 388 590 415 606 q 345 542 361 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 346 711 322 690 q 397 746 369 732 q 456 766 425 760 q 520 773 487 773 q 621 757 575 773 q 699 707 666 741 q 749 620 731 673 q 767 494 767 568 l 767 0 "},"ά":{x_min:69,x_max:834,ha:864,o:"m 399 152 q 457 165 433 152 q 495 204 480 177 q 516 272 509 231 q 524 369 523 312 l 524 377 q 518 475 524 432 q 497 546 512 517 q 458 589 482 575 q 397 604 434 604 q 308 546 337 604 q 280 375 280 487 q 309 207 280 263 q 399 152 337 152 m 332 -14 q 224 11 273 -14 q 141 85 175 36 q 87 207 106 134 q 69 376 69 280 q 88 546 69 473 q 143 670 107 620 q 231 745 179 720 q 346 771 282 771 q 411 763 382 771 q 464 742 440 756 q 506 706 487 728 q 540 656 525 685 l 550 656 q 569 708 557 680 q 600 758 581 736 l 784 758 q 768 702 776 735 q 752 628 759 669 q 740 542 745 588 q 736 451 736 497 l 736 239 q 740 201 736 216 q 753 176 745 185 q 771 163 761 167 q 793 159 781 159 q 815 162 802 159 q 834 166 828 164 l 834 3 q 816 -2 828 0 q 790 -8 805 -5 q 761 -12 776 -10 q 734 -14 747 -14 q 667 -8 697 -14 q 614 10 637 -3 q 573 45 590 23 q 542 100 555 67 l 529 100 q 497 56 516 77 q 455 19 478 35 q 401 -5 431 3 q 332 -14 370 -14 m 367 860 q 379 906 373 880 q 390 960 385 932 q 401 1014 396 987 q 408 1064 405 1041 l 600 1064 l 600 1049 q 551 950 579 1003 q 487 842 523 897 l 367 842 l 367 860 "},"ϊ":{x_min:3,x_max:509,ha:538,o:"m 315 758 l 315 236 q 337 171 315 192 q 395 150 359 150 q 453 157 425 150 q 509 174 480 164 l 509 20 q 436 -4 479 5 q 342 -14 393 -14 q 250 -2 292 -14 q 176 37 207 9 q 126 115 144 66 q 109 237 109 163 l 109 758 l 315 758 m 3 953 q 10 994 3 977 q 30 1022 17 1011 q 60 1039 43 1034 q 97 1045 77 1045 q 134 1039 117 1045 q 164 1022 151 1034 q 185 994 177 1011 q 193 953 193 977 q 185 913 193 930 q 164 885 177 896 q 134 868 151 873 q 97 863 117 863 q 60 868 77 863 q 30 885 43 873 q 10 913 17 896 q 3 953 3 930 m 276 953 q 283 994 276 977 q 303 1022 290 1011 q 334 1039 316 1034 q 372 1045 351 1045 q 408 1039 391 1045 q 439 1022 425 1034 q 460 994 452 1011 q 468 953 468 977 q 460 913 468 930 q 439 885 452 896 q 408 868 425 873 q 372 863 391 863 q 303 885 331 863 q 276 953 276 907 "},"\ufeff":{x_min:0,x_max:0,ha:0},"ģ":{x_min:14,x_max:735.140625,ha:766,o:"m 735 757 l 735 644 l 624 610 q 643 562 638 587 q 649 509 649 537 q 630 403 649 451 q 576 322 612 356 q 486 269 540 288 q 360 251 432 251 q 326 252 345 251 q 299 256 308 254 q 279 232 286 244 q 271 201 271 219 q 280 179 271 187 q 303 165 289 170 q 336 158 317 160 q 375 157 355 157 l 493 157 q 591 144 547 157 q 664 106 634 131 q 710 40 694 80 q 727 -54 727 0 q 701 -170 727 -118 q 624 -258 675 -222 q 497 -314 573 -295 q 322 -334 421 -334 q 187 -319 244 -334 q 91 -277 129 -304 q 33 -211 52 -249 q 14 -123 14 -172 q 28 -51 14 -81 q 66 0 42 -20 q 120 36 90 22 q 182 57 150 49 q 154 74 168 63 q 129 99 140 85 q 111 131 118 113 q 104 167 104 148 q 110 206 104 189 q 128 239 116 224 q 159 268 141 254 q 200 296 177 282 q 105 379 140 322 q 71 513 71 436 q 89 622 71 574 q 145 704 108 670 q 236 755 182 737 q 360 773 290 773 q 391 771 374 773 q 424 767 408 769 q 455 762 441 764 q 477 757 469 759 l 735 757 m 193 -107 q 200 -141 193 -125 q 224 -169 207 -157 q 266 -189 240 -181 q 331 -196 293 -196 q 490 -166 437 -196 q 543 -85 543 -135 q 510 -27 543 -42 q 408 -13 477 -13 l 312 -13 q 273 -17 294 -13 q 234 -33 252 -22 q 205 -62 217 -44 q 193 -107 193 -80 m 265 510 q 289 415 265 448 q 360 381 312 381 q 432 415 410 381 q 454 510 454 448 q 432 607 454 571 q 360 643 410 643 q 265 510 265 643 m 497 1045 q 484 999 490 1025 q 473 945 478 973 q 462 891 467 918 q 455 842 457 864 l 264 842 l 264 856 q 312 955 284 902 q 376 1064 340 1008 l 497 1064 l 497 1045 "},"∂":{x_min:40,x_max:761,ha:807,o:"m 761 623 q 749 477 761 552 q 715 331 738 402 q 656 198 691 260 q 571 88 620 135 q 459 13 522 40 q 318 -14 396 -14 q 183 9 236 -14 q 97 73 129 33 q 52 164 65 112 q 40 270 40 215 q 48 359 40 311 q 74 456 56 408 q 122 549 93 504 q 194 628 151 594 q 292 683 236 662 q 420 704 348 704 q 549 676 492 704 q 508 798 541 756 q 412 839 474 839 q 367 834 391 839 q 317 818 343 828 q 264 794 291 808 q 212 761 237 779 l 212 944 q 323 990 266 974 q 439 1006 380 1006 q 594 974 532 1006 q 692 889 656 942 q 745 767 729 836 q 761 623 761 698 m 321 152 q 395 179 361 152 q 457 251 429 206 q 504 356 484 297 q 535 480 524 415 q 497 533 525 515 q 433 550 470 550 q 375 536 401 550 q 329 499 350 522 q 294 446 309 476 q 270 383 280 416 q 256 317 260 350 q 251 255 251 284 q 267 179 251 206 q 321 152 283 152 "},"κ":{x_min:109,x_max:819,ha:819,o:"m 307 383 l 393 515 l 580 758 l 801 758 l 527 421 l 819 0 l 585 0 l 396 283 l 315 227 l 315 0 l 109 0 l 109 758 l 315 758 l 315 559 q 314 501 315 532 q 310 444 312 470 q 305 383 307 412 l 307 383 "},"‡":{x_min:84,x_max:648,ha:730,o:"m 423 378 l 648 399 l 648 234 l 423 256 l 460 0 l 271 0 l 309 256 l 84 234 l 84 399 l 309 378 l 277 533 l 309 677 l 84 656 l 84 820 l 309 800 l 271 1055 l 460 1055 l 423 800 l 648 820 l 648 656 l 423 677 l 454 533 l 423 378 "},"ň":{x_min:109,x_max:767,ha:871,o:"m 767 0 l 560 0 l 560 442 q 535 565 560 524 q 456 606 510 606 q 388 590 415 606 q 345 542 361 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 346 711 322 690 q 397 746 369 732 q 456 766 425 760 q 520 773 487 773 q 621 757 575 773 q 699 707 666 741 q 749 620 731 673 q 767 494 767 568 l 767 0 m 717 1045 q 677 1000 700 1026 q 633 947 655 974 q 591 892 611 919 q 556 842 571 865 l 315 842 q 279 892 300 865 q 237 947 259 919 q 194 1000 215 974 q 155 1045 172 1026 l 155 1064 l 292 1064 q 362 1011 327 1041 q 434 945 397 982 q 507 1011 469 982 q 579 1064 544 1041 l 717 1064 l 717 1045 "},"√":{x_min:25,x_max:865,ha:762,o:"m 450 -10 l 326 -10 l 144 491 l 25 491 l 25 635 l 245 635 l 384 249 l 716 1192 l 865 1192 l 450 -10 "},"ę":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 536 -140 q 551 -182 536 -168 q 590 -195 566 -195 q 633 -191 611 -195 q 668 -183 654 -187 l 668 -304 q 621 -315 646 -310 q 562 -320 596 -320 q 491 -308 523 -320 q 438 -276 460 -296 q 404 -227 416 -255 q 393 -163 393 -198 q 402 -110 393 -134 q 428 -64 411 -85 q 467 -24 445 -43 q 515 14 489 -5 l 636 14 q 562 -67 589 -30 q 536 -140 536 -104 "},"į":{x_min:73,x_max:348,ha:424,o:"m 100 953 q 109 1002 100 983 q 133 1033 117 1021 q 169 1050 148 1045 q 212 1055 189 1055 q 256 1050 235 1055 q 291 1033 276 1045 q 316 1002 307 1021 q 325 953 325 983 q 316 905 325 925 q 291 874 307 885 q 256 857 276 862 q 212 852 235 852 q 169 857 189 852 q 133 874 148 862 q 109 905 117 885 q 100 953 100 925 m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 216 -154 q 231 -196 216 -182 q 270 -209 246 -209 q 313 -205 291 -209 q 348 -197 334 -201 l 348 -318 q 301 -329 326 -324 q 242 -334 276 -334 q 171 -322 203 -334 q 118 -290 140 -310 q 84 -241 96 -269 q 73 -177 73 -212 q 82 -124 73 -148 q 108 -78 91 -99 q 147 -38 125 -57 q 195 0 169 -19 l 316 0 q 242 -81 269 -44 q 216 -154 216 -118 "},"Τ":{x_min:28,x_max:735,ha:762,o:"m 487 0 l 277 0 l 277 817 l 28 817 l 28 992 l 735 992 l 735 817 l 487 817 l 487 0 "},"≈":{x_min:60,x_max:705,ha:765,o:"m 358 551 q 313 569 333 562 q 278 581 294 577 q 248 587 262 586 q 218 589 234 589 q 177 583 198 589 q 136 565 156 576 q 96 539 116 554 q 60 507 77 524 l 60 664 q 137 719 94 700 q 233 738 180 738 q 271 736 253 738 q 307 729 288 734 q 350 716 326 725 q 406 694 374 708 q 451 676 432 683 q 487 665 471 669 q 518 659 503 660 q 547 657 532 657 q 587 663 566 657 q 629 681 608 670 q 668 707 649 692 q 705 739 688 722 l 705 582 q 531 509 636 509 q 493 510 511 509 q 457 516 476 512 q 414 529 438 521 q 358 551 390 538 m 358 280 q 313 298 333 291 q 278 310 294 306 q 248 316 262 315 q 218 318 234 318 q 177 312 198 318 q 136 294 156 305 q 96 268 116 283 q 60 236 77 253 l 60 393 q 137 448 94 429 q 233 467 180 467 q 271 465 253 467 q 307 458 288 463 q 350 445 326 454 q 406 423 374 437 q 451 405 432 412 q 487 394 471 398 q 518 388 503 389 q 547 386 532 386 q 587 392 566 386 q 629 410 608 399 q 668 436 649 421 q 705 468 688 451 l 705 311 q 531 238 636 238 q 493 239 511 238 q 457 245 476 241 q 414 258 438 250 q 358 280 390 267 "},"ΐ":{x_min:-38,x_max:511,ha:538,o:"m 315 758 l 315 236 q 337 171 315 192 q 395 150 359 150 q 453 157 425 150 q 509 174 480 164 l 509 20 q 436 -4 479 5 q 342 -14 393 -14 q 250 -2 292 -14 q 176 37 207 9 q 126 115 144 66 q 109 237 109 163 l 109 758 l 315 758 m -38 953 q -15 1023 -38 1001 q 42 1044 6 1044 q 101 1023 78 1044 q 124 953 124 1001 q 101 885 124 907 q 42 863 78 863 q -15 885 6 863 q -38 953 -38 907 m 348 953 q 370 1023 348 1001 q 429 1044 392 1044 q 488 1023 465 1044 q 511 953 511 1001 q 488 885 511 907 q 429 863 465 863 q 370 885 392 863 q 348 953 348 907 m 166 959 q 178 1006 172 980 q 190 1059 184 1032 q 200 1114 196 1087 q 208 1164 205 1141 l 386 1164 l 386 1150 q 331 1050 364 1104 q 259 942 298 996 l 166 942 l 166 959 "},"ĸ":{x_min:109,x_max:819,ha:819,o:"m 307 383 l 393 515 l 580 758 l 801 758 l 527 421 l 819 0 l 585 0 l 396 283 l 315 227 l 315 0 l 109 0 l 109 758 l 315 758 l 315 559 q 314 501 315 532 q 310 444 312 470 q 305 383 307 412 l 307 383 "},g:{x_min:14,x_max:735.140625,ha:766,o:"m 735 757 l 735 644 l 624 610 q 643 562 638 587 q 649 509 649 537 q 630 403 649 451 q 576 322 612 356 q 486 269 540 288 q 360 251 432 251 q 326 252 345 251 q 299 256 308 254 q 279 232 286 244 q 271 201 271 219 q 280 179 271 187 q 303 165 289 170 q 336 158 317 160 q 375 157 355 157 l 493 157 q 591 144 547 157 q 664 106 634 131 q 710 40 694 80 q 727 -54 727 0 q 701 -170 727 -118 q 624 -258 675 -222 q 497 -314 573 -295 q 322 -334 421 -334 q 187 -319 244 -334 q 91 -277 129 -304 q 33 -211 52 -249 q 14 -123 14 -172 q 28 -51 14 -81 q 66 0 42 -20 q 120 36 90 22 q 182 57 150 49 q 154 74 168 63 q 129 99 140 85 q 111 131 118 113 q 104 167 104 148 q 110 206 104 189 q 128 239 116 224 q 159 268 141 254 q 200 296 177 282 q 105 379 140 322 q 71 513 71 436 q 89 622 71 574 q 145 704 108 670 q 236 755 182 737 q 360 773 290 773 q 391 771 374 773 q 424 767 408 769 q 455 762 441 764 q 477 757 469 759 l 735 757 m 193 -107 q 200 -141 193 -125 q 224 -169 207 -157 q 266 -189 240 -181 q 331 -196 293 -196 q 490 -166 437 -196 q 543 -85 543 -135 q 510 -27 543 -42 q 408 -13 477 -13 l 312 -13 q 273 -17 294 -13 q 234 -33 252 -22 q 205 -62 217 -44 q 193 -107 193 -80 m 265 510 q 289 415 265 448 q 360 381 312 381 q 432 415 410 381 q 454 510 454 448 q 432 607 454 571 q 360 643 410 643 q 265 510 265 643 "},"ǿ":{x_min:69,x_max:762,ha:832,o:"m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 339 -7 374 -14 q 271 11 304 0 l 233 -51 l 123 9 l 169 84 q 95 209 122 134 q 69 380 69 283 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 498 764 459 773 q 572 739 537 755 l 605 793 l 713 728 l 671 661 q 738 541 714 612 q 762 380 762 470 m 280 380 q 288 278 280 322 l 480 589 q 414 606 453 606 q 312 550 343 606 q 280 380 280 494 m 550 380 q 546 457 550 424 l 365 162 q 389 154 376 156 q 415 152 401 152 q 518 210 486 152 q 550 380 550 267 m 294 842 l 294 860 q 324 905 308 879 q 356 958 340 931 q 386 1013 372 986 q 412 1064 401 1040 l 644 1064 l 644 1049 q 622 1021 636 1037 q 589 985 608 1004 q 550 946 571 966 q 508 907 529 926 q 466 871 486 888 q 431 842 447 854 l 294 842 "},"²":{x_min:31.578125,x_max:476.28125,ha:526,o:"m 476 397 l 37 397 l 37 508 l 189 657 q 242 710 221 687 q 275 751 263 732 q 293 785 288 769 q 298 819 298 801 q 282 859 298 845 q 238 873 265 873 q 181 859 211 873 q 115 815 151 846 l 31 918 q 130 981 75 957 q 259 1006 185 1006 q 341 994 304 1006 q 404 961 378 983 q 445 908 430 940 q 460 835 460 876 q 451 776 460 803 q 424 720 443 748 q 377 662 406 692 q 308 594 349 631 l 237 529 l 476 529 l 476 397 "},"Ã":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 342 1135 q 308 1119 321 1135 q 288 1069 296 1103 l 187 1069 q 204 1163 191 1123 q 240 1228 218 1202 q 292 1266 262 1253 q 357 1279 321 1279 q 411 1269 385 1279 q 464 1246 438 1259 q 515 1224 490 1234 q 565 1214 541 1214 q 598 1230 586 1214 q 619 1280 611 1246 l 721 1280 q 703 1187 716 1226 q 666 1122 689 1148 q 614 1083 644 1096 q 550 1071 585 1071 q 496 1081 523 1071 q 443 1103 468 1091 q 392 1125 417 1115 q 342 1135 366 1135 "},"Ј":{x_min:-135,x_max:335,ha:460,o:"m -1 -292 q -78 -287 -45 -292 q -135 -277 -111 -283 l -135 -103 q -82 -112 -109 -108 q -22 -117 -54 -117 q 35 -110 8 -117 q 82 -86 62 -103 q 113 -42 102 -70 q 124 27 124 -14 l 124 992 l 335 992 l 335 35 q 310 -111 335 -49 q 241 -213 285 -173 q 134 -273 196 -254 q -1 -292 73 -292 "},"©":{x_min:68,x_max:1088,ha:1156,o:"m 606 699 q 504 645 540 699 q 468 495 468 591 q 501 344 468 397 q 606 291 534 291 q 690 302 645 291 q 774 331 735 312 l 774 212 q 695 187 735 196 q 603 178 655 178 q 476 201 530 178 q 385 266 422 224 q 331 366 349 308 q 313 497 313 425 q 330 625 313 567 q 383 725 348 683 q 473 789 419 766 q 597 813 526 813 q 706 799 654 813 q 804 765 758 786 l 754 659 q 606 699 677 699 m 68 495 q 86 631 68 566 q 137 753 104 696 q 217 856 170 809 q 320 936 264 903 q 442 987 377 969 q 578 1006 507 1006 q 713 987 648 1006 q 835 936 778 969 q 938 856 892 903 q 1018 753 985 809 q 1069 631 1051 696 q 1088 495 1088 566 q 1069 359 1088 425 q 1018 238 1051 294 q 938 134 985 181 q 835 55 892 88 q 713 3 778 21 q 578 -14 648 -14 q 442 3 507 -14 q 320 55 377 21 q 217 134 264 88 q 137 238 170 181 q 86 359 104 294 q 68 495 68 425 m 164 496 q 196 334 164 409 q 285 203 229 259 q 416 114 341 147 q 578 82 491 82 q 739 114 664 82 q 870 203 814 147 q 959 334 926 259 q 991 496 991 409 q 959 657 991 582 q 870 788 926 732 q 739 877 814 844 q 578 909 664 909 q 416 877 491 909 q 285 788 341 844 q 196 657 229 732 q 164 496 164 582 "},"≥":{x_min:60,x_max:705,ha:765,o:"m 60 0 l 60 148 l 705 148 l 705 0 l 60 0 m 60 341 l 496 531 l 60 746 l 60 909 l 705 573 l 705 475 l 60 179 l 60 341 "},"Ă":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 698 1300 q 676 1207 694 1249 q 628 1135 659 1165 q 552 1087 596 1104 q 449 1071 507 1071 q 345 1087 389 1071 q 270 1133 300 1103 q 224 1205 240 1163 q 206 1300 208 1247 l 321 1300 q 333 1253 324 1270 q 359 1227 343 1236 q 398 1216 375 1218 q 450 1214 421 1214 q 497 1217 475 1214 q 536 1229 519 1220 q 565 1255 554 1238 q 579 1300 577 1272 l 698 1300 "},"ґ":{x_min:109,x_max:619,ha:669,o:"m 315 0 l 109 0 l 109 758 l 440 758 l 440 965 l 619 965 l 619 604 l 315 604 l 315 0 "},"ÿ":{x_min:-.25,x_max:749.25,ha:749,o:"m 0 758 l 226 758 l 348 331 q 364 256 359 296 q 371 184 369 216 l 375 184 q 378 219 376 200 q 384 257 381 238 q 392 296 388 277 q 401 331 396 316 l 521 758 l 749 758 l 449 -96 q 334 -275 407 -217 q 152 -334 261 -334 q 91 -330 116 -334 q 47 -322 65 -326 l 47 -158 q 83 -164 61 -161 q 128 -167 104 -167 q 184 -158 161 -167 q 224 -133 207 -149 q 252 -95 240 -117 q 273 -44 264 -72 l 286 -6 l 0 758 m 143 953 q 150 994 143 977 q 170 1022 157 1011 q 200 1039 183 1034 q 237 1045 217 1045 q 274 1039 257 1045 q 304 1022 291 1034 q 325 994 317 1011 q 333 953 333 977 q 325 913 333 930 q 304 885 317 896 q 274 868 291 873 q 237 863 257 863 q 200 868 217 863 q 170 885 183 873 q 150 913 157 896 q 143 953 143 930 m 416 953 q 423 994 416 977 q 443 1022 430 1011 q 474 1039 456 1034 q 512 1045 491 1045 q 548 1039 531 1045 q 579 1022 565 1034 q 600 994 592 1011 q 608 953 608 977 q 600 913 608 930 q 579 885 592 896 q 548 868 565 873 q 512 863 531 863 q 443 885 471 863 q 416 953 416 907 "},"Ł":{x_min:1.5625,x_max:696,ha:743,o:"m 125 0 l 125 333 l 78 306 l 1 439 l 125 514 l 125 992 l 335 992 l 335 641 l 432 701 l 511 568 l 335 461 l 335 173 l 696 173 l 696 0 l 125 0 "}," ":{x_min:0,x_max:0,ha:372},"∫":{x_min:.234375,x_max:572.65625,ha:572,o:"m 465 881 q 410 856 430 881 q 390 788 390 832 l 390 -76 q 371 -193 390 -144 q 319 -272 353 -241 q 238 -319 285 -304 q 132 -334 190 -334 q 61 -326 94 -334 q 0 -306 28 -319 l 0 -133 q 51 -152 23 -144 q 107 -160 79 -160 q 164 -135 147 -160 q 182 -64 182 -110 l 182 798 q 200 914 182 866 q 253 994 219 963 q 334 1040 287 1025 q 440 1055 382 1055 q 572 1027 514 1055 l 572 855 q 520 873 548 865 q 465 881 492 881 "},"\\":{x_min:7.75,x_max:566.25,ha:574,o:"m 195 992 l 566 0 l 378 0 l 7 992 l 195 992 "},"Ì":{x_min:29,x_max:495.96875,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 241 1071 q 186 1118 218 1089 q 122 1175 153 1146 q 65 1233 91 1205 q 29 1278 39 1260 l 29 1293 l 260 1293 q 286 1242 271 1269 q 316 1187 300 1215 q 348 1134 332 1160 q 379 1089 364 1108 l 379 1071 l 241 1071 "},"ъ":{x_min:32,x_max:927,ha:983,o:"m 479 758 l 479 467 l 612 467 q 850 411 773 467 q 927 242 927 356 q 909 142 927 187 q 853 65 891 97 q 756 17 815 34 q 611 0 696 0 l 273 0 l 273 604 l 32 604 l 32 758 l 479 758 m 720 239 q 690 300 720 281 q 600 319 660 319 l 479 319 l 479 147 l 603 147 q 650 152 629 147 q 687 168 671 156 q 711 196 702 179 q 720 239 720 214 "},"ς":{x_min:69,x_max:650,ha:657,o:"m 69 335 q 94 544 69 460 q 166 679 119 628 q 278 751 212 730 q 424 773 344 773 q 540 758 482 773 q 649 718 598 744 l 589 562 q 502 594 544 581 q 424 606 461 606 q 314 540 348 606 q 280 340 280 473 q 292 264 280 293 q 327 216 305 234 q 381 188 349 198 q 453 168 413 177 q 546 137 508 155 q 607 95 584 118 q 640 44 630 72 q 650 -15 650 16 q 642 -78 650 -46 q 622 -142 634 -111 q 595 -202 610 -173 q 563 -257 579 -231 l 355 -257 q 392 -199 374 -228 q 425 -141 411 -169 q 447 -88 439 -113 q 455 -46 455 -64 q 451 -27 455 -36 q 435 -10 447 -18 q 401 5 423 -2 q 343 21 379 12 q 228 60 279 34 q 142 125 177 86 q 87 216 106 164 q 69 335 69 268 "},"Ē":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 202 1214 l 620 1214 l 620 1071 l 202 1071 l 202 1214 "},"!":{x_min:79,x_max:316,ha:397,o:"m 281 330 l 116 330 l 81 992 l 316 992 l 281 330 m 79 97 q 88 151 79 129 q 113 187 97 173 q 151 206 129 200 q 198 213 173 213 q 243 206 221 213 q 280 187 264 200 q 306 151 297 173 q 316 97 316 129 q 306 45 316 66 q 280 9 297 23 q 243 -11 264 -5 q 198 -18 221 -18 q 151 -11 173 -18 q 113 9 129 -5 q 88 45 97 23 q 79 97 79 66 "},"ç":{x_min:69,x_max:648.703125,ha:693,o:"m 424 -14 q 277 8 342 -14 q 165 78 211 30 q 93 198 118 125 q 69 375 69 272 q 94 564 69 488 q 166 687 119 641 q 278 753 212 733 q 424 773 343 773 q 540 758 482 773 q 648 718 597 744 l 588 562 q 502 594 544 581 q 423 606 461 606 q 314 549 348 606 q 280 376 280 491 q 314 206 280 261 q 421 152 348 152 q 528 167 480 152 q 627 206 576 182 l 627 35 q 578 13 601 23 q 530 -1 554 4 q 480 -10 506 -7 q 424 -14 453 -14 m 528 -169 q 517 -239 528 -208 q 482 -290 506 -269 q 417 -322 458 -311 q 318 -334 377 -334 q 263 -329 287 -334 q 219 -319 238 -325 l 219 -205 q 241 -210 229 -208 q 267 -215 254 -213 q 293 -218 280 -217 q 316 -220 306 -220 q 350 -210 335 -220 q 365 -178 365 -201 q 340 -133 365 -153 q 252 -105 314 -114 l 305 0 l 436 0 l 417 -41 q 458 -59 438 -48 q 493 -87 478 -71 q 518 -124 508 -103 q 528 -169 528 -144 "},"Й":{x_min:125,x_max:963,ha:1088,o:"m 125 992 l 312 992 l 312 522 q 311 484 312 505 q 310 440 311 463 q 309 395 310 417 q 307 350 308 372 q 302 248 304 300 l 306 248 l 712 992 l 963 992 l 963 0 l 775 0 l 775 466 q 777 554 775 505 q 781 646 779 602 q 788 750 784 698 l 782 750 l 375 0 l 125 0 l 125 992 m 864 1314 q 839 1214 858 1259 q 780 1138 819 1170 q 680 1088 742 1106 q 529 1071 619 1071 q 377 1087 437 1071 q 279 1136 316 1104 q 226 1212 243 1168 q 206 1314 210 1257 l 392 1314 q 405 1249 395 1274 q 431 1210 414 1224 q 473 1190 447 1196 q 535 1184 499 1184 q 589 1191 564 1184 q 632 1212 614 1197 q 661 1252 650 1227 q 677 1314 673 1277 l 864 1314 "},"Б":{x_min:125,x_max:769,ha:831,o:"m 335 613 l 408 613 q 569 590 501 613 q 681 527 637 568 q 747 432 726 487 q 769 310 769 376 q 746 179 769 237 q 678 81 724 121 q 560 21 631 42 q 390 0 489 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 613 m 335 174 l 393 174 q 462 182 431 174 q 514 205 492 189 q 547 247 536 221 q 558 310 558 273 q 546 374 558 349 q 510 413 534 399 q 453 432 487 427 q 378 438 420 438 l 335 438 l 335 174 "},"đ":{x_min:69,x_max:841,ha:844,o:"m 331 -14 q 224 9 272 -14 q 142 80 176 33 q 88 196 107 127 q 69 356 69 265 q 88 518 69 448 q 143 635 107 588 q 228 706 178 682 q 337 730 277 730 q 404 721 373 730 q 459 698 434 713 q 502 662 483 683 q 536 618 522 642 l 543 618 q 536 673 539 645 q 530 724 532 696 q 528 776 528 751 l 528 811 l 315 811 l 315 946 l 528 946 l 528 1055 l 735 1055 l 735 946 l 841 946 l 841 811 l 735 811 l 735 0 l 576 0 l 536 97 l 528 97 q 495 54 513 74 q 453 18 477 33 q 399 -5 429 3 q 331 -14 369 -14 m 407 150 q 469 162 444 150 q 510 196 495 173 q 534 254 526 219 q 542 335 541 289 l 542 354 q 535 443 542 405 q 513 508 528 482 q 471 548 497 534 q 406 561 445 561 q 310 508 341 561 q 280 353 280 455 q 310 201 280 252 q 407 150 341 150 "},"ċ":{x_min:69,x_max:648.703125,ha:693,o:"m 424 -14 q 277 8 342 -14 q 165 78 211 30 q 93 198 118 125 q 69 375 69 272 q 94 564 69 488 q 166 687 119 641 q 278 753 212 733 q 424 773 343 773 q 540 758 482 773 q 648 718 597 744 l 588 562 q 502 594 544 581 q 423 606 461 606 q 314 549 348 606 q 280 376 280 491 q 314 206 280 261 q 421 152 348 152 q 528 167 480 152 q 627 206 576 182 l 627 35 q 578 13 601 23 q 530 -1 554 4 q 480 -10 506 -7 q 424 -14 453 -14 m 302 954 q 310 1003 302 984 q 334 1034 319 1022 q 370 1051 350 1046 q 414 1056 391 1056 q 457 1051 437 1056 q 493 1034 478 1046 q 517 1003 508 1022 q 527 954 527 984 q 517 906 527 926 q 493 875 508 886 q 457 858 478 863 q 414 853 437 853 q 370 858 391 853 q 334 875 350 863 q 310 906 319 886 q 302 954 302 926 "},"Ā":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 243 1214 l 661 1214 l 661 1071 l 243 1071 l 243 1214 "},"Ẃ":{x_min:-.25,x_max:1287.25,ha:1287,o:"m 1048 0 l 809 0 l 687 489 q 681 517 684 499 q 672 559 677 536 q 663 607 667 582 q 654 656 658 632 q 647 700 650 679 q 642 732 644 720 q 638 700 641 720 q 631 656 635 679 q 622 608 627 633 q 613 559 618 582 q 605 517 609 536 q 598 487 601 498 l 477 0 l 238 0 l 0 992 l 206 992 l 319 450 q 325 418 321 439 q 333 372 328 398 q 343 318 338 346 q 353 262 348 289 q 361 211 357 235 q 368 173 366 188 q 373 211 370 188 q 381 260 377 234 q 390 314 385 286 q 399 366 395 342 q 407 409 404 390 q 413 436 411 428 l 551 992 l 735 992 l 873 436 q 879 409 875 428 q 887 366 882 390 q 896 314 891 342 q 905 260 901 286 q 913 211 910 234 q 919 173 917 188 q 925 211 921 188 q 933 262 929 235 q 943 318 938 289 q 953 372 948 346 q 962 418 958 398 q 967 450 965 439 l 1080 992 l 1287 992 l 1048 0 m 553 1071 l 553 1089 q 583 1134 567 1108 q 615 1187 599 1160 q 645 1242 631 1215 q 671 1293 660 1269 l 903 1293 l 903 1278 q 881 1250 895 1266 q 848 1214 867 1233 q 809 1175 830 1195 q 767 1136 788 1155 q 725 1100 745 1117 q 690 1071 706 1083 l 553 1071 "},"ø":{x_min:69,x_max:762,ha:832,o:"m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 339 -7 374 -14 q 271 11 304 0 l 233 -51 l 123 9 l 169 84 q 95 209 122 134 q 69 380 69 283 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 498 764 459 773 q 572 739 537 755 l 605 793 l 713 728 l 671 661 q 738 541 714 612 q 762 380 762 470 m 280 380 q 288 278 280 322 l 480 589 q 414 606 453 606 q 312 550 343 606 q 280 380 280 494 m 550 380 q 546 457 550 424 l 365 162 q 389 154 376 156 q 415 152 401 152 q 518 210 486 152 q 550 380 550 267 "},"â":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 544 841 q 472 893 509 863 q 399 959 434 922 q 327 893 362 922 q 257 841 292 863 l 120 841 l 120 859 q 159 904 137 878 q 202 957 180 930 q 244 1012 224 985 q 280 1063 265 1039 l 521 1063 q 556 1012 536 1039 q 598 957 576 985 q 642 904 620 930 q 682 859 665 878 l 682 841 l 544 841 "},"}":{x_min:21,x_max:492,ha:505,o:"m 318 -30 q 305 -116 318 -80 q 258 -175 292 -152 q 167 -209 225 -198 q 21 -220 109 -220 l 21 -66 q 69 -61 48 -66 q 106 -47 91 -57 q 130 -18 122 -36 q 138 29 138 0 l 138 232 q 178 333 136 295 q 296 382 219 370 l 296 390 q 138 540 143 414 l 138 743 q 130 790 138 772 q 106 819 122 808 q 69 833 91 829 q 21 838 48 838 l 21 992 q 167 981 109 992 q 258 947 225 970 q 305 889 292 924 q 318 803 318 853 l 318 587 q 328 532 317 555 q 361 494 339 509 q 416 473 383 479 q 492 467 449 467 l 492 304 q 362 277 407 304 q 318 183 318 249 l 318 -30 "},"Δ":{x_min:39,x_max:820,ha:859,o:"m 39 120 l 311 996 l 549 996 l 820 119 l 820 0 l 39 0 l 39 120 m 457 701 q 451 726 455 709 q 442 764 446 744 q 434 800 437 783 q 429 823 430 817 q 425 800 429 817 q 417 764 422 783 q 409 726 413 744 q 403 700 405 708 l 253 174 l 606 174 l 457 701 "},"‰":{x_min:43,x_max:1695,ha:1738,o:"m 967 992 l 416 0 l 254 0 l 805 992 l 967 992 m 880 299 q 896 170 880 213 q 945 128 911 128 q 994 170 978 128 q 1010 299 1010 212 q 945 469 1010 469 q 896 427 911 469 q 880 299 880 386 m 1181 300 q 1167 168 1181 226 q 1123 70 1153 110 q 1050 9 1094 30 q 943 -12 1005 -12 q 842 9 885 -12 q 769 70 798 30 q 724 168 739 110 q 710 300 710 226 q 723 430 710 373 q 765 528 737 488 q 838 588 794 567 q 943 610 882 610 q 1046 588 1001 610 q 1120 528 1090 567 q 1165 430 1150 488 q 1181 300 1181 373 m 1394 299 q 1410 170 1394 213 q 1458 128 1425 128 q 1508 170 1492 128 q 1524 299 1524 212 q 1458 469 1524 469 q 1410 427 1425 469 q 1394 299 1394 386 m 1695 300 q 1681 168 1695 226 q 1638 70 1667 110 q 1564 9 1608 30 q 1457 -12 1519 -12 q 1356 9 1400 -12 q 1283 70 1312 30 q 1238 168 1253 110 q 1224 300 1224 226 q 1237 430 1224 373 q 1279 528 1251 488 q 1352 588 1308 567 q 1457 610 1396 610 q 1560 588 1515 610 q 1634 528 1604 567 q 1679 430 1664 488 q 1695 300 1695 373 m 213 695 q 229 566 213 608 q 278 523 244 523 q 327 565 311 523 q 343 695 343 607 q 278 865 343 865 q 229 823 244 865 q 213 695 213 781 m 514 695 q 500 564 514 622 q 457 465 486 505 q 383 404 427 425 q 276 383 338 383 q 175 404 219 383 q 102 465 131 425 q 57 564 72 505 q 43 695 43 622 q 56 826 43 769 q 98 924 70 884 q 171 984 127 963 q 276 1006 215 1006 q 379 984 335 1006 q 453 924 423 963 q 498 826 483 884 q 514 695 514 769 "},"Ä":{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 m 220 1182 q 227 1223 220 1206 q 247 1251 234 1240 q 277 1268 260 1263 q 314 1274 294 1274 q 351 1268 334 1274 q 381 1251 368 1263 q 402 1223 394 1240 q 410 1182 410 1206 q 402 1142 410 1159 q 381 1114 394 1125 q 351 1097 368 1102 q 314 1092 334 1092 q 277 1097 294 1092 q 247 1114 260 1102 q 227 1142 234 1125 q 220 1182 220 1159 m 493 1182 q 500 1223 493 1206 q 520 1251 507 1240 q 551 1268 533 1263 q 589 1274 568 1274 q 625 1268 608 1274 q 656 1251 642 1263 q 677 1223 669 1240 q 685 1182 685 1206 q 677 1142 685 1159 q 656 1114 669 1125 q 625 1097 642 1102 q 589 1092 608 1092 q 520 1114 548 1092 q 493 1182 493 1136 "},"ř":{x_min:57,x_max:619,ha:603,o:"m 504 773 q 522 772 512 773 q 541 771 532 772 q 558 769 550 770 q 570 766 565 768 l 570 572 q 555 575 564 574 q 535 578 545 576 q 514 579 524 579 q 497 579 504 579 q 423 569 457 579 q 366 536 390 559 q 329 476 342 513 q 315 386 315 439 l 315 0 l 109 0 l 109 758 l 265 758 l 296 644 l 306 644 q 341 697 322 673 q 383 738 360 721 q 436 763 407 754 q 504 773 466 773 m 619 1045 q 579 1000 602 1026 q 535 947 557 974 q 493 892 513 919 q 458 842 473 865 l 217 842 q 181 892 202 865 q 139 947 161 919 q 96 1000 117 974 q 57 1045 74 1026 l 57 1064 l 194 1064 q 264 1011 229 1041 q 336 945 299 982 q 409 1011 371 982 q 481 1064 446 1041 l 619 1064 l 619 1045 "},"—":{x_min:56,x_max:1333,ha:1389,o:"m 56 296 l 56 452 l 1333 452 l 1333 296 l 56 296 "},N:{x_min:125,x_max:963,ha:1088,o:"m 963 0 l 697 0 l 305 750 l 299 750 q 306 646 303 698 q 310 554 308 602 q 312 466 312 505 l 312 0 l 125 0 l 125 992 l 389 992 l 781 248 l 785 248 q 780 350 783 300 q 778 395 779 372 q 777 440 777 417 q 776 484 776 463 q 775 522 775 505 l 775 992 l 963 992 l 963 0 "},"⁄":{x_min:-267.25,x_max:445.25,ha:180,o:"m 445 992 l -105 0 l -267 0 l 283 992 l 445 992 "},"М":{x_min:125,x_max:1143,ha:1268,o:"m 523 0 l 305 778 l 299 778 q 306 657 303 715 q 308 605 307 632 q 310 553 309 579 q 311 503 311 527 q 312 461 312 480 l 312 0 l 125 0 l 125 992 l 410 992 l 625 233 l 629 233 l 856 992 l 1143 992 l 1143 0 l 947 0 l 947 469 q 947 509 947 487 q 948 556 947 531 q 950 607 949 581 q 951 657 951 633 q 956 776 954 714 l 951 776 l 716 0 l 523 0 "},"Ó":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 m 400 1071 l 400 1089 q 430 1134 414 1108 q 462 1187 446 1160 q 492 1242 478 1215 q 518 1293 507 1269 l 750 1293 l 750 1278 q 728 1250 742 1266 q 695 1214 714 1233 q 656 1175 677 1195 q 614 1136 635 1155 q 572 1100 592 1117 q 537 1071 553 1083 l 400 1071 "},"˜":{x_min:134,x_max:668,ha:802,o:"m 289 906 q 255 890 268 906 q 235 840 243 874 l 134 840 q 151 934 138 894 q 187 999 165 973 q 239 1037 209 1024 q 304 1050 268 1050 q 358 1040 332 1050 q 411 1017 385 1030 q 462 995 437 1005 q 512 985 488 985 q 545 1001 533 985 q 566 1051 558 1017 l 668 1051 q 650 958 663 997 q 613 893 636 919 q 561 854 591 867 q 497 842 532 842 q 443 852 470 842 q 390 874 415 862 q 339 896 364 886 q 289 906 313 906 "}," ":{x_min:0,x_max:0,ha:695},"ˇ":{x_min:119,x_max:681,ha:802,o:"m 681 1045 q 641 1000 664 1026 q 597 947 619 974 q 555 892 575 919 q 520 842 535 865 l 279 842 q 243 892 264 865 q 201 947 223 919 q 158 1000 179 974 q 119 1045 136 1026 l 119 1064 l 256 1064 q 326 1011 291 1041 q 398 945 361 982 q 471 1011 433 982 q 543 1064 508 1041 l 681 1064 l 681 1045 "},"ų":{x_min:104,x_max:762,ha:871,o:"m 603 0 l 576 96 l 565 96 q 524 46 548 67 q 473 12 501 26 q 414 -7 445 -1 q 350 -14 383 -14 q 249 1 295 -14 q 171 51 204 17 q 121 137 139 85 q 104 263 104 190 l 104 758 l 310 758 l 310 314 q 335 191 310 232 q 414 150 360 150 q 482 167 455 150 q 525 215 509 183 q 548 293 541 247 q 555 401 555 340 l 555 758 l 762 758 l 762 0 l 603 0 m 625 -154 q 640 -196 625 -182 q 679 -209 655 -209 q 722 -205 700 -209 q 757 -197 743 -201 l 757 -318 q 710 -329 735 -324 q 651 -334 685 -334 q 580 -322 612 -334 q 527 -290 549 -310 q 493 -241 505 -269 q 482 -177 482 -212 q 491 -124 482 -148 q 517 -78 500 -99 q 556 -38 534 -57 q 604 0 578 -19 l 725 0 q 651 -81 678 -44 q 625 -154 625 -118 "},"Ў":{x_min:-.25,x_max:851.25,ha:851,o:"m 851 992 l 563 290 q 503 162 534 218 q 431 66 473 105 q 332 6 389 27 q 194 -14 275 -14 q 120 -8 159 -14 q 46 6 80 -3 l 46 185 q 118 166 79 171 q 194 160 158 160 q 253 169 229 160 q 294 195 277 178 q 322 232 311 211 q 343 279 334 254 l 0 992 l 222 992 l 409 563 q 420 538 414 553 q 431 509 426 524 q 441 482 437 495 q 446 465 446 470 l 454 465 q 458 483 455 471 q 465 510 461 496 q 473 538 469 524 q 482 562 478 552 l 634 992 l 851 992 m 753 1314 q 728 1214 747 1259 q 669 1138 708 1170 q 569 1088 631 1106 q 418 1071 508 1071 q 266 1087 326 1071 q 168 1136 205 1104 q 115 1212 132 1168 q 95 1314 99 1257 l 281 1314 q 294 1249 284 1274 q 320 1210 303 1224 q 362 1190 336 1196 q 424 1184 388 1184 q 478 1191 453 1184 q 521 1212 503 1197 q 550 1252 539 1227 q 566 1314 562 1277 l 753 1314 "},"Ŭ":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 741 1300 q 719 1207 737 1249 q 671 1135 702 1165 q 595 1087 639 1104 q 492 1071 550 1071 q 388 1087 432 1071 q 313 1133 343 1103 q 267 1205 283 1163 q 249 1300 251 1247 l 364 1300 q 376 1253 367 1270 q 402 1227 386 1236 q 441 1216 418 1218 q 493 1214 464 1214 q 540 1217 518 1214 q 579 1229 562 1220 q 608 1255 597 1238 q 622 1300 620 1272 l 741 1300 "},"ĝ":{x_min:14,x_max:735.140625,ha:766,o:"m 735 757 l 735 644 l 624 610 q 643 562 638 587 q 649 509 649 537 q 630 403 649 451 q 576 322 612 356 q 486 269 540 288 q 360 251 432 251 q 326 252 345 251 q 299 256 308 254 q 279 232 286 244 q 271 201 271 219 q 280 179 271 187 q 303 165 289 170 q 336 158 317 160 q 375 157 355 157 l 493 157 q 591 144 547 157 q 664 106 634 131 q 710 40 694 80 q 727 -54 727 0 q 701 -170 727 -118 q 624 -258 675 -222 q 497 -314 573 -295 q 322 -334 421 -334 q 187 -319 244 -334 q 91 -277 129 -304 q 33 -211 52 -249 q 14 -123 14 -172 q 28 -51 14 -81 q 66 0 42 -20 q 120 36 90 22 q 182 57 150 49 q 154 74 168 63 q 129 99 140 85 q 111 131 118 113 q 104 167 104 148 q 110 206 104 189 q 128 239 116 224 q 159 268 141 254 q 200 296 177 282 q 105 379 140 322 q 71 513 71 436 q 89 622 71 574 q 145 704 108 670 q 236 755 182 737 q 360 773 290 773 q 391 771 374 773 q 424 767 408 769 q 455 762 441 764 q 477 757 469 759 l 735 757 m 193 -107 q 200 -141 193 -125 q 224 -169 207 -157 q 266 -189 240 -181 q 331 -196 293 -196 q 490 -166 437 -196 q 543 -85 543 -135 q 510 -27 543 -42 q 408 -13 477 -13 l 312 -13 q 273 -17 294 -13 q 234 -33 252 -22 q 205 -62 217 -44 q 193 -107 193 -80 m 265 510 q 289 415 265 448 q 360 381 312 381 q 432 415 410 381 q 454 510 454 448 q 432 607 454 571 q 360 643 410 643 q 265 510 265 643 m 504 842 q 432 894 469 864 q 359 960 394 923 q 287 894 322 923 q 217 842 252 864 l 80 842 l 80 860 q 119 905 97 879 q 162 958 140 931 q 204 1013 184 986 q 240 1064 225 1040 l 481 1064 q 516 1013 496 1040 q 558 958 536 986 q 602 905 580 931 q 642 860 625 879 l 642 842 l 504 842 "},"Ω":{x_min:37,x_max:999,ha:1031,o:"m 518 832 q 344 759 399 832 q 290 547 290 686 q 299 434 290 487 q 329 336 308 381 q 384 253 350 290 q 470 189 419 217 l 470 0 l 37 0 l 37 176 l 289 176 q 200 248 240 206 q 132 343 160 290 q 89 459 104 396 q 74 591 74 521 q 102 762 74 685 q 187 893 130 838 q 326 977 243 948 q 518 1007 409 1007 q 709 977 627 1007 q 848 893 792 948 q 933 761 905 838 q 962 589 962 684 q 946 458 962 520 q 902 343 931 396 q 834 248 874 290 q 744 176 794 206 l 999 176 l 999 0 l 561 0 l 561 189 q 649 253 614 216 q 705 336 684 290 q 736 435 727 382 q 745 548 745 488 q 691 759 745 686 q 518 832 636 832 "},s:{x_min:66,x_max:614,ha:668,o:"m 614 225 q 592 120 614 165 q 530 45 570 75 q 433 0 490 15 q 305 -14 376 -14 q 236 -11 268 -14 q 176 -3 204 -9 q 121 9 147 1 q 67 30 94 17 l 67 201 q 127 176 95 187 q 189 156 158 164 q 249 143 220 148 q 304 139 279 139 q 351 144 331 139 q 383 158 370 149 q 401 179 395 167 q 407 205 407 191 q 402 230 407 219 q 382 254 398 242 q 337 283 367 267 q 256 322 307 299 q 171 366 207 344 q 112 415 135 388 q 77 477 88 442 q 66 561 66 512 q 86 653 66 614 q 144 720 106 693 q 234 759 181 746 q 351 773 286 773 q 480 757 419 773 q 605 710 541 741 l 543 564 q 445 604 492 588 q 352 619 398 619 q 291 604 310 619 q 272 563 272 589 q 277 539 272 550 q 296 518 282 529 q 336 493 310 506 q 403 461 362 480 q 490 419 451 440 q 556 372 528 398 q 599 310 584 345 q 614 225 614 275 "},"?":{x_min:17,x_max:601,ha:638,o:"m 180 330 l 180 380 q 187 442 180 414 q 208 496 194 470 q 246 545 223 521 q 302 595 269 569 q 351 635 331 617 q 383 670 370 653 q 400 706 395 687 q 406 750 406 725 q 380 814 406 789 q 299 839 353 839 q 198 819 252 839 q 86 771 144 800 l 17 921 q 80 953 46 938 q 151 980 114 968 q 226 999 188 992 q 301 1006 264 1006 q 426 989 370 1006 q 520 940 482 972 q 580 863 559 909 q 601 760 601 818 q 591 683 601 717 q 563 621 582 650 q 516 566 544 592 q 451 509 488 539 q 404 470 422 487 q 376 439 386 453 q 362 408 366 424 q 359 370 359 392 l 359 330 l 180 330 m 158 97 q 167 151 158 129 q 192 187 176 173 q 230 206 208 200 q 278 213 252 213 q 323 206 301 213 q 360 187 344 200 q 386 151 377 173 q 396 97 396 129 q 386 45 396 66 q 360 9 377 23 q 323 -11 344 -5 q 278 -18 301 -18 q 230 -11 252 -18 q 192 9 208 -5 q 167 45 176 23 q 158 97 158 66 "},"Ņ":{x_min:125,x_max:963,ha:1088,o:"m 963 0 l 697 0 l 305 750 l 299 750 q 306 646 303 698 q 310 554 308 602 q 312 466 312 505 l 312 0 l 125 0 l 125 992 l 389 992 l 781 248 l 785 248 q 780 350 783 300 q 778 395 779 372 q 777 440 777 417 q 776 484 776 463 q 775 522 775 505 l 775 992 l 963 992 l 963 0 m 385 -288 q 397 -242 391 -268 q 408 -188 403 -216 q 419 -134 414 -161 q 426 -85 424 -107 l 618 -85 l 618 -98 q 569 -198 597 -145 q 505 -307 541 -251 l 385 -307 l 385 -288 "},"Ī":{x_min:44.28125,x_max:495.96875,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 62 1214 l 480 1214 l 480 1071 l 62 1071 l 62 1214 "},"Μ":{x_min:125,x_max:1143,ha:1268,o:"m 523 0 l 305 778 l 299 778 q 306 657 303 715 q 308 605 307 632 q 310 553 309 579 q 311 503 311 527 q 312 461 312 480 l 312 0 l 125 0 l 125 992 l 410 992 l 625 233 l 629 233 l 856 992 l 1143 992 l 1143 0 l 947 0 l 947 469 q 947 509 947 487 q 948 556 947 531 q 950 607 949 581 q 951 657 951 633 q 956 776 954 714 l 951 776 l 716 0 l 523 0 "},"•":{x_min:66,x_max:455,ha:522,o:"m 66 507 q 80 606 66 566 q 121 673 95 647 q 183 711 148 699 q 260 723 219 723 q 336 711 300 723 q 398 673 371 699 q 439 606 424 647 q 455 507 455 566 q 439 409 455 450 q 398 342 424 368 q 336 304 371 316 q 260 292 300 292 q 183 304 219 292 q 121 342 148 316 q 80 409 95 368 q 66 507 66 450 "},"н":{x_min:109,x_max:770,ha:878,o:"m 315 758 l 315 466 l 563 466 l 563 758 l 770 758 l 770 0 l 563 0 l 563 312 l 315 312 l 315 0 l 109 0 l 109 758 l 315 758 "},"(":{x_min:56,x_max:430,ha:471,o:"m 56 380 q 68 547 56 465 q 105 708 80 630 q 169 857 130 785 q 260 992 207 928 l 430 992 q 284 704 333 861 q 235 381 235 547 q 247 221 235 301 q 284 64 259 141 q 345 -84 308 -12 q 428 -220 381 -156 l 260 -220 q 169 -89 207 -158 q 105 57 130 -19 q 68 214 80 133 q 56 380 56 296 "},"◊":{x_min:60,x_max:749,ha:810,o:"m 749 498 l 443 0 l 365 0 l 60 498 l 365 999 l 443 999 l 749 498 m 569 498 l 404 776 l 239 498 l 404 221 l 569 498 "},"α":{x_min:69,x_max:834,ha:864,o:"m 399 152 q 457 165 433 152 q 495 204 480 177 q 516 272 509 231 q 524 369 523 312 l 524 377 q 518 475 524 432 q 497 546 512 517 q 458 589 482 575 q 397 604 434 604 q 308 546 337 604 q 280 375 280 487 q 309 207 280 263 q 399 152 337 152 m 332 -14 q 224 11 273 -14 q 141 85 175 36 q 87 207 106 134 q 69 376 69 280 q 88 546 69 473 q 143 670 107 620 q 231 745 179 720 q 346 771 282 771 q 411 763 382 771 q 464 742 440 756 q 506 706 487 728 q 540 656 525 685 l 550 656 q 569 708 557 680 q 600 758 581 736 l 784 758 q 768 702 776 735 q 752 628 759 669 q 740 542 745 588 q 736 451 736 497 l 736 239 q 740 201 736 216 q 753 176 745 185 q 771 163 761 167 q 793 159 781 159 q 815 162 802 159 q 834 166 828 164 l 834 3 q 816 -2 828 0 q 790 -8 805 -5 q 761 -12 776 -10 q 734 -14 747 -14 q 667 -8 697 -14 q 614 10 637 -3 q 573 45 590 23 q 542 100 555 67 l 529 100 q 497 56 516 77 q 455 19 478 35 q 401 -5 431 3 q 332 -14 370 -14 "},"Ħ":{x_min:0,x_max:1007,ha:1007,o:"m 1007 860 l 1007 722 l 882 722 l 882 0 l 671 0 l 671 428 l 335 428 l 335 0 l 125 0 l 125 722 l 0 722 l 0 860 l 125 860 l 125 992 l 335 992 l 335 860 l 671 860 l 671 992 l 882 992 l 882 860 l 1007 860 m 671 603 l 671 722 l 335 722 l 335 603 l 671 603 "},"м":{x_min:109,x_max:1036,ha:1145,o:"m 1036 0 l 841 0 l 841 597 q 831 554 837 583 q 816 491 825 526 q 795 415 807 455 q 770 338 784 376 l 645 0 l 498 0 l 373 341 q 349 415 360 378 q 330 488 339 453 q 315 551 321 522 q 303 597 308 579 l 303 0 l 109 0 l 109 758 l 399 758 l 516 434 q 539 360 529 398 q 555 290 549 322 q 565 233 561 258 q 571 198 569 209 q 578 234 573 210 q 589 290 582 259 q 606 358 596 322 q 628 429 616 393 l 748 758 l 1036 758 l 1036 0 "},"з":{x_min:53,x_max:676,ha:729,o:"m 288 464 q 428 481 379 464 q 477 544 477 498 q 445 601 477 582 q 338 619 412 619 q 285 616 313 619 q 229 606 257 612 q 173 591 201 600 q 120 571 145 583 l 58 716 q 121 738 88 728 q 192 757 154 749 q 271 768 229 764 q 364 773 314 773 q 474 760 421 773 q 567 723 527 748 q 631 660 607 698 q 656 568 656 621 q 617 458 656 499 q 514 399 578 417 l 514 393 q 577 371 548 384 q 628 338 606 358 q 663 289 650 318 q 676 218 676 260 q 654 129 676 172 q 590 55 633 87 q 481 4 547 23 q 324 -14 415 -14 q 169 -2 238 -14 q 53 31 99 8 l 53 197 q 100 176 74 186 q 156 157 126 165 q 220 144 186 149 q 288 139 253 139 q 359 143 326 139 q 416 158 392 148 q 455 185 441 169 q 469 226 469 202 q 425 294 469 272 q 288 316 380 316 l 221 316 l 221 464 l 288 464 "},"Ґ":{x_min:125,x_max:723,ha:751,o:"m 335 0 l 125 0 l 125 992 l 535 992 l 535 1202 l 723 1202 l 723 817 l 335 817 l 335 0 "},"Û":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 639 1071 q 567 1123 604 1093 q 494 1189 529 1152 q 422 1123 457 1152 q 352 1071 387 1093 l 215 1071 l 215 1089 q 254 1134 232 1108 q 297 1187 275 1160 q 339 1242 319 1215 q 375 1293 360 1269 l 616 1293 q 651 1242 631 1269 q 693 1187 671 1215 q 737 1134 715 1160 q 777 1089 760 1108 l 777 1071 l 639 1071 "},"і":{x_min:100.1875,x_max:325.359375,ha:424,o:"m 100 953 q 109 1002 100 983 q 133 1033 117 1021 q 169 1050 148 1045 q 212 1055 189 1055 q 256 1050 235 1055 q 291 1033 276 1045 q 316 1002 307 1021 q 325 953 325 983 q 316 905 325 925 q 291 874 307 885 q 256 857 276 862 q 212 852 235 852 q 169 857 189 852 q 133 874 148 862 q 109 905 117 885 q 100 953 100 925 m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 "},V:{x_min:-.25,x_max:847.25,ha:847,o:"m 634 992 l 847 992 l 537 0 l 308 0 l 0 992 l 212 992 l 380 394 q 389 356 383 383 q 401 296 395 329 q 414 231 408 263 q 423 176 420 198 q 433 231 427 198 q 446 296 439 263 q 459 355 453 328 q 469 394 465 382 l 634 992 "},"Ŗ":{x_min:125,x_max:875.25,ha:875,o:"m 335 545 l 393 545 q 520 581 481 545 q 558 685 558 616 q 517 786 558 756 q 389 817 476 817 l 335 817 l 335 545 m 335 379 l 335 0 l 125 0 l 125 992 l 396 992 q 678 918 587 992 q 769 694 769 844 q 755 601 769 642 q 719 527 741 559 q 666 471 696 495 q 604 430 637 447 q 739 215 679 310 q 789 136 765 175 q 832 67 813 98 q 863 18 851 37 l 875 0 l 641 0 l 427 379 l 335 379 m 332 -288 q 344 -242 338 -268 q 355 -188 350 -216 q 366 -134 361 -161 q 373 -85 371 -107 l 565 -85 l 565 -98 q 516 -198 544 -145 q 452 -307 488 -251 l 332 -307 l 332 -288 "},"@":{x_min:69,x_max:1134,ha:1203,o:"m 1134 509 q 1118 382 1134 445 q 1072 269 1103 319 q 994 188 1041 219 q 883 158 946 158 q 834 164 857 158 q 793 182 812 170 q 760 210 774 194 q 738 245 746 226 l 728 245 q 698 212 715 228 q 661 184 682 196 q 614 165 640 172 q 559 158 589 158 q 459 177 503 158 q 385 232 415 196 q 340 317 356 267 q 325 427 325 367 q 346 556 325 497 q 406 656 367 614 q 501 722 445 699 q 627 746 558 746 q 690 742 658 746 q 753 733 723 739 q 810 721 783 728 q 855 708 836 714 l 841 423 q 840 394 840 408 q 840 376 840 380 q 844 329 840 347 q 855 300 848 311 q 872 286 863 290 q 891 282 881 282 q 932 300 915 282 q 961 349 950 318 q 979 422 973 381 q 985 511 985 464 q 959 665 985 597 q 888 780 933 733 q 779 851 842 827 q 642 875 716 875 q 459 841 538 875 q 327 744 380 806 q 247 598 274 682 q 219 412 219 513 q 243 246 219 318 q 313 125 266 174 q 428 50 360 76 q 586 25 497 25 q 664 30 624 25 q 744 43 704 35 q 822 62 783 51 q 895 87 860 74 l 895 -42 q 753 -87 831 -70 q 588 -104 676 -104 q 368 -69 465 -104 q 205 31 272 -34 q 104 192 139 97 q 69 408 69 287 q 87 569 69 492 q 140 712 105 646 q 224 832 174 778 q 338 924 274 886 q 478 983 401 962 q 642 1004 555 1004 q 839 969 749 1004 q 995 871 929 935 q 1097 715 1060 807 q 1134 509 1134 624 m 482 425 q 508 315 482 349 q 576 282 533 282 q 625 295 604 282 q 659 332 646 308 q 679 390 672 356 q 688 465 686 423 l 696 615 q 665 620 683 618 q 627 622 646 622 q 560 605 587 622 q 515 560 532 588 q 490 497 497 533 q 482 425 482 461 "},"ʼ":{x_min:16,x_max:284,ha:298,o:"m 273 992 l 284 977 q 261 898 274 939 q 232 815 248 857 q 198 731 216 772 q 164 652 181 690 l 16 652 q 35 737 25 692 q 54 827 45 782 q 71 913 63 871 q 83 992 78 956 l 273 992 "},"℅":{x_min:43,x_max:1020,ha:1063,o:"m 837 992 l 313 0 l 150 0 l 674 992 l 837 992 m 1020 232 q 1004 128 1020 173 q 961 50 989 82 q 892 2 932 19 q 802 -14 852 -14 q 716 2 755 -14 q 647 50 676 19 q 602 128 618 82 q 587 232 587 173 q 602 337 587 291 q 645 414 617 383 q 714 462 673 446 q 805 479 754 479 q 890 462 851 479 q 958 414 929 446 q 1003 337 987 383 q 1020 232 1020 291 m 757 233 q 768 153 757 179 q 804 126 779 126 q 838 153 827 126 q 849 233 849 179 q 838 312 849 286 q 804 338 827 338 q 768 312 779 338 q 757 233 757 286 m 270 513 q 178 527 220 513 q 106 572 136 542 q 59 647 76 602 q 43 752 43 692 q 59 866 43 819 q 107 942 76 912 q 179 985 137 971 q 270 999 221 999 q 342 988 306 999 q 409 956 378 977 l 377 830 q 332 850 354 843 q 290 858 309 858 q 231 830 250 858 q 213 754 213 801 q 231 679 213 706 q 287 653 249 653 q 346 661 319 653 q 396 682 373 668 l 396 551 q 340 523 372 534 q 270 513 307 513 "},i:{x_min:100.1875,x_max:325.359375,ha:424,o:"m 100 953 q 109 1002 100 983 q 133 1033 117 1021 q 169 1050 148 1045 q 212 1055 189 1055 q 256 1050 235 1055 q 291 1033 276 1045 q 316 1002 307 1021 q 325 953 325 983 q 316 905 325 925 q 291 874 307 885 q 256 857 276 862 q 212 852 235 852 q 169 857 189 852 q 133 874 148 862 q 109 905 117 885 q 100 953 100 925 m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 "},"ќ":{x_min:109,x_max:818.25,ha:818,o:"m 563 758 l 791 758 l 522 394 l 818 0 l 583 0 l 315 384 l 315 0 l 109 0 l 109 758 l 315 758 l 315 389 l 563 758 m 330 842 l 330 860 q 360 905 344 879 q 392 958 376 931 q 422 1013 408 986 q 448 1064 437 1040 l 680 1064 l 680 1049 q 658 1021 672 1037 q 625 985 644 1004 q 586 946 607 966 q 544 907 565 926 q 502 871 522 888 q 467 842 483 854 l 330 842 "},"≤":{x_min:60,x_max:706.34375,ha:765,o:"m 60 0 l 60 148 l 705 148 l 705 0 l 60 0 m 706 179 l 61 475 l 61 573 l 706 909 l 706 746 l 270 531 l 706 341 l 706 179 "},"ё":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 181 953 q 188 994 181 977 q 208 1022 195 1011 q 238 1039 221 1034 q 275 1045 255 1045 q 312 1039 295 1045 q 342 1022 329 1034 q 363 994 355 1011 q 371 953 371 977 q 363 913 371 930 q 342 885 355 896 q 312 868 329 873 q 275 863 295 863 q 238 868 255 863 q 208 885 221 873 q 188 913 195 896 q 181 953 181 930 m 454 953 q 461 994 454 977 q 481 1022 468 1011 q 512 1039 494 1034 q 550 1045 529 1045 q 586 1039 569 1045 q 617 1022 603 1034 q 638 994 630 1011 q 646 953 646 977 q 638 913 646 930 q 617 885 630 896 q 586 868 603 873 q 550 863 569 863 q 481 885 509 863 q 454 953 454 907 "},"υ":{x_min:97,x_max:780,ha:861,o:"m 426 -12 q 266 15 330 -12 q 165 91 202 42 q 112 205 127 139 q 97 345 97 270 l 97 758 l 303 758 l 303 340 q 335 197 303 241 q 432 154 366 154 q 493 168 467 154 q 537 213 520 182 q 564 295 555 244 q 573 417 573 345 q 569 503 573 461 q 559 586 566 545 q 544 670 553 628 q 524 758 535 712 l 732 758 q 752 670 744 712 q 767 587 761 629 q 776 502 773 545 q 780 410 780 459 q 757 221 780 301 q 689 90 734 141 q 579 13 645 38 q 426 -12 513 -12 "},"ĕ":{x_min:69,x_max:741,ha:807,o:"m 414 625 q 322 586 358 625 q 279 465 285 548 l 546 465 q 537 529 545 499 q 512 579 529 558 q 471 613 496 601 q 414 625 447 625 m 441 -14 q 291 9 359 -14 q 173 81 222 33 q 96 202 123 129 q 69 373 69 275 q 94 548 69 473 q 164 672 119 622 q 272 747 209 722 q 413 773 336 773 q 549 750 489 773 q 653 683 610 727 q 718 574 695 639 q 741 427 741 510 l 741 327 l 275 327 q 289 248 277 283 q 325 189 302 213 q 380 152 348 165 q 454 139 412 139 q 520 143 489 139 q 580 154 551 146 q 638 172 609 161 q 697 198 667 184 l 697 39 q 642 15 669 25 q 584 -1 614 5 q 518 -10 553 -7 q 441 -14 483 -14 m 651 1071 q 629 978 647 1020 q 581 906 612 936 q 505 858 549 875 q 402 842 460 842 q 298 858 342 842 q 223 904 253 874 q 177 976 193 934 q 159 1071 161 1018 l 274 1071 q 286 1024 277 1041 q 312 998 296 1007 q 351 987 328 989 q 403 985 374 985 q 450 988 428 985 q 489 1000 472 991 q 518 1026 507 1009 q 532 1071 530 1043 l 651 1071 "},"ﬃ":{x_min:28,x_max:1399.359375,ha:1498,o:"m 503 604 l 348 604 l 348 0 l 142 0 l 142 604 l 28 604 l 28 703 l 142 758 l 142 813 q 159 934 142 886 q 209 1010 177 982 q 288 1051 242 1039 q 392 1063 334 1063 q 497 1053 454 1063 q 570 1030 540 1043 l 521 877 q 477 890 500 884 q 422 896 454 896 q 365 871 382 896 q 348 804 348 845 l 348 758 l 503 758 l 503 604 m 1041 604 l 886 604 l 886 0 l 680 0 l 680 604 l 566 604 l 566 703 l 680 758 l 680 813 q 697 934 680 886 q 747 1010 715 982 q 826 1051 780 1039 q 930 1063 872 1063 q 1035 1053 992 1063 q 1108 1030 1078 1043 l 1059 877 q 1015 890 1038 884 q 960 896 992 896 q 903 871 920 896 q 886 804 886 845 l 886 758 l 1041 758 l 1041 604 m 1174 953 q 1183 1002 1174 983 q 1207 1033 1191 1021 q 1243 1050 1222 1045 q 1286 1055 1263 1055 q 1330 1050 1309 1055 q 1365 1033 1350 1045 q 1390 1002 1381 1021 q 1399 953 1399 983 q 1390 905 1399 925 q 1365 874 1381 885 q 1330 857 1350 862 q 1286 852 1309 852 q 1243 857 1263 852 q 1207 874 1222 862 q 1183 905 1191 885 q 1174 953 1174 925 m 1389 0 l 1183 0 l 1183 758 l 1389 758 l 1389 0 "},"ż":{x_min:37,x_max:595,ha:635,o:"m 595 0 l 37 0 l 37 117 l 347 604 l 58 604 l 58 758 l 582 758 l 582 628 l 281 153 l 595 153 l 595 0 m 214 954 q 222 1003 214 984 q 246 1034 231 1022 q 282 1051 262 1046 q 326 1056 303 1056 q 369 1051 349 1056 q 405 1034 390 1046 q 429 1003 420 1022 q 439 954 439 984 q 429 906 439 926 q 405 875 420 886 q 369 858 390 863 q 326 853 349 853 q 282 858 303 853 q 246 875 262 863 q 222 906 231 886 q 214 954 214 926 "},"Э":{x_min:48.359375,x_max:784,ha:865,o:"m 348 831 q 229 812 287 831 q 115 766 171 793 l 48 936 q 192 987 116 968 q 354 1006 268 1006 q 536 971 457 1006 q 671 871 616 937 q 755 710 726 805 q 784 494 784 615 q 757 285 784 379 q 676 125 731 192 q 537 22 621 59 q 338 -14 453 -14 q 263 -10 299 -14 q 195 -1 228 -7 q 130 13 162 4 q 66 36 98 23 l 66 213 q 199 174 137 188 q 321 160 260 160 q 499 223 436 160 q 567 411 562 285 l 188 411 l 188 586 l 566 586 q 548 689 564 644 q 504 766 532 735 q 436 814 475 797 q 348 831 396 831 "},"ő":{x_min:69,x_max:774,ha:832,o:"m 280 380 q 312 209 280 267 q 415 152 344 152 q 518 210 486 152 q 550 380 550 267 q 518 550 550 494 q 414 606 486 606 q 312 550 343 606 q 280 380 280 494 m 762 380 q 737 212 762 285 q 668 88 713 138 q 558 12 623 38 q 413 -14 494 -14 q 275 12 338 -14 q 166 88 212 38 q 94 212 120 138 q 69 380 69 285 q 93 548 69 474 q 162 671 117 621 q 271 747 207 721 q 417 773 336 773 q 555 747 492 773 q 664 671 618 721 q 736 548 710 621 q 762 380 762 474 m 183 842 l 183 860 q 213 905 197 879 q 245 958 229 931 q 275 1013 261 986 q 300 1064 290 1040 l 505 1064 l 505 1049 q 483 1021 497 1037 q 450 985 469 1004 q 411 946 432 966 q 368 907 389 926 q 327 871 347 888 q 292 842 307 854 l 183 842 m 452 842 l 452 860 q 482 905 466 879 q 514 958 498 931 q 544 1013 530 986 q 569 1064 559 1040 l 774 1064 l 774 1049 q 752 1021 766 1037 q 719 985 738 1004 q 680 946 701 966 q 638 907 659 926 q 597 871 616 888 q 561 842 577 854 l 452 842 "},"Ŏ":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 m 770 1300 q 748 1207 766 1249 q 700 1135 731 1165 q 624 1087 668 1104 q 521 1071 579 1071 q 417 1087 461 1071 q 342 1133 372 1103 q 296 1205 312 1163 q 278 1300 280 1247 l 393 1300 q 405 1253 396 1270 q 431 1227 415 1236 q 470 1216 447 1218 q 522 1214 493 1214 q 569 1217 547 1214 q 608 1229 591 1220 q 637 1255 626 1238 q 651 1300 649 1272 l 770 1300 "},"ю":{x_min:109,x_max:1114,ha:1184,o:"m 1114 380 q 1090 212 1114 285 q 1024 88 1067 138 q 919 12 981 38 q 779 -14 856 -14 q 657 5 713 -14 q 558 66 601 25 q 488 168 516 106 q 452 313 461 229 l 315 313 l 315 0 l 109 0 l 109 758 l 315 758 l 315 467 l 454 467 q 492 597 464 540 q 562 693 519 654 q 660 752 604 732 q 783 773 716 773 q 916 747 855 773 q 1020 671 976 721 q 1089 548 1064 621 q 1114 380 1114 474 m 658 380 q 687 209 658 267 q 781 152 716 152 q 873 209 845 152 q 902 380 902 267 q 873 550 902 494 q 779 606 845 606 q 687 550 716 606 q 658 380 658 494 "},"İ":{x_min:44.28125,x_max:495.96875,ha:541,o:"m 495 0 l 44 0 l 44 119 l 165 174 l 165 817 l 44 872 l 44 992 l 495 992 l 495 872 l 375 817 l 375 174 l 495 119 l 495 0 m 154 1183 q 162 1232 154 1213 q 186 1263 171 1251 q 222 1280 202 1275 q 266 1285 243 1285 q 309 1280 289 1285 q 345 1263 330 1275 q 369 1232 360 1251 q 379 1183 379 1213 q 369 1135 379 1155 q 345 1104 360 1115 q 309 1087 330 1092 q 266 1082 289 1082 q 222 1087 243 1082 q 186 1104 202 1092 q 162 1135 171 1115 q 154 1183 154 1155 "},"Ě":{x_min:124,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 686 1274 q 646 1229 669 1255 q 602 1176 624 1203 q 560 1121 580 1148 q 525 1071 540 1094 l 284 1071 q 248 1121 269 1094 q 206 1176 228 1148 q 163 1229 184 1203 q 124 1274 141 1255 l 124 1293 l 261 1293 q 331 1240 296 1270 q 403 1174 366 1211 q 476 1240 438 1211 q 548 1293 513 1270 l 686 1293 l 686 1274 "},"‹":{x_min:55,x_max:413,ha:469,o:"m 55 388 l 264 697 l 413 616 l 265 380 l 413 143 l 264 63 l 55 370 l 55 388 "},"ķ":{x_min:109,x_max:819.25,ha:819,o:"m 307 412 l 383 527 l 568 758 l 801 758 l 527 429 l 819 0 l 580 0 l 396 291 l 315 235 l 315 0 l 109 0 l 109 1055 l 315 1055 l 315 584 l 305 412 l 307 412 m 303 -288 q 315 -242 309 -268 q 326 -188 321 -216 q 337 -134 332 -161 q 344 -85 342 -107 l 536 -85 l 536 -98 q 487 -198 515 -145 q 423 -307 459 -251 l 303 -307 l 303 -288 "},"ì":{x_min:-29,x_max:321,ha:424,o:"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 m 183 842 q 128 889 160 860 q 64 946 95 917 q 7 1004 33 976 q -29 1049 -18 1031 l -29 1064 l 202 1064 q 228 1013 213 1040 q 258 958 242 986 q 290 905 274 931 q 321 860 306 879 l 321 842 l 183 842 "},"±":{x_min:60.09375,x_max:705.765625,ha:765,o:"m 309 457 l 60 457 l 60 606 l 309 606 l 309 856 l 457 856 l 457 606 l 705 606 l 705 457 l 457 457 l 457 209 l 309 209 l 309 457 m 60 0 l 60 148 l 705 148 l 705 0 l 60 0 "},"|":{x_min:309,x_max:457.53125,ha:765,o:"m 309 1051 l 457 1051 l 457 -315 l 309 -315 l 309 1051 "},"§":{x_min:72,x_max:607,ha:675,o:"m 82 546 q 89 601 82 576 q 108 648 96 626 q 137 686 121 669 q 172 715 154 703 q 105 782 129 742 q 82 873 82 822 q 101 954 82 917 q 157 1016 121 990 q 244 1056 193 1042 q 356 1070 294 1070 q 485 1054 425 1070 q 602 1013 545 1038 l 547 884 q 453 923 501 906 q 353 941 405 941 q 273 925 298 941 q 248 877 248 909 q 256 845 248 860 q 282 818 264 831 q 327 791 299 804 q 392 762 354 778 q 480 720 440 743 q 547 669 519 697 q 591 606 575 641 q 607 530 607 572 q 583 421 607 462 q 522 354 560 379 q 585 291 564 327 q 607 205 607 255 q 585 114 607 155 q 526 45 564 74 q 432 1 487 17 q 308 -14 377 -14 q 176 0 234 -14 q 72 39 119 14 l 72 181 q 129 155 98 167 q 190 134 159 144 q 252 120 222 125 q 309 114 282 114 q 372 120 347 114 q 412 137 397 127 q 434 162 427 148 q 440 193 440 177 q 435 224 440 210 q 415 250 430 237 q 372 277 400 262 q 300 310 345 291 q 207 353 248 331 q 139 402 166 375 q 96 464 111 430 q 82 546 82 499 m 234 561 q 272 485 234 518 q 390 418 310 452 l 400 414 q 420 431 411 421 q 437 453 430 441 q 449 480 445 465 q 454 512 454 495 q 447 552 454 534 q 422 588 440 571 q 373 622 404 605 q 295 656 342 639 q 272 642 283 651 q 253 620 261 632 q 239 593 244 608 q 234 561 234 578 "},"џ":{x_min:109,x_max:783,ha:892,o:"m 109 0 l 109 758 l 315 758 l 315 153 l 576 153 l 576 758 l 783 758 l 783 0 l 531 0 l 531 -272 l 353 -272 l 353 0 l 109 0 "},"љ":{x_min:0,x_max:1143,ha:1198,o:"m 530 0 l 530 604 l 392 604 q 358 319 378 437 q 308 127 339 201 q 231 20 277 54 q 118 -14 185 -14 q 0 6 46 -14 l 0 165 q 31 155 14 159 q 66 152 48 152 q 97 162 82 152 q 126 198 112 172 q 152 268 140 224 q 175 380 164 312 q 196 540 186 447 q 214 758 205 633 l 736 758 l 736 467 l 829 467 q 1066 411 989 467 q 1143 242 1143 356 q 1125 142 1143 187 q 1069 65 1107 97 q 971 17 1031 34 q 827 0 911 0 l 530 0 m 936 239 q 906 300 936 281 q 816 319 876 319 l 736 319 l 736 147 l 819 147 q 903 168 870 147 q 936 239 936 189 "},q:{x_min:69,x_max:735,ha:844,o:"m 407 152 q 470 164 444 152 q 511 202 495 177 q 534 265 526 227 q 542 354 541 303 l 542 379 q 535 476 542 434 q 513 548 529 519 q 471 591 497 577 q 406 606 445 606 q 311 548 341 606 q 280 378 280 489 q 311 208 280 264 q 407 152 342 152 m 331 -14 q 224 11 272 -14 q 141 85 176 36 q 87 208 106 134 q 69 377 69 281 q 88 548 69 474 q 143 672 107 622 q 228 747 178 722 q 337 773 277 773 q 405 764 375 773 q 460 741 436 756 q 504 706 485 726 q 538 663 523 687 l 543 663 l 560 758 l 735 758 l 735 -334 l 528 -334 l 528 -13 q 529 19 528 0 q 532 57 531 39 q 536 101 534 79 l 528 101 q 496 56 514 78 q 453 19 478 35 q 399 -4 429 4 q 331 -14 369 -14 "},"˳":{x_min:60,x_max:400,ha:463,o:"m 400 -244 q 386 -312 400 -282 q 350 -363 373 -342 q 295 -395 326 -384 q 227 -407 264 -407 q 159 -395 190 -407 q 106 -363 128 -384 q 72 -313 84 -343 q 60 -245 60 -283 q 72 -178 60 -208 q 106 -128 84 -148 q 159 -96 128 -107 q 227 -85 190 -85 q 295 -96 263 -85 q 349 -128 326 -107 q 386 -178 372 -148 q 400 -244 400 -207 m 294 -245 q 276 -197 294 -215 q 230 -180 258 -180 q 183 -197 201 -180 q 165 -245 165 -215 q 181 -293 165 -276 q 230 -311 197 -311 q 276 -293 258 -311 q 294 -245 294 -276 "},"ή":{x_min:109,x_max:767,ha:871,o:"m 560 -334 l 560 438 q 534 564 560 522 q 454 606 509 606 q 388 590 415 606 q 345 542 362 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 758 l 267 758 l 294 661 l 306 661 q 345 710 322 689 q 395 745 368 732 q 452 766 422 759 q 515 773 483 773 q 704 702 642 773 q 767 487 767 632 l 767 -334 l 560 -334 m 366 860 q 378 906 372 880 q 389 960 384 932 q 400 1014 395 987 q 407 1064 404 1041 l 599 1064 l 599 1049 q 550 950 578 1003 q 486 842 522 897 l 366 842 l 366 860 "},"Ж":{x_min:-.25,x_max:1254.25,ha:1254,o:"m 324 516 l 18 992 l 235 992 l 529 512 l 529 992 l 725 992 l 725 512 l 1018 992 l 1235 992 l 929 516 l 1254 0 l 1029 0 l 725 503 l 725 0 l 529 0 l 529 503 l 224 0 l 0 0 l 324 516 "},"®":{x_min:68,x_max:1088,ha:1156,o:"m 785 614 q 758 513 785 550 q 688 456 732 475 l 848 185 l 676 185 l 555 414 l 523 414 l 523 185 l 368 185 l 368 806 l 547 806 q 727 758 670 806 q 785 614 785 711 m 523 528 l 545 528 q 609 547 590 528 q 629 611 629 566 q 623 650 629 635 q 608 675 618 666 q 581 688 597 684 q 543 692 565 692 l 523 692 l 523 528 m 68 495 q 86 631 68 566 q 137 753 104 696 q 217 856 170 809 q 320 936 264 903 q 442 987 377 969 q 578 1006 507 1006 q 713 987 648 1006 q 835 936 778 969 q 938 856 892 903 q 1018 753 985 809 q 1069 631 1051 696 q 1088 495 1088 566 q 1069 359 1088 425 q 1018 238 1051 294 q 938 134 985 181 q 835 55 892 88 q 713 3 778 21 q 578 -14 648 -14 q 442 3 507 -14 q 320 55 377 21 q 217 134 264 88 q 137 238 170 181 q 86 359 104 294 q 68 495 68 425 m 164 496 q 196 334 164 409 q 285 203 229 259 q 416 114 341 147 q 578 82 491 82 q 739 114 664 82 q 870 203 814 147 q 959 334 926 259 q 991 496 991 409 q 959 657 991 582 q 870 788 926 732 q 739 877 814 844 q 578 909 664 909 q 416 877 491 909 q 285 788 341 844 q 196 657 229 732 q 164 496 164 582 "},"Н":{x_min:125,x_max:882,ha:1007,o:"m 882 0 l 671 0 l 671 428 l 335 428 l 335 0 l 125 0 l 125 992 l 335 992 l 335 603 l 671 603 l 671 992 l 882 992 l 882 0 "},"Ε":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 "},"₧":{x_min:125,x_max:1172,ha:1211,o:"m 321 527 l 363 527 q 498 562 453 527 q 544 675 544 597 q 503 782 544 747 q 375 817 462 817 l 321 817 l 321 527 m 740 682 q 720 557 740 617 q 655 452 700 498 q 537 380 610 407 q 355 353 463 353 l 321 353 l 321 0 l 125 0 l 125 992 l 372 992 q 537 970 467 992 q 651 909 606 949 q 718 812 696 869 q 740 682 740 755 m 1070 138 q 1123 145 1099 138 q 1172 162 1147 151 l 1172 20 q 1101 -4 1142 5 q 1010 -14 1059 -14 q 923 -2 962 -14 q 855 35 883 8 q 812 107 827 62 q 797 218 797 151 l 797 436 l 699 436 l 699 507 l 812 575 l 878 735 l 992 735 l 992 574 l 1163 574 l 1163 436 l 992 436 l 992 225 q 998 189 992 205 q 1015 161 1004 173 q 1039 144 1025 150 q 1070 138 1053 138 "},"л":{x_min:0,x_max:746,ha:855,o:"m 746 0 l 539 0 l 539 604 l 392 604 q 358 319 378 437 q 308 127 339 201 q 231 20 277 54 q 118 -14 185 -14 q 0 7 46 -14 l 0 173 q 31 163 14 167 q 66 159 48 159 q 97 169 82 159 q 126 205 112 179 q 152 274 140 231 q 175 384 164 318 q 196 543 186 451 q 214 758 205 635 l 746 758 l 746 0 "},"σ":{x_min:69,x_max:845,ha:872,o:"m 774 314 q 750 184 774 244 q 683 80 727 124 q 572 11 638 36 q 419 -14 505 -14 q 275 10 340 -14 q 165 83 211 34 q 94 203 119 131 q 69 369 69 275 q 97 548 69 474 q 177 669 125 622 q 305 738 230 716 q 474 760 380 760 l 845 760 l 845 593 l 653 593 q 699 538 678 567 q 738 474 721 508 q 764 400 754 440 q 774 314 774 360 m 280 362 q 288 276 280 315 q 314 210 297 237 q 358 167 331 182 q 422 152 384 152 q 485 166 459 152 q 529 206 512 180 q 554 267 545 231 q 562 347 562 303 q 543 486 562 428 q 487 593 523 544 l 458 593 q 378 582 412 593 q 322 543 344 570 q 290 471 301 516 q 280 362 280 427 "},"θ":{x_min:69,x_max:761,ha:831,o:"m 761 528 q 742 300 761 401 q 681 129 723 199 q 573 22 639 59 q 413 -14 507 -14 q 261 22 326 -14 q 153 129 196 59 q 90 300 111 199 q 69 528 69 401 q 87 757 69 656 q 148 927 106 857 q 255 1034 189 997 q 413 1071 320 1071 q 566 1034 501 1071 q 674 928 631 998 q 739 758 718 859 q 761 528 761 657 m 413 133 q 514 212 483 133 q 549 454 545 292 l 280 454 q 313 213 282 294 q 413 133 343 133 m 415 923 q 316 845 347 923 q 281 608 286 766 l 549 608 q 514 845 545 766 q 415 923 482 923 "}," ":{x_min:0,x_max:0,ha:361},"∑":{x_min:28,x_max:869,ha:876,o:"m 28 -310 l 28 -194 l 418 371 l 38 879 l 38 992 l 829 992 l 829 825 l 316 825 l 651 375 l 299 -135 l 869 -135 l 869 -310 l 28 -310 "},"Ώ":{x_min:-39,x_max:1060,ha:1092,o:"m 579 832 q 405 759 460 832 q 351 547 351 686 q 360 434 351 487 q 390 336 369 381 q 445 253 411 290 q 531 189 480 217 l 531 0 l 98 0 l 98 176 l 350 176 q 261 248 301 206 q 193 343 221 290 q 150 459 165 396 q 135 591 135 521 q 163 762 135 685 q 248 893 191 838 q 387 977 304 948 q 579 1007 470 1007 q 770 977 688 1007 q 909 893 853 948 q 994 761 966 838 q 1023 589 1023 684 q 1007 458 1023 520 q 963 343 992 396 q 895 248 935 290 q 805 176 855 206 l 1060 176 l 1060 0 l 622 0 l 622 189 q 710 253 675 216 q 766 336 745 290 q 797 435 788 382 q 806 548 806 488 q 752 759 806 686 q 579 832 697 832 m -39 789 q -26 835 -32 809 q -15 889 -20 861 q -5 943 -9 916 q 2 993 0 970 l 194 993 l 194 978 q 145 879 173 932 q 81 771 117 826 l -39 771 l -39 789 "},"ẃ":{x_min:-.25,x_max:1120.25,ha:1120,o:"m 688 0 l 629 265 q 622 297 626 276 q 612 346 618 319 q 601 403 607 372 q 589 463 595 433 q 559 613 575 532 l 555 613 q 527 462 539 532 q 515 402 521 432 q 504 344 510 371 q 494 296 499 317 q 487 262 490 274 l 426 0 l 204 0 l 0 758 l 205 758 l 282 422 q 294 359 288 395 q 306 284 301 322 q 317 213 312 246 q 324 160 322 179 l 328 160 q 331 193 329 172 q 337 237 334 214 q 344 286 341 261 q 352 332 348 311 q 359 371 356 354 q 364 394 362 387 l 447 758 l 674 758 l 754 394 q 763 348 757 379 q 774 281 768 317 q 784 212 780 246 q 789 160 788 178 l 793 160 q 800 210 795 176 q 811 281 805 243 q 824 357 817 320 q 837 422 831 395 l 917 758 l 1120 758 l 913 0 l 688 0 m 453 842 l 453 860 q 483 905 467 879 q 515 958 499 931 q 545 1013 531 986 q 571 1064 560 1040 l 803 1064 l 803 1049 q 781 1021 795 1037 q 748 985 767 1004 q 709 946 730 966 q 667 907 688 926 q 625 871 645 888 q 590 842 606 854 l 453 842 "},"+":{x_min:60.09375,x_max:705.765625,ha:765,o:"m 309 415 l 60 415 l 60 564 l 309 564 l 309 814 l 457 814 l 457 564 l 705 564 l 705 415 l 457 415 l 457 168 l 309 168 l 309 415 "},"Ë":{x_min:125,x_max:696,ha:778,o:"m 696 0 l 125 0 l 125 992 l 696 992 l 696 817 l 335 817 l 335 602 l 670 602 l 670 427 l 335 427 l 335 174 l 696 174 l 696 0 m 186 1182 q 193 1223 186 1206 q 213 1251 200 1240 q 243 1268 226 1263 q 280 1274 260 1274 q 317 1268 300 1274 q 347 1251 334 1263 q 368 1223 360 1240 q 376 1182 376 1206 q 368 1142 376 1159 q 347 1114 360 1125 q 317 1097 334 1102 q 280 1092 300 1092 q 243 1097 260 1092 q 213 1114 226 1102 q 193 1142 200 1125 q 186 1182 186 1159 m 459 1182 q 466 1223 459 1206 q 486 1251 473 1240 q 517 1268 499 1263 q 555 1274 534 1274 q 591 1268 574 1274 q 622 1251 608 1263 q 643 1223 635 1240 q 651 1182 651 1206 q 643 1142 651 1159 q 622 1114 635 1125 q 591 1097 608 1102 q 555 1092 574 1092 q 486 1114 514 1092 q 459 1182 459 1136 "},"Š":{x_min:63.46875,x_max:668,ha:728,o:"m 668 275 q 645 155 668 208 q 578 64 622 102 q 471 6 535 26 q 326 -14 408 -14 q 187 0 254 -14 q 63 45 120 15 l 63 241 q 129 211 96 225 q 196 185 162 197 q 265 167 231 174 q 333 160 299 160 q 392 168 368 160 q 432 190 417 176 q 455 223 448 203 q 462 264 462 242 q 450 314 462 292 q 417 354 438 335 q 365 390 396 372 q 298 427 335 408 q 228 467 267 444 q 155 524 189 490 q 98 607 121 558 q 75 723 75 655 q 97 842 75 790 q 159 931 119 895 q 258 987 200 968 q 388 1006 316 1006 q 458 1001 424 1006 q 526 987 492 996 q 594 965 560 978 q 663 936 627 953 l 596 772 q 539 797 565 786 q 487 816 512 808 q 438 827 462 823 q 389 831 414 831 q 308 802 336 831 q 280 727 280 774 q 288 683 280 702 q 316 646 297 663 q 364 612 334 630 q 435 572 393 594 q 529 517 486 545 q 603 454 572 488 q 651 376 634 420 q 668 275 668 333 m 655 1274 q 615 1229 638 1255 q 571 1176 593 1203 q 529 1121 549 1148 q 494 1071 509 1094 l 253 1071 q 217 1121 238 1094 q 175 1176 197 1148 q 132 1229 153 1203 q 93 1274 110 1255 l 93 1293 l 230 1293 q 300 1240 265 1270 q 372 1174 335 1211 q 445 1240 407 1211 q 517 1293 482 1270 l 655 1293 l 655 1274 "}," ":{x_min:0,x_max:0,ha:1389},"ð":{x_min:50,x_max:744,ha:802,o:"m 310 887 q 260 917 286 901 q 205 949 234 934 l 270 1065 q 363 1018 320 1041 q 445 969 407 995 l 599 1063 l 667 959 l 549 887 q 634 787 598 840 q 695 673 671 734 q 731 540 719 611 q 744 388 744 470 q 719 217 744 291 q 649 91 695 142 q 539 12 604 39 q 394 -14 475 -14 q 256 9 319 -14 q 147 76 193 32 q 75 184 101 120 q 50 331 50 248 q 72 478 50 414 q 133 585 94 541 q 228 652 173 629 q 350 675 284 675 q 461 653 415 675 q 529 598 507 631 l 543 599 q 490 711 524 659 q 411 802 456 764 l 254 704 l 185 810 l 310 887 m 532 360 q 524 421 532 392 q 500 472 516 450 q 458 508 483 495 q 398 521 432 521 q 293 474 324 521 q 261 330 261 426 q 269 252 261 287 q 293 192 277 217 q 336 153 310 167 q 398 139 362 139 q 501 194 469 139 q 532 360 532 249 "},"щ":{x_min:109,x_max:1307,ha:1327,o:"m 1196 149 l 1307 149 l 1307 -272 l 1128 -272 l 1128 0 l 109 0 l 109 758 l 315 758 l 315 153 l 549 153 l 549 758 l 755 758 l 755 153 l 989 153 l 989 758 l 1196 758 l 1196 149 "},"℮":{x_min:69,x_max:789,ha:860,o:"m 429 -24 q 273 7 341 -24 q 161 92 206 39 q 92 215 115 146 q 69 359 69 284 q 83 480 69 426 q 124 577 98 534 q 185 651 150 620 q 259 702 219 682 q 343 733 299 723 q 429 743 386 743 q 571 716 506 743 q 685 639 637 689 q 761 518 734 589 q 789 358 789 447 l 227 358 l 227 117 q 264 86 242 101 q 312 60 286 71 q 368 41 338 48 q 429 34 398 34 q 518 45 479 34 q 590 76 558 56 q 648 126 622 96 q 697 193 674 155 l 746 165 q 693 92 721 126 q 628 31 665 58 q 542 -9 590 5 q 429 -24 493 -24 m 632 417 l 632 605 q 599 633 619 618 q 553 659 579 647 q 495 678 527 671 q 428 686 463 686 q 363 679 393 686 q 309 661 334 673 q 264 636 284 650 q 227 606 244 622 l 227 417 l 632 417 "},"Φ":{x_min:62,x_max:1077,ha:1139,o:"m 663 305 l 671 305 q 763 321 724 305 q 828 366 802 337 q 867 433 854 394 q 881 516 881 471 q 869 592 881 556 q 834 656 858 629 q 774 700 810 684 q 688 717 738 717 l 663 717 l 663 305 m 476 -14 l 476 139 l 462 139 q 328 155 387 139 q 225 199 269 171 q 149 264 181 227 q 99 343 118 301 q 70 429 79 385 q 62 514 62 472 q 84 649 62 583 q 153 768 106 716 q 272 852 200 820 q 442 884 343 884 l 476 884 l 476 1006 l 663 1006 l 663 884 l 696 884 q 867 852 795 884 q 985 768 938 820 q 1054 649 1032 716 q 1077 514 1077 583 q 1068 429 1077 472 q 1039 343 1059 385 q 989 264 1020 301 q 913 199 958 227 q 810 155 869 171 q 676 139 751 139 l 663 139 l 663 -14 l 476 -14 m 476 717 l 451 717 q 365 700 401 717 q 305 656 328 684 q 269 592 281 629 q 258 516 258 556 q 271 433 258 471 q 310 366 284 394 q 375 321 336 337 q 467 305 414 305 l 476 305 l 476 717 "},"ş":{x_min:66,x_max:614,ha:668,o:"m 614 225 q 592 120 614 165 q 530 45 570 75 q 433 0 490 15 q 305 -14 376 -14 q 236 -11 268 -14 q 176 -3 204 -9 q 121 9 147 1 q 67 30 94 17 l 67 201 q 127 176 95 187 q 189 156 158 164 q 249 143 220 148 q 304 139 279 139 q 351 144 331 139 q 383 158 370 149 q 401 179 395 167 q 407 205 407 191 q 402 230 407 219 q 382 254 398 242 q 337 283 367 267 q 256 322 307 299 q 171 366 207 344 q 112 415 135 388 q 77 477 88 442 q 66 561 66 512 q 86 653 66 614 q 144 720 106 693 q 234 759 181 746 q 351 773 286 773 q 480 757 419 773 q 605 710 541 741 l 543 564 q 445 604 492 588 q 352 619 398 619 q 291 604 310 619 q 272 563 272 589 q 277 539 272 550 q 296 518 282 529 q 336 493 310 506 q 403 461 362 480 q 490 419 451 440 q 556 372 528 398 q 599 310 584 345 q 614 225 614 275 m 473 -169 q 462 -239 473 -208 q 427 -290 451 -269 q 362 -322 403 -311 q 263 -334 322 -334 q 208 -329 232 -334 q 164 -319 183 -325 l 164 -205 q 186 -210 174 -208 q 212 -215 199 -213 q 238 -218 225 -217 q 261 -220 251 -220 q 295 -210 280 -220 q 310 -178 310 -201 q 285 -133 310 -153 q 197 -105 259 -114 l 250 0 l 381 0 l 362 -41 q 403 -59 383 -48 q 438 -87 423 -71 q 463 -124 453 -103 q 473 -169 473 -144 "}," ":{x_min:0,x_max:0,ha:765},"ı":{x_min:109,x_max:315.859375,ha:424,o:"m 315 0 l 109 0 l 109 758 l 315 758 l 315 0 "},"ä":{x_min:58,x_max:694,ha:798,o:"m 548 0 l 508 104 l 502 104 q 457 51 479 73 q 408 14 434 28 q 349 -7 382 0 q 272 -14 316 -14 q 187 0 226 -14 q 119 44 148 15 q 74 119 90 74 q 58 226 58 164 q 135 404 58 347 q 366 467 212 461 l 487 472 l 487 529 q 460 598 487 575 q 384 620 432 620 q 289 606 335 620 q 196 568 242 592 l 129 705 q 255 755 186 737 q 400 774 324 774 q 618 707 542 774 q 694 505 694 641 l 694 0 l 548 0 m 487 351 l 418 348 q 348 337 377 347 q 302 312 319 328 q 277 274 285 296 q 269 226 269 253 q 292 159 269 178 q 353 139 315 139 q 406 149 381 139 q 448 177 430 158 q 476 225 466 197 q 487 289 487 253 l 487 351 m 173 953 q 180 994 173 977 q 200 1022 187 1011 q 230 1039 213 1034 q 267 1045 247 1045 q 304 1039 287 1045 q 334 1022 321 1034 q 355 994 347 1011 q 363 953 363 977 q 355 913 363 930 q 334 885 347 896 q 304 868 321 873 q 267 863 287 863 q 230 868 247 863 q 200 885 213 873 q 180 913 187 896 q 173 953 173 930 m 446 953 q 453 994 446 977 q 473 1022 460 1011 q 504 1039 486 1034 q 542 1045 521 1045 q 578 1039 561 1045 q 609 1022 595 1034 q 630 994 622 1011 q 638 953 638 977 q 630 913 638 930 q 609 885 622 896 q 578 868 595 873 q 542 863 561 863 q 473 885 501 863 q 446 953 446 907 "},"¹":{x_min:63,x_max:396.421875,ha:526,o:"m 396 397 l 235 397 l 235 700 q 235 734 235 713 q 236 776 235 755 q 238 814 237 797 q 240 840 239 832 q 229 828 236 835 q 216 813 223 820 q 202 799 209 805 q 189 787 195 792 l 136 746 l 63 832 l 266 992 l 396 992 l 396 397 "},W:{x_min:-.25,x_max:1287.25,ha:1287,o:"m 1048 0 l 809 0 l 687 489 q 681 517 684 499 q 672 559 677 536 q 663 607 667 582 q 654 656 658 632 q 647 700 650 679 q 642 732 644 720 q 638 700 641 720 q 631 656 635 679 q 622 608 627 633 q 613 559 618 582 q 605 517 609 536 q 598 487 601 498 l 477 0 l 238 0 l 0 992 l 206 992 l 319 450 q 325 418 321 439 q 333 372 328 398 q 343 318 338 346 q 353 262 348 289 q 361 211 357 235 q 368 173 366 188 q 373 211 370 188 q 381 260 377 234 q 390 314 385 286 q 399 366 395 342 q 407 409 404 390 q 413 436 411 428 l 551 992 l 735 992 l 873 436 q 879 409 875 428 q 887 366 882 390 q 896 314 891 342 q 905 260 901 286 q 913 211 910 234 q 919 173 917 188 q 925 211 921 188 q 933 262 929 235 q 943 318 938 289 q 953 372 948 346 q 962 418 958 398 q 967 450 965 439 l 1080 992 l 1287 992 l 1048 0 "},"λ":{x_min:4.75,x_max:806,ha:813,o:"m 4 0 l 305 716 l 283 779 q 256 836 270 815 q 226 870 242 858 q 190 886 209 882 q 145 890 170 890 q 110 887 127 890 q 81 881 93 884 l 81 1052 q 103 1056 90 1054 q 131 1060 116 1059 q 161 1062 146 1061 q 188 1064 176 1064 q 295 1047 251 1064 q 373 1000 340 1031 q 430 923 406 968 q 473 820 453 878 l 653 296 q 681 226 667 253 q 707 184 694 199 q 734 164 721 169 q 761 159 746 159 q 782 161 770 159 q 806 166 794 163 l 806 6 q 783 -1 797 2 q 753 -7 770 -5 q 720 -12 737 -10 q 691 -14 704 -14 q 621 -3 651 -14 q 570 28 592 7 q 532 76 547 48 q 503 140 516 105 l 441 324 q 413 409 425 369 q 394 484 400 450 l 389 484 q 379 445 385 466 q 368 405 374 425 q 356 365 362 384 q 344 328 350 345 l 219 0 l 4 0 "},">":{x_min:60,x_max:705,ha:765,o:"m 60 300 l 496 490 l 60 705 l 60 868 l 705 531 l 705 434 l 60 138 l 60 300 "},"τ":{x_min:27,x_max:666.140625,ha:720,o:"m 424 604 l 424 238 q 446 173 424 194 q 503 152 468 152 q 561 158 534 152 q 618 175 589 165 l 618 20 q 545 -4 588 5 q 451 -14 502 -14 q 359 -2 402 -14 q 285 38 316 9 q 236 115 254 67 q 218 237 218 164 l 218 604 l 27 604 l 27 689 l 140 758 l 666 758 l 666 604 l 424 604 "},"Ų":{x_min:118,x_max:876,ha:994,o:"m 876 992 l 876 349 q 852 205 876 272 q 781 90 829 139 q 661 13 733 41 q 492 -14 589 -14 q 331 12 401 -14 q 213 86 261 38 q 142 202 166 134 q 118 352 118 269 l 118 992 l 328 992 l 328 367 q 339 272 328 311 q 371 208 349 233 q 424 172 392 184 q 498 160 455 160 q 626 212 586 160 q 665 368 665 264 l 665 992 l 876 992 m 514 -154 q 529 -196 514 -182 q 568 -209 544 -209 q 611 -205 589 -209 q 646 -197 632 -201 l 646 -318 q 599 -329 624 -324 q 540 -334 574 -334 q 469 -322 501 -334 q 416 -290 438 -310 q 382 -241 394 -269 q 371 -177 371 -212 q 380 -124 371 -148 q 406 -78 389 -99 q 445 -38 423 -57 q 493 0 467 -19 l 614 0 q 540 -81 567 -44 q 514 -154 514 -118 "},"Ŵ":{x_min:-.25,x_max:1287.25,ha:1287,o:"m 1048 0 l 809 0 l 687 489 q 681 517 684 499 q 672 559 677 536 q 663 607 667 582 q 654 656 658 632 q 647 700 650 679 q 642 732 644 720 q 638 700 641 720 q 631 656 635 679 q 622 608 627 633 q 613 559 618 582 q 605 517 609 536 q 598 487 601 498 l 477 0 l 238 0 l 0 992 l 206 992 l 319 450 q 325 418 321 439 q 333 372 328 398 q 343 318 338 346 q 353 262 348 289 q 361 211 357 235 q 368 173 366 188 q 373 211 370 188 q 381 260 377 234 q 390 314 385 286 q 399 366 395 342 q 407 409 404 390 q 413 436 411 428 l 551 992 l 735 992 l 873 436 q 879 409 875 428 q 887 366 882 390 q 896 314 891 342 q 905 260 901 286 q 913 211 910 234 q 919 173 917 188 q 925 211 921 188 q 933 262 929 235 q 943 318 938 289 q 953 372 948 346 q 962 418 958 398 q 967 450 965 439 l 1080 992 l 1287 992 l 1048 0 m 785 1071 q 713 1123 750 1093 q 640 1189 675 1152 q 568 1123 603 1152 q 498 1071 533 1093 l 361 1071 l 361 1089 q 400 1134 378 1108 q 443 1187 421 1160 q 485 1242 465 1215 q 521 1293 506 1269 l 762 1293 q 797 1242 777 1269 q 839 1187 817 1215 q 883 1134 861 1160 q 923 1089 906 1108 l 923 1071 l 785 1071 "},"‛":{x_min:16,x_max:284,ha:298,o:"m 215 992 q 228 913 220 956 q 244 827 235 871 q 263 737 254 782 q 284 652 273 692 l 135 652 q 100 731 118 690 q 67 815 83 772 q 38 898 51 857 q 16 977 25 939 l 25 992 l 215 992 "},"Ð":{x_min:32.078125,x_max:892,ha:973,o:"m 32 577 l 125 577 l 125 992 l 415 992 q 612 960 524 992 q 762 868 700 929 q 858 715 824 806 q 892 505 892 624 q 857 285 892 379 q 758 127 823 190 q 600 31 693 63 q 386 0 506 0 l 125 0 l 125 402 l 32 402 l 32 577 m 681 499 q 665 641 681 581 q 616 740 648 701 q 538 798 584 779 q 432 817 492 817 l 335 817 l 335 577 l 495 577 l 495 402 l 335 402 l 335 174 l 413 174 q 614 255 547 174 q 681 499 681 336 "},"Λ":{x_min:-.25,x_max:847.25,ha:847,o:"m 469 597 q 459 637 466 610 q 446 696 453 664 q 433 761 439 728 q 423 815 427 793 q 414 760 420 793 q 401 695 408 728 q 389 636 395 663 q 380 597 383 609 l 212 0 l 0 0 l 308 992 l 537 992 l 847 0 l 634 0 l 469 597 "},"·":{x_min:79,x_max:316,ha:396,o:"m 79 489 q 88 543 79 521 q 113 579 97 565 q 151 598 129 592 q 198 605 173 605 q 243 598 221 605 q 280 579 264 592 q 306 543 297 565 q 316 489 316 521 q 306 437 316 458 q 280 401 297 415 q 243 380 264 386 q 198 374 221 374 q 151 380 173 374 q 113 401 129 386 q 88 437 97 415 q 79 489 79 458 "},"Х":{x_min:-.25,x_max:871.25,ha:871,o:"m 871 0 l 631 0 l 428 375 l 224 0 l 0 0 l 301 511 l 20 992 l 252 992 l 438 635 l 620 992 l 847 992 l 563 500 l 871 0 "},"Υ":{x_min:-.25,x_max:812.25,ha:811,o:"m 406 583 l 585 992 l 812 992 l 511 385 l 511 0 l 301 0 l 301 379 l 0 992 l 227 992 l 406 583 "},r:{x_min:109,x_max:570,ha:603,o:"m 504 773 q 522 772 512 773 q 541 771 532 772 q 558 769 550 770 q 570 766 565 768 l 570 572 q 555 575 564 574 q 535 578 545 576 q 514 579 524 579 q 497 579 504 579 q 423 569 457 579 q 366 536 390 559 q 329 476 342 513 q 315 386 315 439 l 315 0 l 109 0 l 109 758 l 265 758 l 296 644 l 306 644 q 341 697 322 673 q 383 738 360 721 q 436 763 407 754 q 504 773 466 773 "},"ж":{x_min:-.25,x_max:1171.25,ha:1171,o:"m 489 389 l 489 758 l 695 758 l 695 389 l 930 758 l 1145 758 l 900 394 l 1171 0 l 950 0 l 695 384 l 695 0 l 489 0 l 489 384 l 220 0 l 0 0 l 284 394 l 25 758 l 239 758 l 489 389 "},"Ø":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 316 27 403 -14 l 268 -51 l 154 11 l 209 102 q 112 270 144 170 q 81 498 81 371 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 640 995 588 1007 q 737 963 693 984 l 784 1038 l 897 973 l 843 886 q 938 720 906 819 q 970 496 970 621 m 297 496 q 329 296 297 374 l 639 802 q 526 832 592 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 699 q 297 496 297 574 m 753 496 q 724 691 753 612 l 415 188 q 465 169 438 175 q 525 162 492 162 q 629 185 585 162 q 699 251 672 208 q 740 356 727 294 q 753 496 753 418 "},"Ỳ":{x_min:-.25,x_max:812.25,ha:811,o:"m 406 583 l 585 992 l 812 992 l 511 385 l 511 0 l 301 0 l 301 379 l 0 992 l 227 992 l 406 583 m 362 1071 q 307 1118 339 1089 q 243 1175 274 1146 q 186 1233 212 1205 q 150 1278 160 1260 l 150 1293 l 381 1293 q 407 1242 392 1269 q 437 1187 421 1215 q 469 1134 453 1160 q 500 1089 485 1108 l 500 1071 l 362 1071 "},"÷":{x_min:60,x_max:705,ha:765,o:"m 60 415 l 60 564 l 705 564 l 705 415 l 60 415 m 288 224 q 295 259 288 245 q 315 282 302 273 q 346 294 328 290 q 382 298 363 298 q 418 294 401 298 q 448 282 435 290 q 469 259 461 273 q 477 224 477 245 q 469 190 477 204 q 448 167 461 176 q 418 154 435 158 q 382 150 401 150 q 346 154 363 150 q 315 167 328 158 q 295 190 302 176 q 288 224 288 204 m 288 754 q 295 789 288 775 q 315 812 302 803 q 346 825 328 821 q 382 829 363 829 q 418 825 401 829 q 448 812 435 821 q 469 789 461 803 q 477 754 477 775 q 469 720 477 734 q 448 697 461 706 q 418 684 435 688 q 382 680 401 680 q 346 684 363 680 q 315 697 328 688 q 295 720 302 706 q 288 754 288 734 "},"с":{x_min:69,x_max:648.703125,ha:693,o:"m 424 -14 q 277 8 342 -14 q 165 78 211 30 q 93 198 118 125 q 69 375 69 272 q 94 564 69 488 q 166 687 119 641 q 278 753 212 733 q 424 773 343 773 q 540 758 482 773 q 648 718 597 744 l 588 562 q 502 594 544 581 q 423 606 461 606 q 314 549 348 606 q 280 376 280 491 q 314 206 280 261 q 421 152 348 152 q 528 167 480 152 q 627 206 576 182 l 627 35 q 578 13 601 23 q 530 -1 554 4 q 480 -10 506 -7 q 424 -14 453 -14 "},h:{x_min:109,x_max:767,ha:871,o:"m 767 0 l 560 0 l 560 442 q 534 565 560 524 q 456 606 509 606 q 389 590 416 606 q 345 542 362 574 q 322 463 329 510 q 315 356 315 416 l 315 0 l 109 0 l 109 1055 l 315 1055 l 315 840 q 314 780 315 811 q 311 722 313 748 q 306 661 308 690 l 317 661 q 402 746 350 720 q 518 773 453 773 q 620 757 575 773 q 699 707 666 741 q 749 620 731 673 q 767 494 767 568 l 767 0 "},f:{x_min:28,x_max:570,ha:538,o:"m 503 604 l 348 604 l 348 0 l 142 0 l 142 604 l 28 604 l 28 703 l 142 758 l 142 813 q 159 934 142 886 q 209 1010 177 982 q 288 1051 242 1039 q 392 1063 334 1063 q 497 1053 454 1063 q 570 1030 540 1043 l 521 877 q 477 890 500 884 q 422 896 454 896 q 365 871 382 896 q 348 804 348 845 l 348 758 l 503 758 l 503 604 "},"“":{x_min:16,x_max:601,ha:615,o:"m 332 666 q 355 744 341 703 q 384 828 368 786 q 417 912 400 870 q 452 992 435 954 l 601 992 q 580 905 590 950 q 561 816 570 861 q 545 730 552 772 q 532 652 537 687 l 342 652 l 332 666 m 16 666 q 38 744 25 703 q 67 828 51 786 q 100 912 83 870 q 135 992 118 954 l 284 992 q 263 905 273 950 q 244 816 254 861 q 228 730 235 772 q 215 652 220 687 l 25 652 l 16 666 "},A:{x_min:-.25,x_max:903.25,ha:903,o:"m 690 0 l 623 238 l 280 238 l 212 0 l 0 0 l 322 996 l 579 996 l 903 0 l 690 0 m 574 413 l 510 629 q 498 669 506 642 q 480 731 489 697 q 463 798 471 764 q 451 856 455 832 q 444 821 449 841 q 434 778 440 800 q 422 732 428 755 q 411 688 416 709 q 401 652 405 668 q 394 629 396 637 l 331 413 l 574 413 "},O:{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 327 22 411 -14 q 189 126 243 59 q 107 288 134 193 q 81 498 81 382 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 723 970 640 1007 q 861 867 807 934 q 943 706 916 800 q 970 496 970 612 m 297 496 q 310 355 297 417 q 352 250 324 293 q 423 184 380 207 q 525 160 466 160 q 629 184 585 160 q 699 250 672 207 q 740 355 727 293 q 753 496 753 417 q 740 636 753 574 q 699 742 727 698 q 629 808 672 785 q 526 832 586 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 698 q 297 496 297 574 "},"Đ":{x_min:32.078125,x_max:892,ha:973,o:"m 32 577 l 125 577 l 125 992 l 415 992 q 612 960 524 992 q 762 868 700 929 q 858 715 824 806 q 892 505 892 624 q 857 285 892 379 q 758 127 823 190 q 600 31 693 63 q 386 0 506 0 l 125 0 l 125 402 l 32 402 l 32 577 m 681 499 q 665 641 681 581 q 616 740 648 701 q 538 798 584 779 q 432 817 492 817 l 335 817 l 335 577 l 495 577 l 495 402 l 335 402 l 335 174 l 413 174 q 614 255 547 174 q 681 499 681 336 "},"Ǿ":{x_min:81,x_max:970,ha:1050,o:"m 970 496 q 943 287 970 382 q 861 126 916 193 q 722 22 806 59 q 525 -14 639 -14 q 316 27 403 -14 l 268 -51 l 154 11 l 209 102 q 112 270 144 170 q 81 498 81 371 q 107 707 81 613 q 189 867 134 801 q 328 970 244 934 q 526 1007 411 1007 q 640 995 588 1007 q 737 963 693 984 l 784 1038 l 897 973 l 843 886 q 938 720 906 819 q 970 496 970 621 m 297 496 q 329 296 297 374 l 639 802 q 526 832 592 832 q 424 808 467 832 q 352 742 380 785 q 310 636 324 699 q 297 496 297 574 m 753 496 q 724 691 753 612 l 415 188 q 465 169 438 175 q 525 162 492 162 q 629 185 585 162 q 699 251 672 208 q 740 356 727 294 q 753 496 753 418 m 400 1071 l 400 1089 q 430 1134 414 1108 q 462 1187 446 1160 q 492 1242 478 1215 q 518 1293 507 1269 l 750 1293 l 750 1278 q 728 1250 742 1266 q 695 1214 714 1233 q 656 1175 677 1195 q 614 1136 635 1155 q 572 1100 592 1117 q 537 1071 553 1083 l 400 1071 "},"⅛":{x_min:40,x_max:1159,ha:1224,o:"m 373 397 l 212 397 l 212 700 q 212 734 212 713 q 213 776 212 755 q 215 814 214 797 q 217 840 216 832 q 206 828 213 835 q 193 813 200 820 q 179 799 186 805 q 166 787 172 792 l 113 746 l 40 832 l 243 992 l 373 992 l 373 397 m 913 992 l 362 0 l 200 0 l 751 992 l 913 992 m 927 607 q 1009 597 971 607 q 1076 569 1047 588 q 1120 523 1104 551 q 1137 458 1137 495 q 1129 413 1137 434 q 1108 376 1122 393 q 1078 347 1095 360 q 1040 323 1060 334 q 1084 295 1063 309 q 1122 263 1105 281 q 1148 221 1138 244 q 1159 169 1159 198 q 1142 95 1159 129 q 1095 36 1125 61 q 1022 -2 1064 11 q 927 -16 979 -16 q 827 -2 870 -16 q 754 34 784 10 q 710 92 725 58 q 695 165 695 126 q 703 218 695 195 q 727 259 712 241 q 761 291 741 277 q 801 317 780 305 q 768 345 783 330 q 740 376 752 359 q 722 414 728 393 q 716 458 716 434 q 732 523 716 495 q 778 569 749 550 q 845 597 807 587 q 927 607 884 607 m 842 169 q 863 114 842 135 q 925 92 884 92 q 989 114 967 92 q 1011 169 1011 135 q 988 223 1011 201 q 924 261 965 246 l 915 264 q 861 226 880 248 q 842 169 842 203 m 925 498 q 879 482 895 498 q 863 447 863 467 q 882 403 863 420 q 927 373 900 387 q 951 386 940 379 q 971 402 963 393 q 984 422 979 411 q 989 447 989 433 q 974 482 989 467 q 925 498 959 498 "},"Ẁ":{x_min:-.25,x_max:1287.25,ha:1287,o:"m 1048 0 l 809 0 l 687 489 q 681 517 684 499 q 672 559 677 536 q 663 607 667 582 q 654 656 658 632 q 647 700 650 679 q 642 732 644 720 q 638 700 641 720 q 631 656 635 679 q 622 608 627 633 q 613 559 618 582 q 605 517 609 536 q 598 487 601 498 l 477 0 l 238 0 l 0 992 l 206 992 l 319 450 q 325 418 321 439 q 333 372 328 398 q 343 318 338 346 q 353 262 348 289 q 361 211 357 235 q 368 173 366 188 q 373 211 370 188 q 381 260 377 234 q 390 314 385 286 q 399 366 395 342 q 407 409 404 390 q 413 436 411 428 l 551 992 l 735 992 l 873 436 q 879 409 875 428 q 887 366 882 390 q 896 314 891 342 q 905 260 901 286 q 913 211 910 234 q 919 173 917 188 q 925 211 921 188 q 933 262 929 235 q 943 318 938 289 q 953 372 948 346 q 962 418 958 398 q 967 450 965 439 l 1080 992 l 1287 992 l 1048 0 m 594 1071 q 539 1118 571 1089 q 475 1175 506 1146 q 418 1233 444 1205 q 382 1278 392 1260 l 382 1293 l 613 1293 q 639 1242 624 1269 q 669 1187 653 1215 q 701 1134 685 1160 q 732 1089 717 1108 l 732 1071 l 594 1071 "},"Ť":{x_min:28,x_max:735,ha:762,o:"m 487 0 l 277 0 l 277 817 l 28 817 l 28 992 l 735 992 l 735 817 l 487 817 l 487 0 m 664 1274 q 624 1229 647 1255 q 580 1176 602 1203 q 538 1121 558 1148 q 503 1071 518 1094 l 262 1071 q 226 1121 247 1094 q 184 1176 206 1148 q 141 1229 162 1203 q 102 1274 119 1255 l 102 1293 l 239 1293 q 309 1240 274 1270 q 381 1174 344 1211 q 454 1240 416 1211 q 526 1293 491 1270 l 664 1293 l 664 1274 "},"ψ":{x_min:97,x_max:1047,ha:1128,o:"m 662 1054 l 662 142 q 747 162 711 148 q 806 205 782 177 q 841 278 829 234 q 852 389 852 323 q 837 571 852 481 q 798 758 821 661 l 993 758 q 1034 571 1021 660 q 1047 389 1047 482 q 1017 208 1047 283 q 935 86 987 134 q 813 16 883 39 q 662 -12 743 -7 l 662 -334 l 468 -334 l 468 -12 q 318 12 387 -9 q 201 80 250 34 q 124 199 152 126 q 97 376 97 272 l 97 758 l 291 758 l 291 368 q 300 267 291 308 q 330 199 309 225 q 384 159 351 172 q 468 141 418 145 l 468 1054 l 662 1054 "},"ŗ":{x_min:77,x_max:570,ha:603,o:"m 504 773 q 522 772 512 773 q 541 771 532 772 q 558 769 550 770 q 570 766 565 768 l 570 572 q 555 575 564 574 q 535 578 545 576 q 514 579 524 579 q 497 579 504 579 q 423 569 457 579 q 366 536 390 559 q 329 476 342 513 q 315 386 315 439 l 315 0 l 109 0 l 109 758 l 265 758 l 296 644 l 306 644 q 341 697 322 673 q 383 738 360 721 q 436 763 407 754 q 504 773 466 773 m 77 -288 q 89 -242 83 -268 q 100 -188 95 -216 q 111 -134 106 -161 q 118 -85 116 -107 l 310 -85 l 310 -98 q 261 -198 289 -145 q 197 -307 233 -251 l 77 -307 l 77 -288 "}},cssFontWeight:"bold",ascender:1290,underlinePosition:-154,cssFontStyle:"normal",boundingBox:{yMin:-407,xMin:-269,yMax:1391,xMax:1695},resolution:1e3,original_font_information:{postscript_name:"DroidSans-Bold",version_string:"Version 1.00 build 107",vendor_url:"http://www.ascendercorp.com/",full_font_name:"Droid Sans Bold",font_family_name:"Droid Sans",copyright:"Digitized data copyright © 2006, Google Corporation.",description:"Droid Sans is a humanist sans serif typeface designed for user interfaces and electronic communication.",trademark:"Droid is a trademark of Google and may be registered in certain jurisdictions.",designer:"",designer_url:"http://www.ascendercorp.com/typedesigners.html",unique_font_identifier:"Ascender - Droid Sans Bold",license_url:"http://ascendercorp.com/eula10.html",license_description:"This font software is the valuable property of Ascender Corporation and/or its suppliers and its use by you is covered under the terms of a license agreement. This font software is licensed to you by Ascender Corporation for your personal or business use on up to five personal computers. You may not use this font software on more than five personal computers unless you have obtained a license from Ascender to do so. Except as specifically permitted by the license, you may not copy this font software.\n\nIf you have any questions, please review the license agreement you received with this font software, and/or contact Ascender Corporation. \n\nContact Information:\nAscender Corporation\nWeb http://www.ascendercorp.com/",manufacturer_name:"Ascender Corporation",font_sub_family_name:"Bold"},descender:-328,familyName:"Droid Sans",lineHeight:1617,underlineThickness:102}},function(t,e){var n={},i=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}},r=i(function(){return/msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase())}),a=i(function(){return document.head||document.getElementsByTagName("head")[0]}),o=null,s=0,l=[];function q(t,e){for(var i=0;i<t.length;i++){var r=t[i],a=n[r.id];if(a){a.refs++;for(var o=0;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(d(r.parts[o],e))}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(d(r.parts[o],e));n[r.id]={id:r.id,refs:1,parts:s}}}}function c(t){for(var e=[],n={},i=0;i<t.length;i++){var r=t[i],a=r[0],o={css:r[1],media:r[2],sourceMap:r[3]};n[a]?n[a].parts.push(o):e.push(n[a]={id:a,parts:[o]})}return e}function h(t,e){var n=a(),i=l[l.length-1];if("top"===t.insertAt)i?i.nextSibling?n.insertBefore(e,i.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else{if("bottom"!==t.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(e)}}function u(t){t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function m(t){var e=document.createElement("style");return e.type="text/css",h(t,e),e}function d(t,e){var n,i,r;if(e.singleton){var a=s++;n=o||(o=m(e)),i=g.bind(null,n,a,!1),r=g.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return e.rel="stylesheet",h(t,e),e}(e),i=function(t,e){var n=e.css,i=e.sourceMap;i&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var r=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}.bind(null,n),r=function(){u(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(e),i=function(t,e){var n=e.css,i=e.media;i&&t.setAttribute("media",i);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){u(n)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else r()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");void 0===(e=e||{}).singleton&&(e.singleton=r()),void 0===e.insertAt&&(e.insertAt="bottom");var i=c(t);return q(i,e),function(t){for(var r=[],a=0;a<i.length;a++){var o=i[a];(s=n[o.id]).refs--,r.push(s)}t&&q(c(t),e);for(a=0;a<r.length;a++){var s;if(0===(s=r[a]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete n[s.id]}}}};var p,f=(p=[],function(t,e){return p[t]=e,p.filter(Boolean).join("\n")});function g(t,e,n,i){var r=n?"":i.css;if(t.styleSheet)t.styleSheet.cssText=f(e,r);else{var a=document.createTextNode(r),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(a,o[e]):t.appendChild(a)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",i=t[3];if(!i)return n;if(e&&"function"==typeof btoa){var r=(o=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),a=i.sources.map(function(t){return"/*# sourceURL="+i.sourceRoot+t+" */"});return[n].concat(a).concat([r]).join("\n")}var o;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},r=0;r<this.length;r++){var a=this[r][0];"number"==typeof a&&(i[a]=!0)}for(r=0;r<t.length;r++){var o=t[r];"number"==typeof o[0]&&i[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),e.push(o))}},e}},function(t,e,n){(t.exports=n(2)(void 0)).push([t.i,"body {\n  margin: 0; }\n",""])},function(t,e,n){var i=n(3);"string"==typeof i&&(i=[[t.i,i,""]]);n(1)(i,{});i.locals&&(t.exports=i.locals)},function(t,e){THREE.OrbitControls=function(t,e){var n,i,r,a,o;this.object=t,this.domElement=void 0!==e?e:document,this.enabled=!0,this.target=new THREE.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!1,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:THREE.MOUSE.LEFT,ZOOM:THREE.MOUSE.MIDDLE,PAN:THREE.MOUSE.RIGHT},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this.getPolarAngle=function(){return d.phi},this.getAzimuthalAngle=function(){return d.theta},this.saveState=function(){s.target0.copy(s.target),s.position0.copy(s.object.position),s.zoom0=s.object.zoom},this.reset=function(){s.target.copy(s.target0),s.object.position.copy(s.position0),s.object.zoom=s.zoom0,s.object.updateProjectionMatrix(),s.dispatchEvent(l),s.update(),u=h.NONE},this.update=(n=new THREE.Vector3,i=(new THREE.Quaternion).setFromUnitVectors(t.up,new THREE.Vector3(0,1,0)),r=i.clone().inverse(),a=new THREE.Vector3,o=new THREE.Quaternion,function(){var t=s.object.position;return n.copy(t).sub(s.target),n.applyQuaternion(i),d.setFromVector3(n),s.autoRotate&&u===h.NONE&&R(2*Math.PI/60/60*s.autoRotateSpeed),d.theta+=p.theta,d.phi+=p.phi,d.theta=Math.max(s.minAzimuthAngle,Math.min(s.maxAzimuthAngle,d.theta)),d.phi=Math.max(s.minPolarAngle,Math.min(s.maxPolarAngle,d.phi)),d.makeSafe(),d.radius*=f,d.radius=Math.max(s.minDistance,Math.min(s.maxDistance,d.radius)),s.target.add(g),n.setFromSpherical(d),n.applyQuaternion(r),t.copy(s.target).add(n),s.object.lookAt(s.target),!0===s.enableDamping?(p.theta*=1-s.dampingFactor,p.phi*=1-s.dampingFactor,g.multiplyScalar(1-s.dampingFactor)):(p.set(0,0,0),g.set(0,0,0)),f=1,!!(v||a.distanceToSquared(s.object.position)>m||8*(1-o.dot(s.object.quaternion))>m)&&(s.dispatchEvent(l),a.copy(s.object.position),o.copy(s.object.quaternion),v=!1,!0)}),this.dispose=function(){s.domElement.removeEventListener("contextmenu",j,!1),s.domElement.removeEventListener("mousedown",D,!1),s.domElement.removeEventListener("wheel",z,!1),s.domElement.removeEventListener("touchstart",G,!1),s.domElement.removeEventListener("touchend",k,!1),s.domElement.removeEventListener("touchmove",V,!1),document.removeEventListener("mousemove",B,!1),document.removeEventListener("mouseup",F,!1),window.removeEventListener("keydown",H,!1)};var s=this,l={type:"change"},q={type:"start"},c={type:"end"},h={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_DOLLY_PAN:4},u=h.NONE,m=1e-6,d=new THREE.Spherical,p=new THREE.Spherical,f=1,g=new THREE.Vector3,v=!1,x=new THREE.Vector2,y=new THREE.Vector2,_=new THREE.Vector2,b=new THREE.Vector2,w=new THREE.Vector2,E=new THREE.Vector2,M=new THREE.Vector2,T=new THREE.Vector2,S=new THREE.Vector2;function A(){return Math.pow(.95,s.zoomSpeed)}function R(t){p.theta-=t}function L(t){p.phi-=t}var P,C=(P=new THREE.Vector3,function(t,e){P.setFromMatrixColumn(e,0),P.multiplyScalar(-t),g.add(P)}),O=function(){var t=new THREE.Vector3;return function(e,n){!0===s.screenSpacePanning?t.setFromMatrixColumn(n,1):(t.setFromMatrixColumn(n,0),t.crossVectors(s.object.up,t)),t.multiplyScalar(e),g.add(t)}}(),I=function(){var t=new THREE.Vector3;return function(e,n){var i=s.domElement===document?s.domElement.body:s.domElement;if(s.object.isPerspectiveCamera){var r=s.object.position;t.copy(r).sub(s.target);var a=t.length();a*=Math.tan(s.object.fov/2*Math.PI/180),C(2*e*a/i.clientHeight,s.object.matrix),O(2*n*a/i.clientHeight,s.object.matrix)}else s.object.isOrthographicCamera?(C(e*(s.object.right-s.object.left)/s.object.zoom/i.clientWidth,s.object.matrix),O(n*(s.object.top-s.object.bottom)/s.object.zoom/i.clientHeight,s.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),s.enablePan=!1)}}();function N(t){s.object.isPerspectiveCamera?f/=t:s.object.isOrthographicCamera?(s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom*t)),s.object.updateProjectionMatrix(),v=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function U(t){s.object.isPerspectiveCamera?f*=t:s.object.isOrthographicCamera?(s.object.zoom=Math.max(s.minZoom,Math.min(s.maxZoom,s.object.zoom/t)),s.object.updateProjectionMatrix(),v=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),s.enableZoom=!1)}function D(t){if(!1!==s.enabled){switch(t.preventDefault(),t.button){case s.mouseButtons.ORBIT:if(!1===s.enableRotate)return;!function(t){x.set(t.clientX,t.clientY)}(t),u=h.ROTATE;break;case s.mouseButtons.ZOOM:if(!1===s.enableZoom)return;!function(t){M.set(t.clientX,t.clientY)}(t),u=h.DOLLY;break;case s.mouseButtons.PAN:if(!1===s.enablePan)return;!function(t){b.set(t.clientX,t.clientY)}(t),u=h.PAN}u!==h.NONE&&(document.addEventListener("mousemove",B,!1),document.addEventListener("mouseup",F,!1),s.dispatchEvent(q))}}function B(t){if(!1!==s.enabled)switch(t.preventDefault(),u){case h.ROTATE:if(!1===s.enableRotate)return;!function(t){y.set(t.clientX,t.clientY),_.subVectors(y,x).multiplyScalar(s.rotateSpeed);var e=s.domElement===document?s.domElement.body:s.domElement;R(2*Math.PI*_.x/e.clientWidth),L(2*Math.PI*_.y/e.clientHeight),x.copy(y),s.update()}(t);break;case h.DOLLY:if(!1===s.enableZoom)return;!function(t){T.set(t.clientX,t.clientY),S.subVectors(T,M),S.y>0?N(A()):S.y<0&&U(A()),M.copy(T),s.update()}(t);break;case h.PAN:if(!1===s.enablePan)return;!function(t){w.set(t.clientX,t.clientY),E.subVectors(w,b).multiplyScalar(s.panSpeed),I(E.x,E.y),b.copy(w),s.update()}(t)}}function F(t){!1!==s.enabled&&(document.removeEventListener("mousemove",B,!1),document.removeEventListener("mouseup",F,!1),s.dispatchEvent(c),u=h.NONE)}function z(t){!1===s.enabled||!1===s.enableZoom||u!==h.NONE&&u!==h.ROTATE||(t.preventDefault(),t.stopPropagation(),s.dispatchEvent(q),function(t){t.deltaY<0?U(A()):t.deltaY>0&&N(A()),s.update()}(t),s.dispatchEvent(c))}function H(t){!1!==s.enabled&&!1!==s.enableKeys&&!1!==s.enablePan&&function(t){switch(t.keyCode){case s.keys.UP:I(0,s.keyPanSpeed),s.update();break;case s.keys.BOTTOM:I(0,-s.keyPanSpeed),s.update();break;case s.keys.LEFT:I(s.keyPanSpeed,0),s.update();break;case s.keys.RIGHT:I(-s.keyPanSpeed,0),s.update()}}(t)}function G(t){if(!1!==s.enabled){switch(t.preventDefault(),t.touches.length){case 1:if(!1===s.enableRotate)return;!function(t){x.set(t.touches[0].pageX,t.touches[0].pageY)}(t),u=h.TOUCH_ROTATE;break;case 2:if(!1===s.enableZoom&&!1===s.enablePan)return;!function(t){if(s.enableZoom){var e=t.touches[0].pageX-t.touches[1].pageX,n=t.touches[0].pageY-t.touches[1].pageY,i=Math.sqrt(e*e+n*n);M.set(0,i)}if(s.enablePan){var r=.5*(t.touches[0].pageX+t.touches[1].pageX),a=.5*(t.touches[0].pageY+t.touches[1].pageY);b.set(r,a)}}(t),u=h.TOUCH_DOLLY_PAN;break;default:u=h.NONE}u!==h.NONE&&s.dispatchEvent(q)}}function V(t){if(!1!==s.enabled)switch(t.preventDefault(),t.stopPropagation(),t.touches.length){case 1:if(!1===s.enableRotate)return;if(u!==h.TOUCH_ROTATE)return;!function(t){y.set(t.touches[0].pageX,t.touches[0].pageY),_.subVectors(y,x).multiplyScalar(s.rotateSpeed);var e=s.domElement===document?s.domElement.body:s.domElement;R(2*Math.PI*_.x/e.clientWidth),L(2*Math.PI*_.y/e.clientHeight),x.copy(y),s.update()}(t);break;case 2:if(!1===s.enableZoom&&!1===s.enablePan)return;if(u!==h.TOUCH_DOLLY_PAN)return;!function(t){if(s.enableZoom){var e=t.touches[0].pageX-t.touches[1].pageX,n=t.touches[0].pageY-t.touches[1].pageY,i=Math.sqrt(e*e+n*n);T.set(0,i),S.set(0,Math.pow(T.y/M.y,s.zoomSpeed)),N(S.y),M.copy(T)}if(s.enablePan){var r=.5*(t.touches[0].pageX+t.touches[1].pageX),a=.5*(t.touches[0].pageY+t.touches[1].pageY);w.set(r,a),E.subVectors(w,b).multiplyScalar(s.panSpeed),I(E.x,E.y),b.copy(w)}s.update()}(t);break;default:u=h.NONE}}function k(t){!1!==s.enabled&&(s.dispatchEvent(c),u=h.NONE)}function j(t){!1!==s.enabled&&t.preventDefault()}s.domElement.addEventListener("contextmenu",j,!1),s.domElement.addEventListener("mousedown",D,!1),s.domElement.addEventListener("wheel",z,!1),s.domElement.addEventListener("touchstart",G,!1),s.domElement.addEventListener("touchend",k,!1),s.domElement.addEventListener("touchmove",V,!1),window.addEventListener("keydown",H,!1),this.update()},THREE.OrbitControls.prototype=Object.create(THREE.EventDispatcher.prototype),THREE.OrbitControls.prototype.constructor=THREE.OrbitControls,Object.defineProperties(THREE.OrbitControls.prototype,{center:{get:function(){return console.warn("THREE.OrbitControls: .center has been renamed to .target"),this.target}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(t){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!t}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(t){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!t}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(t){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!t}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(t){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!t}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.enableDamping},set:function(t){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.enableDamping=!t}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor},set:function(t){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.dampingFactor=t}}})},function(t,e,n){"use strict";function i(){}n.r(e),n.d(e,"WebGLRenderTargetCube",function(){return sn}),n.d(e,"WebGLRenderTarget",function(){return on}),n.d(e,"WebGLRenderer",function(){return Br}),n.d(e,"ShaderLib",function(){return yn}),n.d(e,"UniformsLib",function(){return xn}),n.d(e,"UniformsUtils",function(){return pn}),n.d(e,"ShaderChunk",function(){return dn}),n.d(e,"FogExp2",function(){return Fr}),n.d(e,"Fog",function(){return zr}),n.d(e,"Scene",function(){return Hr}),n.d(e,"Sprite",function(){return Vr}),n.d(e,"LOD",function(){return kr}),n.d(e,"SkinnedMesh",function(){return Xr}),n.d(e,"Skeleton",function(){return jr}),n.d(e,"Bone",function(){return Wr}),n.d(e,"Mesh",function(){return pi}),n.d(e,"LineSegments",function(){return Jr}),n.d(e,"LineLoop",function(){return Qr}),n.d(e,"Line",function(){return Zr}),n.d(e,"Points",function(){return $r}),n.d(e,"Group",function(){return ta}),n.d(e,"VideoTexture",function(){return ea}),n.d(e,"DataTexture",function(){return ln}),n.d(e,"CompressedTexture",function(){return na}),n.d(e,"CubeTexture",function(){return gi}),n.d(e,"CanvasTexture",function(){return Pr}),n.d(e,"DepthTexture",function(){return ia}),n.d(e,"Texture",function(){return rn}),n.d(e,"CompressedTextureLoader",function(){return Co}),n.d(e,"DataTextureLoader",function(){return Oo}),n.d(e,"CubeTextureLoader",function(){return No}),n.d(e,"TextureLoader",function(){return Uo}),n.d(e,"ObjectLoader",function(){return zs}),n.d(e,"MaterialLoader",function(){return Ls}),n.d(e,"BufferGeometryLoader",function(){return Ps}),n.d(e,"DefaultLoadingManager",function(){return Ro}),n.d(e,"LoadingManager",function(){return Ao}),n.d(e,"JSONLoader",function(){return Fs}),n.d(e,"ImageLoader",function(){return Io}),n.d(e,"ImageBitmapLoader",function(){return js}),n.d(e,"FontLoader",function(){return Zs}),n.d(e,"FileLoader",function(){return Po}),n.d(e,"Loader",function(){return Ds}),n.d(e,"LoaderUtils",function(){return Bs}),n.d(e,"Cache",function(){return So}),n.d(e,"AudioLoader",function(){return sl}),n.d(e,"SpotLightShadow",function(){return qs}),n.d(e,"SpotLight",function(){return cs}),n.d(e,"PointLight",function(){return hs}),n.d(e,"RectAreaLight",function(){return ps}),n.d(e,"HemisphereLight",function(){return ss}),n.d(e,"DirectionalLightShadow",function(){return us}),n.d(e,"DirectionalLight",function(){return ms}),n.d(e,"AmbientLight",function(){return ds}),n.d(e,"LightShadow",function(){return ls}),n.d(e,"Light",function(){return os}),n.d(e,"StereoCamera",function(){return ll}),n.d(e,"PerspectiveCamera",function(){return Nr}),n.d(e,"OrthographicCamera",function(){return Pn}),n.d(e,"CubeCamera",function(){return ql}),n.d(e,"ArrayCamera",function(){return Ur}),n.d(e,"Camera",function(){return Ln}),n.d(e,"AudioListener",function(){return cl}),n.d(e,"PositionalAudio",function(){return ul}),n.d(e,"AudioContext",function(){return ol}),n.d(e,"AudioAnalyser",function(){return ml}),n.d(e,"Audio",function(){return hl}),n.d(e,"VectorKeyframeTrack",function(){return As}),n.d(e,"StringKeyframeTrack",function(){return fs}),n.d(e,"QuaternionKeyframeTrack",function(){return ys}),n.d(e,"NumberKeyframeTrack",function(){return bs}),n.d(e,"ColorKeyframeTrack",function(){return _s}),n.d(e,"BooleanKeyframeTrack",function(){return gs}),n.d(e,"PropertyMixer",function(){return dl}),n.d(e,"PropertyBinding",function(){return Rl}),n.d(e,"KeyframeTrack",function(){return Ss}),n.d(e,"AnimationUtils",function(){return Ts}),n.d(e,"AnimationObjectGroup",function(){return Ll}),n.d(e,"AnimationMixer",function(){return Cl}),n.d(e,"AnimationClip",function(){return Rs}),n.d(e,"Uniform",function(){return Ol}),n.d(e,"InstancedBufferGeometry",function(){return Il}),n.d(e,"BufferGeometry",function(){return Jn}),n.d(e,"Geometry",function(){return Un}),n.d(e,"InterleavedBufferAttribute",function(){return Nl}),n.d(e,"InstancedInterleavedBuffer",function(){return Dl}),n.d(e,"InterleavedBuffer",function(){return Ul}),n.d(e,"InstancedBufferAttribute",function(){return Bl}),n.d(e,"Face3",function(){return Cn}),n.d(e,"Object3D",function(){return Rn}),n.d(e,"Raycaster",function(){return Fl}),n.d(e,"Layers",function(){return wn}),n.d(e,"EventDispatcher",function(){return i}),n.d(e,"Clock",function(){return Gl}),n.d(e,"QuaternionLinearInterpolant",function(){return xs}),n.d(e,"LinearInterpolant",function(){return Es}),n.d(e,"DiscreteInterpolant",function(){return Ms}),n.d(e,"CubicInterpolant",function(){return ws}),n.d(e,"Interpolant",function(){return vs}),n.d(e,"Triangle",function(){return di}),n.d(e,"Math",function(){return ke}),n.d(e,"Spherical",function(){return Vl}),n.d(e,"Cylindrical",function(){return kl}),n.d(e,"Plane",function(){return hn}),n.d(e,"Frustum",function(){return un}),n.d(e,"Sphere",function(){return cn}),n.d(e,"Ray",function(){return ui}),n.d(e,"Matrix4",function(){return We}),n.d(e,"Matrix3",function(){return Ze}),n.d(e,"Box3",function(){return qn}),n.d(e,"Box2",function(){return jl}),n.d(e,"Line3",function(){return mi}),n.d(e,"Euler",function(){return bn}),n.d(e,"Vector4",function(){return an}),n.d(e,"Vector3",function(){return Ye}),n.d(e,"Vector2",function(){return je}),n.d(e,"Quaternion",function(){return Xe}),n.d(e,"Color",function(){return gn}),n.d(e,"ImmediateRenderObject",function(){return Wl}),n.d(e,"VertexNormalsHelper",function(){return Xl}),n.d(e,"SpotLightHelper",function(){return Yl}),n.d(e,"SkeletonHelper",function(){return Zl}),n.d(e,"PointLightHelper",function(){return Jl}),n.d(e,"RectAreaLightHelper",function(){return Ql}),n.d(e,"HemisphereLightHelper",function(){return Kl}),n.d(e,"GridHelper",function(){return $l}),n.d(e,"PolarGridHelper",function(){return tq}),n.d(e,"FaceNormalsHelper",function(){return eq}),n.d(e,"DirectionalLightHelper",function(){return nq}),n.d(e,"CameraHelper",function(){return iq}),n.d(e,"BoxHelper",function(){return rq}),n.d(e,"Box3Helper",function(){return aq}),n.d(e,"PlaneHelper",function(){return oq}),n.d(e,"ArrowHelper",function(){return sq}),n.d(e,"AxesHelper",function(){return lq}),n.d(e,"Shape",function(){return as}),n.d(e,"Path",function(){return rs}),n.d(e,"ShapePath",function(){return Ws}),n.d(e,"Font",function(){return Xs}),n.d(e,"CurvePath",function(){return is}),n.d(e,"Curve",function(){return Do}),n.d(e,"ShapeUtils",function(){return ja}),n.d(e,"WebGLUtils",function(){return Ir}),n.d(e,"WireframeGeometry",function(){return ra}),n.d(e,"ParametricGeometry",function(){return aa}),n.d(e,"ParametricBufferGeometry",function(){return oa}),n.d(e,"TetrahedronGeometry",function(){return qa}),n.d(e,"TetrahedronBufferGeometry",function(){return ca}),n.d(e,"OctahedronGeometry",function(){return ha}),n.d(e,"OctahedronBufferGeometry",function(){return ua}),n.d(e,"IcosahedronGeometry",function(){return ma}),n.d(e,"IcosahedronBufferGeometry",function(){return da}),n.d(e,"DodecahedronGeometry",function(){return pa}),n.d(e,"DodecahedronBufferGeometry",function(){return fa}),n.d(e,"PolyhedronGeometry",function(){return sa}),n.d(e,"PolyhedronBufferGeometry",function(){return la}),n.d(e,"TubeGeometry",function(){return ga}),n.d(e,"TubeBufferGeometry",function(){return va}),n.d(e,"TorusKnotGeometry",function(){return xa}),n.d(e,"TorusKnotBufferGeometry",function(){return ya}),n.d(e,"TorusGeometry",function(){return _a}),n.d(e,"TorusBufferGeometry",function(){return ba}),n.d(e,"TextGeometry",function(){return Qa}),n.d(e,"TextBufferGeometry",function(){return Ka}),n.d(e,"SphereGeometry",function(){return $a}),n.d(e,"SphereBufferGeometry",function(){return to}),n.d(e,"RingGeometry",function(){return eo}),n.d(e,"RingBufferGeometry",function(){return no}),n.d(e,"PlaneGeometry",function(){return $n}),n.d(e,"PlaneBufferGeometry",function(){return ti}),n.d(e,"LatheGeometry",function(){return io}),n.d(e,"LatheBufferGeometry",function(){return ro}),n.d(e,"ShapeGeometry",function(){return ao}),n.d(e,"ShapeBufferGeometry",function(){return oo}),n.d(e,"ExtrudeGeometry",function(){return Ya}),n.d(e,"ExtrudeBufferGeometry",function(){return Za}),n.d(e,"EdgesGeometry",function(){return lo}),n.d(e,"ConeGeometry",function(){return ho}),n.d(e,"ConeBufferGeometry",function(){return uo}),n.d(e,"CylinderGeometry",function(){return qo}),n.d(e,"CylinderBufferGeometry",function(){return co}),n.d(e,"CircleGeometry",function(){return mo}),n.d(e,"CircleBufferGeometry",function(){return po}),n.d(e,"BoxGeometry",function(){return Qn}),n.d(e,"BoxBufferGeometry",function(){return Kn}),n.d(e,"ShadowMaterial",function(){return go}),n.d(e,"SpriteMaterial",function(){return Gr}),n.d(e,"RawShaderMaterial",function(){return vo}),n.d(e,"ShaderMaterial",function(){return hi}),n.d(e,"PointsMaterial",function(){return Kr}),n.d(e,"MeshPhysicalMaterial",function(){return yo}),n.d(e,"MeshStandardMaterial",function(){return xo}),n.d(e,"MeshPhongMaterial",function(){return _o}),n.d(e,"MeshToonMaterial",function(){return bo}),n.d(e,"MeshNormalMaterial",function(){return wo}),n.d(e,"MeshLambertMaterial",function(){return Eo}),n.d(e,"MeshDepthMaterial",function(){return Ar}),n.d(e,"MeshDistanceMaterial",function(){return Rr}),n.d(e,"MeshBasicMaterial",function(){return ci}),n.d(e,"LineDashedMaterial",function(){return Mo}),n.d(e,"LineBasicMaterial",function(){return Yr}),n.d(e,"Material",function(){return qi}),n.d(e,"Float64BufferAttribute",function(){return Wn}),n.d(e,"Float32BufferAttribute",function(){return jn}),n.d(e,"Uint32BufferAttribute",function(){return kn}),n.d(e,"Int32BufferAttribute",function(){return Vn}),n.d(e,"Uint16BufferAttribute",function(){return Gn}),n.d(e,"Int16BufferAttribute",function(){return Hn}),n.d(e,"Uint8ClampedBufferAttribute",function(){return zn}),n.d(e,"Uint8BufferAttribute",function(){return Fn}),n.d(e,"Int8BufferAttribute",function(){return Bn}),n.d(e,"BufferAttribute",function(){return Dn}),n.d(e,"ArcCurve",function(){return Fo}),n.d(e,"CatmullRomCurve3",function(){return jo}),n.d(e,"CubicBezierCurve",function(){return Zo}),n.d(e,"CubicBezierCurve3",function(){return Jo}),n.d(e,"EllipseCurve",function(){return Bo}),n.d(e,"LineCurve",function(){return Qo}),n.d(e,"LineCurve3",function(){return Ko}),n.d(e,"QuadraticBezierCurve",function(){return $o}),n.d(e,"QuadraticBezierCurve3",function(){return ts}),n.d(e,"SplineCurve",function(){return es}),n.d(e,"REVISION",function(){return m}),n.d(e,"MOUSE",function(){return d}),n.d(e,"CullFaceNone",function(){return p}),n.d(e,"CullFaceBack",function(){return f}),n.d(e,"CullFaceFront",function(){return g}),n.d(e,"CullFaceFrontBack",function(){return v}),n.d(e,"FrontFaceDirectionCW",function(){return x}),n.d(e,"FrontFaceDirectionCCW",function(){return y}),n.d(e,"BasicShadowMap",function(){return _}),n.d(e,"PCFShadowMap",function(){return b}),n.d(e,"PCFSoftShadowMap",function(){return w}),n.d(e,"FrontSide",function(){return E}),n.d(e,"BackSide",function(){return M}),n.d(e,"DoubleSide",function(){return T}),n.d(e,"FlatShading",function(){return S}),n.d(e,"SmoothShading",function(){return A}),n.d(e,"NoColors",function(){return R}),n.d(e,"FaceColors",function(){return L}),n.d(e,"VertexColors",function(){return P}),n.d(e,"NoBlending",function(){return C}),n.d(e,"NormalBlending",function(){return O}),n.d(e,"AdditiveBlending",function(){return I}),n.d(e,"SubtractiveBlending",function(){return N}),n.d(e,"MultiplyBlending",function(){return U}),n.d(e,"CustomBlending",function(){return D}),n.d(e,"AddEquation",function(){return B}),n.d(e,"SubtractEquation",function(){return F}),n.d(e,"ReverseSubtractEquation",function(){return z}),n.d(e,"MinEquation",function(){return H}),n.d(e,"MaxEquation",function(){return G}),n.d(e,"ZeroFactor",function(){return V}),n.d(e,"OneFactor",function(){return k}),n.d(e,"SrcColorFactor",function(){return j}),n.d(e,"OneMinusSrcColorFactor",function(){return W}),n.d(e,"SrcAlphaFactor",function(){return X}),n.d(e,"OneMinusSrcAlphaFactor",function(){return Y}),n.d(e,"DstAlphaFactor",function(){return Z}),n.d(e,"OneMinusDstAlphaFactor",function(){return J}),n.d(e,"DstColorFactor",function(){return Q}),n.d(e,"OneMinusDstColorFactor",function(){return K}),n.d(e,"SrcAlphaSaturateFactor",function(){return $}),n.d(e,"NeverDepth",function(){return tt}),n.d(e,"AlwaysDepth",function(){return et}),n.d(e,"LessDepth",function(){return nt}),n.d(e,"LessEqualDepth",function(){return it}),n.d(e,"EqualDepth",function(){return rt}),n.d(e,"GreaterEqualDepth",function(){return at}),n.d(e,"GreaterDepth",function(){return ot}),n.d(e,"NotEqualDepth",function(){return st}),n.d(e,"MultiplyOperation",function(){return lt}),n.d(e,"MixOperation",function(){return qt}),n.d(e,"AddOperation",function(){return ct}),n.d(e,"NoToneMapping",function(){return ht}),n.d(e,"LinearToneMapping",function(){return ut}),n.d(e,"ReinhardToneMapping",function(){return mt}),n.d(e,"Uncharted2ToneMapping",function(){return dt}),n.d(e,"CineonToneMapping",function(){return pt}),n.d(e,"UVMapping",function(){return ft}),n.d(e,"CubeReflectionMapping",function(){return gt}),n.d(e,"CubeRefractionMapping",function(){return vt}),n.d(e,"EquirectangularReflectionMapping",function(){return xt}),n.d(e,"EquirectangularRefractionMapping",function(){return yt}),n.d(e,"SphericalReflectionMapping",function(){return _t}),n.d(e,"CubeUVReflectionMapping",function(){return bt}),n.d(e,"CubeUVRefractionMapping",function(){return wt}),n.d(e,"RepeatWrapping",function(){return Et}),n.d(e,"ClampToEdgeWrapping",function(){return Mt}),n.d(e,"MirroredRepeatWrapping",function(){return Tt}),n.d(e,"NearestFilter",function(){return St}),n.d(e,"NearestMipMapNearestFilter",function(){return At}),n.d(e,"NearestMipMapLinearFilter",function(){return Rt}),n.d(e,"LinearFilter",function(){return Lt}),n.d(e,"LinearMipMapNearestFilter",function(){return Pt}),n.d(e,"LinearMipMapLinearFilter",function(){return Ct}),n.d(e,"UnsignedByteType",function(){return Ot}),n.d(e,"ByteType",function(){return It}),n.d(e,"ShortType",function(){return Nt}),n.d(e,"UnsignedShortType",function(){return Ut}),n.d(e,"IntType",function(){return Dt}),n.d(e,"UnsignedIntType",function(){return Bt}),n.d(e,"FloatType",function(){return Ft}),n.d(e,"HalfFloatType",function(){return zt}),n.d(e,"UnsignedShort4444Type",function(){return Ht}),n.d(e,"UnsignedShort5551Type",function(){return Gt}),n.d(e,"UnsignedShort565Type",function(){return Vt}),n.d(e,"UnsignedInt248Type",function(){return kt}),n.d(e,"AlphaFormat",function(){return jt}),n.d(e,"RGBFormat",function(){return Wt}),n.d(e,"RGBAFormat",function(){return Xt}),n.d(e,"LuminanceFormat",function(){return Yt}),n.d(e,"LuminanceAlphaFormat",function(){return Zt}),n.d(e,"RGBEFormat",function(){return Jt}),n.d(e,"DepthFormat",function(){return Qt}),n.d(e,"DepthStencilFormat",function(){return Kt}),n.d(e,"RGB_S3TC_DXT1_Format",function(){return $t}),n.d(e,"RGBA_S3TC_DXT1_Format",function(){return te}),n.d(e,"RGBA_S3TC_DXT3_Format",function(){return ee}),n.d(e,"RGBA_S3TC_DXT5_Format",function(){return ne}),n.d(e,"RGB_PVRTC_4BPPV1_Format",function(){return ie}),n.d(e,"RGB_PVRTC_2BPPV1_Format",function(){return re}),n.d(e,"RGBA_PVRTC_4BPPV1_Format",function(){return ae}),n.d(e,"RGBA_PVRTC_2BPPV1_Format",function(){return oe}),n.d(e,"RGB_ETC1_Format",function(){return se}),n.d(e,"RGBA_ASTC_4x4_Format",function(){return le}),n.d(e,"RGBA_ASTC_5x4_Format",function(){return qe}),n.d(e,"RGBA_ASTC_5x5_Format",function(){return ce}),n.d(e,"RGBA_ASTC_6x5_Format",function(){return he}),n.d(e,"RGBA_ASTC_6x6_Format",function(){return ue}),n.d(e,"RGBA_ASTC_8x5_Format",function(){return me}),n.d(e,"RGBA_ASTC_8x6_Format",function(){return de}),n.d(e,"RGBA_ASTC_8x8_Format",function(){return pe}),n.d(e,"RGBA_ASTC_10x5_Format",function(){return fe}),n.d(e,"RGBA_ASTC_10x6_Format",function(){return ge}),n.d(e,"RGBA_ASTC_10x8_Format",function(){return ve}),n.d(e,"RGBA_ASTC_10x10_Format",function(){return xe}),n.d(e,"RGBA_ASTC_12x10_Format",function(){return ye}),n.d(e,"RGBA_ASTC_12x12_Format",function(){return _e}),n.d(e,"LoopOnce",function(){return be}),n.d(e,"LoopRepeat",function(){return we}),n.d(e,"LoopPingPong",function(){return Ee}),n.d(e,"InterpolateDiscrete",function(){return Me}),n.d(e,"InterpolateLinear",function(){return Te}),n.d(e,"InterpolateSmooth",function(){return Se}),n.d(e,"ZeroCurvatureEnding",function(){return Ae}),n.d(e,"ZeroSlopeEnding",function(){return Re}),n.d(e,"WrapAroundEnding",function(){return Le}),n.d(e,"TrianglesDrawMode",function(){return Pe}),n.d(e,"TriangleStripDrawMode",function(){return Ce}),n.d(e,"TriangleFanDrawMode",function(){return Oe}),n.d(e,"LinearEncoding",function(){return Ie}),n.d(e,"sRGBEncoding",function(){return Ne}),n.d(e,"GammaEncoding",function(){return Ue}),n.d(e,"RGBEEncoding",function(){return De}),n.d(e,"LogLuvEncoding",function(){return Be}),n.d(e,"RGBM7Encoding",function(){return Fe}),n.d(e,"RGBM16Encoding",function(){return ze}),n.d(e,"RGBDEncoding",function(){return He}),n.d(e,"BasicDepthPacking",function(){return Ge}),n.d(e,"RGBADepthPacking",function(){return Ve}),n.d(e,"CubeGeometry",function(){return Qn}),n.d(e,"Face4",function(){return qq}),n.d(e,"LineStrip",function(){return cq}),n.d(e,"LinePieces",function(){return hq}),n.d(e,"MeshFaceMaterial",function(){return uq}),n.d(e,"MultiMaterial",function(){return mq}),n.d(e,"PointCloud",function(){return dq}),n.d(e,"Particle",function(){return pq}),n.d(e,"ParticleSystem",function(){return fq}),n.d(e,"PointCloudMaterial",function(){return gq}),n.d(e,"ParticleBasicMaterial",function(){return vq}),n.d(e,"ParticleSystemMaterial",function(){return xq}),n.d(e,"Vertex",function(){return yq}),n.d(e,"DynamicBufferAttribute",function(){return _q}),n.d(e,"Int8Attribute",function(){return bq}),n.d(e,"Uint8Attribute",function(){return wq}),n.d(e,"Uint8ClampedAttribute",function(){return Eq}),n.d(e,"Int16Attribute",function(){return Mq}),n.d(e,"Uint16Attribute",function(){return Tq}),n.d(e,"Int32Attribute",function(){return Sq}),n.d(e,"Uint32Attribute",function(){return Aq}),n.d(e,"Float32Attribute",function(){return Rq}),n.d(e,"Float64Attribute",function(){return Lq}),n.d(e,"ClosedSplineCurve3",function(){return Pq}),n.d(e,"SplineCurve3",function(){return Cq}),n.d(e,"Spline",function(){return Oq}),n.d(e,"AxisHelper",function(){return Iq}),n.d(e,"BoundingBoxHelper",function(){return Nq}),n.d(e,"EdgesHelper",function(){return Uq}),n.d(e,"WireframeHelper",function(){return Dq}),n.d(e,"XHRLoader",function(){return Bq}),n.d(e,"BinaryTextureLoader",function(){return Fq}),n.d(e,"GeometryUtils",function(){return zq}),n.d(e,"ImageUtils",function(){return Hq}),n.d(e,"Projector",function(){return Gq}),n.d(e,"CanvasRenderer",function(){return Vq}),n.d(e,"SceneUtils",function(){return kq}),n.d(e,"LensFlare",function(){return jq}),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t}),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:t>0?1:+t}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(t){if(void 0===t||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(void 0!==i&&null!==i)for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e}),Object.assign(i.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var n=this._listeners[t];if(void 0!==n){var i=n.indexOf(e);-1!==i&&n.splice(i,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var n=e.slice(0),i=0,r=n.length;i<r;i++)n[i].call(this,t)}}}});var r,a,o,s,l,q,c,h,u,m="92",d={LEFT:0,MIDDLE:1,RIGHT:2},p=0,f=1,g=2,v=3,x=0,y=1,_=0,b=1,w=2,E=0,M=1,T=2,S=1,A=2,R=0,L=1,P=2,C=0,O=1,I=2,N=3,U=4,D=5,B=100,F=101,z=102,H=103,G=104,V=200,k=201,j=202,W=203,X=204,Y=205,Z=206,J=207,Q=208,K=209,$=210,tt=0,et=1,nt=2,it=3,rt=4,at=5,ot=6,st=7,lt=0,qt=1,ct=2,ht=0,ut=1,mt=2,dt=3,pt=4,ft=300,gt=301,vt=302,xt=303,yt=304,_t=305,bt=306,wt=307,Et=1e3,Mt=1001,Tt=1002,St=1003,At=1004,Rt=1005,Lt=1006,Pt=1007,Ct=1008,Ot=1009,It=1010,Nt=1011,Ut=1012,Dt=1013,Bt=1014,Ft=1015,zt=1016,Ht=1017,Gt=1018,Vt=1019,kt=1020,jt=1021,Wt=1022,Xt=1023,Yt=1024,Zt=1025,Jt=Xt,Qt=1026,Kt=1027,$t=33776,te=33777,ee=33778,ne=33779,ie=35840,re=35841,ae=35842,oe=35843,se=36196,le=37808,qe=37809,ce=37810,he=37811,ue=37812,me=37813,de=37814,pe=37815,fe=37816,ge=37817,ve=37818,xe=37819,ye=37820,_e=37821,be=2200,we=2201,Ee=2202,Me=2300,Te=2301,Se=2302,Ae=2400,Re=2401,Le=2402,Pe=0,Ce=1,Oe=2,Ie=3e3,Ne=3001,Ue=3007,De=3002,Be=3003,Fe=3004,ze=3005,He=3006,Ge=3200,Ve=3201,ke={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var t=[],e=0;e<256;e++)t[e]=(e<16?"0":"")+e.toString(16);return function(){var e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return(t[255&e]+t[e>>8&255]+t[e>>16&255]+t[e>>24&255]+"-"+t[255&n]+t[n>>8&255]+"-"+t[n>>16&15|64]+t[n>>24&255]+"-"+t[63&i|128]+t[i>>8&255]+"-"+t[i>>16&255]+t[i>>24&255]+t[255&r]+t[r>>8&255]+t[r>>16&255]+t[r>>24&255]).toUpperCase()}}(),clamp:function(t,e,n){return Math.max(e,Math.min(n,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,n,i,r){return i+(t-e)*(r-i)/(n-e)},lerp:function(t,e,n){return(1-n)*t+n*e},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(t){return t*ke.DEG2RAD},radToDeg:function(t){return t*ke.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}};function je(t,e){this.x=t||0,this.y=e||0}function We(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function Xe(t,e,n,i){this._x=t||0,this._y=e||0,this._z=n||0,this._w=void 0!==i?i:1}function Ye(t,e,n){this.x=t||0,this.y=e||0,this.z=n||0}function Ze(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(je.prototype,{width:{get:function(){return this.x},set:function(t){this.x=t}},height:{get:function(){return this.y},set:function(t){this.y=t}}}),Object.assign(je.prototype,{isVector2:!0,set:function(t,e){return this.x=t,this.y=e,this},setScalar:function(t){return this.x=t,this.y=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addScalar:function(t){return this.x+=t,this.y+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subScalar:function(t){return this.x-=t,this.y-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return this.multiplyScalar(1/t)},applyMatrix3:function(t){var e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this},clampScalar:(r=new je,a=new je,function(t,e){return r.set(t,t),a.set(e,e),this.clamp(r,a)}),clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var t=Math.atan2(this.y,this.x);return t<0&&(t+=2*Math.PI),t},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y;return e*e+n*n},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this},rotateAround:function(t,e){var n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*n-a*i+t.x,this.y=r*i+a*n+t.y,this}}),Object.assign(We.prototype,{isMatrix4:!0,set:function(t,e,n,i,r,a,o,s,l,q,c,h,u,m,d,p){var f=this.elements;return f[0]=t,f[4]=e,f[8]=n,f[12]=i,f[1]=r,f[5]=a,f[9]=o,f[13]=s,f[2]=l,f[6]=q,f[10]=c,f[14]=h,f[3]=u,f[7]=m,f[11]=d,f[15]=p,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new We).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this},copyPosition:function(t){var e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this},extractBasis:function(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this},extractRotation:(h=new Ye,function(t){var e=this.elements,n=t.elements,i=1/h.setFromMatrixColumn(t,0).length(),r=1/h.setFromMatrixColumn(t,1).length(),a=1/h.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,this}),makeRotationFromEuler:function(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var e=this.elements,n=t.x,i=t.y,r=t.z,a=Math.cos(n),o=Math.sin(n),s=Math.cos(i),l=Math.sin(i),q=Math.cos(r),c=Math.sin(r);if("XYZ"===t.order){var h=a*q,u=a*c,m=o*q,d=o*c;e[0]=s*q,e[4]=-s*c,e[8]=l,e[1]=u+m*l,e[5]=h-d*l,e[9]=-o*s,e[2]=d-h*l,e[6]=m+u*l,e[10]=a*s}else if("YXZ"===t.order){var p=s*q,f=s*c,g=l*q,v=l*c;e[0]=p+v*o,e[4]=g*o-f,e[8]=a*l,e[1]=a*c,e[5]=a*q,e[9]=-o,e[2]=f*o-g,e[6]=v+p*o,e[10]=a*s}else if("ZXY"===t.order){p=s*q,f=s*c,g=l*q,v=l*c;e[0]=p-v*o,e[4]=-a*c,e[8]=g+f*o,e[1]=f+g*o,e[5]=a*q,e[9]=v-p*o,e[2]=-a*l,e[6]=o,e[10]=a*s}else if("ZYX"===t.order){h=a*q,u=a*c,m=o*q,d=o*c;e[0]=s*q,e[4]=m*l-u,e[8]=h*l+d,e[1]=s*c,e[5]=d*l+h,e[9]=u*l-m,e[2]=-l,e[6]=o*s,e[10]=a*s}else if("YZX"===t.order){var x=a*s,y=a*l,_=o*s,b=o*l;e[0]=s*q,e[4]=b-x*c,e[8]=_*c+y,e[1]=c,e[5]=a*q,e[9]=-o*q,e[2]=-l*q,e[6]=y*c+_,e[10]=x-b*c}else if("XZY"===t.order){x=a*s,y=a*l,_=o*s,b=o*l;e[0]=s*q,e[4]=-c,e[8]=l*q,e[1]=x*c+b,e[5]=a*q,e[9]=y*c-_,e[2]=_*c-y,e[6]=o*q,e[10]=b*c+x}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromQuaternion:function(t){var e=this.elements,n=t._x,i=t._y,r=t._z,a=t._w,o=n+n,s=i+i,l=r+r,q=n*o,c=n*s,h=n*l,u=i*s,m=i*l,d=r*l,p=a*o,f=a*s,g=a*l;return e[0]=1-(u+d),e[4]=c-g,e[8]=h+f,e[1]=c+g,e[5]=1-(q+d),e[9]=m-p,e[2]=h-f,e[6]=m+p,e[10]=1-(q+u),e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},lookAt:(l=new Ye,q=new Ye,c=new Ye,function(t,e,n){var i=this.elements;return c.subVectors(t,e),0===c.lengthSq()&&(c.z=1),c.normalize(),l.crossVectors(n,c),0===l.lengthSq()&&(1===Math.abs(n.z)?c.x+=1e-4:c.z+=1e-4,c.normalize(),l.crossVectors(n,c)),l.normalize(),q.crossVectors(c,l),i[0]=l.x,i[4]=q.x,i[8]=c.x,i[1]=l.y,i[5]=q.y,i[9]=c.y,i[2]=l.z,i[6]=q.z,i[10]=c.z,this}),multiply:function(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,i=e.elements,r=this.elements,a=n[0],o=n[4],s=n[8],l=n[12],q=n[1],c=n[5],h=n[9],u=n[13],m=n[2],d=n[6],p=n[10],f=n[14],g=n[3],v=n[7],x=n[11],y=n[15],_=i[0],b=i[4],w=i[8],E=i[12],M=i[1],T=i[5],S=i[9],A=i[13],R=i[2],L=i[6],P=i[10],C=i[14],O=i[3],I=i[7],N=i[11],U=i[15];return r[0]=a*_+o*M+s*R+l*O,r[4]=a*b+o*T+s*L+l*I,r[8]=a*w+o*S+s*P+l*N,r[12]=a*E+o*A+s*C+l*U,r[1]=q*_+c*M+h*R+u*O,r[5]=q*b+c*T+h*L+u*I,r[9]=q*w+c*S+h*P+u*N,r[13]=q*E+c*A+h*C+u*U,r[2]=m*_+d*M+p*R+f*O,r[6]=m*b+d*T+p*L+f*I,r[10]=m*w+d*S+p*P+f*N,r[14]=m*E+d*A+p*C+f*U,r[3]=g*_+v*M+x*R+y*O,r[7]=g*b+v*T+x*L+y*I,r[11]=g*w+v*S+x*P+y*N,r[15]=g*E+v*A+x*C+y*U,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this},applyToBufferAttribute:function(){var t=new Ye;return function(e){for(var n=0,i=e.count;n<i;n++)t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.applyMatrix4(this),e.setXYZ(n,t.x,t.y,t.z);return e}}(),determinant:function(){var t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],a=t[1],o=t[5],s=t[9],l=t[13],q=t[2],c=t[6],h=t[10],u=t[14];return t[3]*(+r*s*c-i*l*c-r*o*h+n*l*h+i*o*u-n*s*u)+t[7]*(+e*s*u-e*l*h+r*a*h-i*a*u+i*l*q-r*s*q)+t[11]*(+e*l*c-e*o*u-r*a*c+n*a*u+r*o*q-n*l*q)+t[15]*(-i*o*q-e*s*c+e*o*h+i*a*c-n*a*h+n*s*q)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},setPosition:function(t){var e=this.elements;return e[12]=t.x,e[13]=t.y,e[14]=t.z,this},getInverse:function(t,e){var n=this.elements,i=t.elements,r=i[0],a=i[1],o=i[2],s=i[3],l=i[4],q=i[5],c=i[6],h=i[7],u=i[8],m=i[9],d=i[10],p=i[11],f=i[12],g=i[13],v=i[14],x=i[15],y=m*v*h-g*d*h+g*c*p-q*v*p-m*c*x+q*d*x,_=f*d*h-u*v*h-f*c*p+l*v*p+u*c*x-l*d*x,b=u*g*h-f*m*h+f*q*p-l*g*p-u*q*x+l*m*x,w=f*m*c-u*g*c-f*q*d+l*g*d+u*q*v-l*m*v,E=r*y+a*_+o*b+s*w;if(0===E){var M="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(M);return console.warn(M),this.identity()}var T=1/E;return n[0]=y*T,n[1]=(g*d*s-m*v*s-g*o*p+a*v*p+m*o*x-a*d*x)*T,n[2]=(q*v*s-g*c*s+g*o*h-a*v*h-q*o*x+a*c*x)*T,n[3]=(m*c*s-q*d*s-m*o*h+a*d*h+q*o*p-a*c*p)*T,n[4]=_*T,n[5]=(u*v*s-f*d*s+f*o*p-r*v*p-u*o*x+r*d*x)*T,n[6]=(f*c*s-l*v*s-f*o*h+r*v*h+l*o*x-r*c*x)*T,n[7]=(l*d*s-u*c*s+u*o*h-r*d*h-l*o*p+r*c*p)*T,n[8]=b*T,n[9]=(f*m*s-u*g*s-f*a*p+r*g*p+u*a*x-r*m*x)*T,n[10]=(l*g*s-f*q*s+f*a*h-r*g*h-l*a*x+r*q*x)*T,n[11]=(u*q*s-l*m*s-u*a*h+r*m*h+l*a*p-r*q*p)*T,n[12]=w*T,n[13]=(u*g*o-f*m*o+f*a*d-r*g*d-u*a*v+r*m*v)*T,n[14]=(f*q*o-l*g*o-f*a*c+r*g*c+l*a*v-r*q*v)*T,n[15]=(l*m*o-u*q*o+u*a*c-r*m*c-l*a*d+r*q*d)*T,this},scale:function(t){var e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this},getMaxScaleOnAxis:function(){var t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))},makeTranslation:function(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var n=Math.cos(e),i=Math.sin(e),r=1-n,a=t.x,o=t.y,s=t.z,l=r*a,q=r*o;return this.set(l*a+n,l*o-i*s,l*s+i*o,0,l*o+i*s,q*o+n,q*s-i*a,0,l*s-i*o,q*s+i*a,r*s*s+n,0,0,0,0,1),this},makeScale:function(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(t,e,n){return this.set(1,e,n,0,t,1,n,0,t,e,1,0,0,0,0,1),this},compose:function(t,e,n){return this.makeRotationFromQuaternion(e),this.scale(n),this.setPosition(t),this},decompose:(o=new Ye,s=new We,function(t,e,n){var i=this.elements,r=o.set(i[0],i[1],i[2]).length(),a=o.set(i[4],i[5],i[6]).length(),l=o.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],s.copy(this);var q=1/r,c=1/a,h=1/l;return s.elements[0]*=q,s.elements[1]*=q,s.elements[2]*=q,s.elements[4]*=c,s.elements[5]*=c,s.elements[6]*=c,s.elements[8]*=h,s.elements[9]*=h,s.elements[10]*=h,e.setFromRotationMatrix(s),n.x=r,n.y=a,n.z=l,this}),makePerspective:function(t,e,n,i,r,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var o=this.elements,s=2*r/(e-t),l=2*r/(n-i),q=(e+t)/(e-t),c=(n+i)/(n-i),h=-(a+r)/(a-r),u=-2*a*r/(a-r);return o[0]=s,o[4]=0,o[8]=q,o[12]=0,o[1]=0,o[5]=l,o[9]=c,o[13]=0,o[2]=0,o[6]=0,o[10]=h,o[14]=u,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makeOrthographic:function(t,e,n,i,r,a){var o=this.elements,s=1/(e-t),l=1/(n-i),q=1/(a-r),c=(e+t)*s,h=(n+i)*l,u=(a+r)*q;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-c,o[1]=0,o[5]=2*l,o[9]=0,o[13]=-h,o[2]=0,o[6]=0,o[10]=-2*q,o[14]=-u,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(t){for(var e=this.elements,n=t.elements,i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<16;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}),Object.assign(Xe,{slerp:function(t,e,n,i){return n.copy(t).slerp(e,i)},slerpFlat:function(t,e,n,i,r,a,o){var s=n[i+0],l=n[i+1],q=n[i+2],c=n[i+3],h=r[a+0],u=r[a+1],m=r[a+2],d=r[a+3];if(c!==d||s!==h||l!==u||q!==m){var p=1-o,f=s*h+l*u+q*m+c*d,g=f>=0?1:-1,v=1-f*f;if(v>Number.EPSILON){var x=Math.sqrt(v),y=Math.atan2(x,f*g);p=Math.sin(p*y)/x,o=Math.sin(o*y)/x}var _=o*g;if(s=s*p+h*_,l=l*p+u*_,q=q*p+m*_,c=c*p+d*_,p===1-o){var b=1/Math.sqrt(s*s+l*l+q*q+c*c);s*=b,l*=b,q*=b,c*=b}}t[e]=s,t[e+1]=l,t[e+2]=q,t[e+3]=c}}),Object.defineProperties(Xe.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(t){this._w=t,this.onChangeCallback()}}}),Object.assign(Xe.prototype,{set:function(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this.onChangeCallback(),this},setFromEuler:function(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=t._x,i=t._y,r=t._z,a=t.order,o=Math.cos,s=Math.sin,l=o(n/2),q=o(i/2),c=o(r/2),h=s(n/2),u=s(i/2),m=s(r/2);return"XYZ"===a?(this._x=h*q*c+l*u*m,this._y=l*u*c-h*q*m,this._z=l*q*m+h*u*c,this._w=l*q*c-h*u*m):"YXZ"===a?(this._x=h*q*c+l*u*m,this._y=l*u*c-h*q*m,this._z=l*q*m-h*u*c,this._w=l*q*c+h*u*m):"ZXY"===a?(this._x=h*q*c-l*u*m,this._y=l*u*c+h*q*m,this._z=l*q*m+h*u*c,this._w=l*q*c-h*u*m):"ZYX"===a?(this._x=h*q*c-l*u*m,this._y=l*u*c+h*q*m,this._z=l*q*m-h*u*c,this._w=l*q*c+h*u*m):"YZX"===a?(this._x=h*q*c+l*u*m,this._y=l*u*c+h*q*m,this._z=l*q*m-h*u*c,this._w=l*q*c-h*u*m):"XZY"===a&&(this._x=h*q*c-l*u*m,this._y=l*u*c-h*q*m,this._z=l*q*m+h*u*c,this._w=l*q*c+h*u*m),!1!==e&&this.onChangeCallback(),this},setFromAxisAngle:function(t,e){var n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this.onChangeCallback(),this},setFromRotationMatrix:function(t){var e,n=t.elements,i=n[0],r=n[4],a=n[8],o=n[1],s=n[5],l=n[9],q=n[2],c=n[6],h=n[10],u=i+s+h;return u>0?(e=.5/Math.sqrt(u+1),this._w=.25/e,this._x=(c-l)*e,this._y=(a-q)*e,this._z=(o-r)*e):i>s&&i>h?(e=2*Math.sqrt(1+i-s-h),this._w=(c-l)/e,this._x=.25*e,this._y=(r+o)/e,this._z=(a+q)/e):s>h?(e=2*Math.sqrt(1+s-i-h),this._w=(a-q)/e,this._x=(r+o)/e,this._y=.25*e,this._z=(l+c)/e):(e=2*Math.sqrt(1+h-i-s),this._w=(o-r)/e,this._x=(a+q)/e,this._y=(l+c)/e,this._z=.25*e),this.onChangeCallback(),this},setFromUnitVectors:function(){var t,e=new Ye;return function(n,i){return void 0===e&&(e=new Ye),(t=n.dot(i)+1)<1e-6?(t=0,Math.abs(n.x)>Math.abs(n.z)?e.set(-n.y,n.x,0):e.set(0,-n.z,n.y)):e.crossVectors(n,i),this._x=e.x,this._y=e.y,this._z=e.z,this._w=t,this.normalize()}}(),inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this.onChangeCallback(),this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)},premultiply:function(t){return this.multiplyQuaternions(t,this)},multiplyQuaternions:function(t,e){var n=t._x,i=t._y,r=t._z,a=t._w,o=e._x,s=e._y,l=e._z,q=e._w;return this._x=n*q+a*o+i*l-r*s,this._y=i*q+a*s+r*o-n*l,this._z=r*q+a*l+n*s-i*o,this._w=a*q-n*o-i*s-r*l,this.onChangeCallback(),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var n=this._x,i=this._y,r=this._z,a=this._w,o=a*t._w+n*t._x+i*t._y+r*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;var s=Math.sqrt(1-o*o);if(Math.abs(s)<.001)return this._w=.5*(a+this._w),this._x=.5*(n+this._x),this._y=.5*(i+this._y),this._z=.5*(r+this._z),this;var l=Math.atan2(s,o),q=Math.sin((1-e)*l)/s,c=Math.sin(e*l)/s;return this._w=a*q+this._w*c,this._x=n*q+this._x*c,this._y=i*q+this._y*c,this._z=r*q+this._z*c,this.onChangeCallback(),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(Ye.prototype,{isVector3:!0,set:function(t,e,n){return this.x=t,this.y=e,this.z=n,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this},applyEuler:(u=new Xe,function(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(u.setFromEuler(t))}),applyAxisAngle:function(){var t=new Xe;return function(e,n){return this.applyQuaternion(t.setFromAxisAngle(e,n))}}(),applyMatrix3:function(t){var e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this},applyMatrix4:function(t){var e=this.x,n=this.y,i=this.z,r=t.elements,a=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*a,this},applyQuaternion:function(t){var e=this.x,n=this.y,i=this.z,r=t.x,a=t.y,o=t.z,s=t.w,l=s*e+a*i-o*n,q=s*n+o*e-r*i,c=s*i+r*n-a*e,h=-r*e-a*n-o*i;return this.x=l*s+h*-r+q*-o-c*-a,this.y=q*s+h*-a+c*-r-l*-o,this.z=c*s+h*-o+l*-a-q*-r,this},project:function(){var t=new We;return function(e){return t.multiplyMatrices(e.projectionMatrix,t.getInverse(e.matrixWorld)),this.applyMatrix4(t)}}(),unproject:function(){var t=new We;return function(e){return t.multiplyMatrices(e.matrixWorld,t.getInverse(e.projectionMatrix)),this.applyMatrix4(t)}}(),transformDirection:function(t){var e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return this.multiplyScalar(1/t)},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this},clampScalar:function(){var t=new Ye,e=new Ye;return function(n,i){return t.set(n,n,n),e.set(i,i,i),this.clamp(t,e)}}(),clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},cross:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)},crossVectors:function(t,e){var n=t.x,i=t.y,r=t.z,a=e.x,o=e.y,s=e.z;return this.x=i*s-r*o,this.y=r*a-n*s,this.z=n*o-i*a,this},projectOnVector:function(t){var e=t.dot(this)/t.lengthSq();return this.copy(t).multiplyScalar(e)},projectOnPlane:function(){var t=new Ye;return function(e){return t.copy(this).projectOnVector(e),this.sub(t)}}(),reflect:function(){var t=new Ye;return function(e){return this.sub(t.copy(e).multiplyScalar(2*this.dot(e)))}}(),angleTo:function(t){var e=this.dot(t)/Math.sqrt(this.lengthSq()*t.lengthSq());return Math.acos(ke.clamp(e,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)},setFromSpherical:function(t){var e=Math.sin(t.phi)*t.radius;return this.x=e*Math.sin(t.theta),this.y=Math.cos(t.phi)*t.radius,this.z=e*Math.cos(t.theta),this},setFromCylindrical:function(t){return this.x=t.radius*Math.sin(t.theta),this.y=t.y,this.z=t.radius*Math.cos(t.theta),this},setFromMatrixPosition:function(t){var e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(t){var e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this},setFromMatrixColumn:function(t,e){return this.fromArray(t.elements,4*e)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}}),Object.assign(Ze.prototype,{isMatrix3:!0,set:function(t,e,n,i,r,a,o,s,l){var q=this.elements;return q[0]=t,q[1]=i,q[2]=o,q[3]=e,q[4]=r,q[5]=s,q[6]=n,q[7]=a,q[8]=l,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this},setFromMatrix4:function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this},applyToBufferAttribute:function(){var t=new Ye;return function(e){for(var n=0,i=e.count;n<i;n++)t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.applyMatrix3(this),e.setXYZ(n,t.x,t.y,t.z);return e}}(),multiply:function(t){return this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,i=e.elements,r=this.elements,a=n[0],o=n[3],s=n[6],l=n[1],q=n[4],c=n[7],h=n[2],u=n[5],m=n[8],d=i[0],p=i[3],f=i[6],g=i[1],v=i[4],x=i[7],y=i[2],_=i[5],b=i[8];return r[0]=a*d+o*g+s*y,r[3]=a*p+o*v+s*_,r[6]=a*f+o*x+s*b,r[1]=l*d+q*g+c*y,r[4]=l*p+q*v+c*_,r[7]=l*f+q*x+c*b,r[2]=h*d+u*g+m*y,r[5]=h*p+u*v+m*_,r[8]=h*f+u*x+m*b,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},determinant:function(){var t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],o=t[5],s=t[6],l=t[7],q=t[8];return e*a*q-e*o*l-n*r*q+n*o*s+i*r*l-i*a*s},getInverse:function(t,e){t&&t.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var n=t.elements,i=this.elements,r=n[0],a=n[1],o=n[2],s=n[3],l=n[4],q=n[5],c=n[6],h=n[7],u=n[8],m=u*l-q*h,d=q*c-u*s,p=h*s-l*c,f=r*m+a*d+o*p;if(0===f){var g="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===e)throw new Error(g);return console.warn(g),this.identity()}var v=1/f;return i[0]=m*v,i[1]=(o*h-u*a)*v,i[2]=(q*a-o*l)*v,i[3]=d*v,i[4]=(u*r-o*c)*v,i[5]=(o*s-q*r)*v,i[6]=p*v,i[7]=(a*c-h*r)*v,i[8]=(l*r-a*s)*v,this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},getNormalMatrix:function(t){return this.setFromMatrix4(t).getInverse(this).transpose()},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},setUvTransform:function(t,e,n,i,r,a,o){var s=Math.cos(r),l=Math.sin(r);this.set(n*s,n*l,-n*(s*a+l*o)+a+t,-i*l,i*s,-i*(-l*a+s*o)+o+e,0,0,1)},scale:function(t,e){var n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this},rotate:function(t){var e=Math.cos(t),n=Math.sin(t),i=this.elements,r=i[0],a=i[3],o=i[6],s=i[1],l=i[4],q=i[7];return i[0]=e*r+n*s,i[3]=e*a+n*l,i[6]=e*o+n*q,i[1]=-n*r+e*s,i[4]=-n*a+e*l,i[7]=-n*o+e*q,this},translate:function(t,e){var n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this},equals:function(t){for(var e=this.elements,n=t.elements,i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<9;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}});var Je,Qe,Ke,$e,tn,en,nn=0;function rn(t,e,n,i,r,a,o,s,l,q){Object.defineProperty(this,"id",{value:nn++}),this.uuid=ke.generateUUID(),this.name="",this.image=void 0!==t?t:rn.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==e?e:rn.DEFAULT_MAPPING,this.wrapS=void 0!==n?n:Mt,this.wrapT=void 0!==i?i:Mt,this.magFilter=void 0!==r?r:Lt,this.minFilter=void 0!==a?a:Ct,this.anisotropy=void 0!==l?l:1,this.format=void 0!==o?o:Xt,this.type=void 0!==s?s:Ot,this.offset=new je(0,0),this.repeat=new je(1,1),this.center=new je(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ze,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==q?q:Ie,this.version=0,this.onUpdate=null}function an(t,e,n,i){this.x=t||0,this.y=e||0,this.z=n||0,this.w=void 0!==i?i:1}function on(t,e,n){this.width=t,this.height=e,this.scissor=new an(0,0,t,e),this.scissorTest=!1,this.viewport=new an(0,0,t,e),void 0===(n=n||{}).minFilter&&(n.minFilter=Lt),this.texture=new rn(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function sn(t,e,n){on.call(this,t,e,n),this.activeCubeFace=0,this.activeMipMapLevel=0}function ln(t,e,n,i,r,a,o,s,l,q,c,h){rn.call(this,null,a,o,s,l,q,i,r,c,h),this.image={data:t,width:e,height:n},this.magFilter=void 0!==l?l:St,this.minFilter=void 0!==q?q:St,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function qn(t,e){this.min=void 0!==t?t:new Ye(1/0,1/0,1/0),this.max=void 0!==e?e:new Ye(-1/0,-1/0,-1/0)}function cn(t,e){this.center=void 0!==t?t:new Ye,this.radius=void 0!==e?e:0}function hn(t,e){this.normal=void 0!==t?t:new Ye(1,0,0),this.constant=void 0!==e?e:0}function un(t,e,n,i,r,a){this.planes=[void 0!==t?t:new hn,void 0!==e?e:new hn,void 0!==n?n:new hn,void 0!==i?i:new hn,void 0!==r?r:new hn,void 0!==a?a:new hn]}rn.DEFAULT_IMAGE=void 0,rn.DEFAULT_MAPPING=ft,rn.prototype=Object.assign(Object.create(i.prototype),{constructor:rn,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this},toJSON:function(t){var e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];var n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var i=this.image;void 0===i.uuid&&(i.uuid=ke.generateUUID()),e||void 0!==t.images[i.uuid]||(t.images[i.uuid]={uuid:i.uuid,url:function(t){var e;if(t instanceof HTMLCanvasElement)e=t;else{(e=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")).width=t.width,e.height=t.height;var n=e.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height)}return e.width>2048||e.height>2048?e.toDataURL("image/jpeg",.6):e.toDataURL("image/png")}(i)}),n.image=i.uuid}return e||(t.textures[this.uuid]=n),n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(t){if(this.mapping===ft){if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Et:t.x=t.x-Math.floor(t.x);break;case Mt:t.x=t.x<0?0:1;break;case Tt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case Et:t.y=t.y-Math.floor(t.y);break;case Mt:t.y=t.y<0?0:1;break;case Tt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}this.flipY&&(t.y=1-t.y)}}}),Object.defineProperty(rn.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(an.prototype,{isVector4:!0,set:function(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this.w=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,n=this.y,i=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*e+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*e+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*e+a[7]*n+a[11]*i+a[15]*r,this},divideScalar:function(t){return this.multiplyScalar(1/t)},setAxisAngleFromQuaternion:function(t){this.w=2*Math.acos(t.w);var e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this},setAxisAngleFromRotationMatrix:function(t){var e,n,i,r,a=t.elements,o=a[0],s=a[4],l=a[8],q=a[1],c=a[5],h=a[9],u=a[2],m=a[6],d=a[10];if(Math.abs(s-q)<.01&&Math.abs(l-u)<.01&&Math.abs(h-m)<.01){if(Math.abs(s+q)<.1&&Math.abs(l+u)<.1&&Math.abs(h+m)<.1&&Math.abs(o+c+d-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;var p=(o+1)/2,f=(c+1)/2,g=(d+1)/2,v=(s+q)/4,x=(l+u)/4,y=(h+m)/4;return p>f&&p>g?p<.01?(n=0,i=.707106781,r=.707106781):(i=v/(n=Math.sqrt(p)),r=x/n):f>g?f<.01?(n=.707106781,i=0,r=.707106781):(n=v/(i=Math.sqrt(f)),r=y/i):g<.01?(n=.707106781,i=.707106781,r=0):(n=x/(r=Math.sqrt(g)),i=y/r),this.set(n,i,r,e),this}var _=Math.sqrt((m-h)*(m-h)+(l-u)*(l-u)+(q-s)*(q-s));return Math.abs(_)<.001&&(_=1),this.x=(m-h)/_,this.y=(l-u)/_,this.z=(q-s)/_,this.w=Math.acos((o+c+d-1)/2),this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this},clampScalar:function(){var t,e;return function(n,i){return void 0===t&&(t=new an,e=new an),t.set(n,n,n,n),e.set(i,i,i,i),this.clamp(t,e)}}(),clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}}),on.prototype=Object.assign(Object.create(i.prototype),{constructor:on,isWebGLRenderTarget:!0,setSize:function(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.width=t.width,this.height=t.height,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),sn.prototype=Object.create(on.prototype),sn.prototype.constructor=sn,sn.prototype.isWebGLRenderTargetCube=!0,ln.prototype=Object.create(rn.prototype),ln.prototype.constructor=ln,ln.prototype.isDataTexture=!0,Object.assign(qn.prototype,{isBox3:!0,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromArray:function(t){for(var e=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,o=-1/0,s=0,l=t.length;s<l;s+=3){var q=t[s],c=t[s+1],h=t[s+2];q<e&&(e=q),c<n&&(n=c),h<i&&(i=h),q>r&&(r=q),c>a&&(a=c),h>o&&(o=h)}return this.min.set(e,n,i),this.max.set(r,a,o),this},setFromBufferAttribute:function(t){for(var e=1/0,n=1/0,i=1/0,r=-1/0,a=-1/0,o=-1/0,s=0,l=t.count;s<l;s++){var q=t.getX(s),c=t.getY(s),h=t.getZ(s);q<e&&(e=q),c<n&&(n=c),h<i&&(i=h),q>r&&(r=q),c>a&&(a=c),h>o&&(o=h)}return this.min.set(e,n,i),this.max.set(r,a,o),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new Ye;return function(e,n){var i=t.copy(n).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}}(),setFromObject:function(t){return this.makeEmpty(),this.expandByObject(t)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new Ye),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new Ye),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},expandByObject:function(){var t,e,n,i=new Ye;function r(r){var a=r.geometry;if(void 0!==a)if(a.isGeometry){var o=a.vertices;for(e=0,n=o.length;e<n;e++)i.copy(o[e]),i.applyMatrix4(r.matrixWorld),t.expandByPoint(i)}else if(a.isBufferGeometry){var s=a.attributes.position;if(void 0!==s)for(e=0,n=s.count;e<n;e++)i.fromBufferAttribute(s,e).applyMatrix4(r.matrixWorld),t.expandByPoint(i)}}return function(e){return t=this,e.updateMatrixWorld(!0),e.traverse(r),this}}(),containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new Ye),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},intersectsSphere:(Qe=new Ye,function(t){return this.clampPoint(t.center,Qe),Qe.distanceToSquared(t.center)<=t.radius*t.radius}),intersectsPlane:function(t){var e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=t.constant&&n>=t.constant},intersectsTriangle:function(){var t=new Ye,e=new Ye,n=new Ye,i=new Ye,r=new Ye,a=new Ye,o=new Ye,s=new Ye,l=new Ye,q=new Ye;function c(i){var r,a;for(r=0,a=i.length-3;r<=a;r+=3){o.fromArray(i,r);var s=l.x*Math.abs(o.x)+l.y*Math.abs(o.y)+l.z*Math.abs(o.z),q=t.dot(o),c=e.dot(o),h=n.dot(o);if(Math.max(-Math.max(q,c,h),Math.min(q,c,h))>s)return!1}return!0}return function(o){if(this.isEmpty())return!1;this.getCenter(s),l.subVectors(this.max,s),t.subVectors(o.a,s),e.subVectors(o.b,s),n.subVectors(o.c,s),i.subVectors(e,t),r.subVectors(n,e),a.subVectors(t,n);var h=[0,-i.z,i.y,0,-r.z,r.y,0,-a.z,a.y,i.z,0,-i.x,r.z,0,-r.x,a.z,0,-a.x,-i.y,i.x,0,-r.y,r.x,0,-a.y,a.x,0];return!!c(h)&&(!!c(h=[1,0,0,0,1,0,0,0,1])&&(q.crossVectors(i,r),c(h=[q.x,q.y,q.z])))}}(),clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new Ye),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new Ye;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),getBoundingSphere:function(){var t=new Ye;return function(e){return void 0===e&&(console.warn("THREE.Box3: .getBoundingSphere() target is now required"),e=new cn),this.getCenter(e.center),e.radius=.5*this.getSize(t).length(),e}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:(Je=[new Ye,new Ye,new Ye,new Ye,new Ye,new Ye,new Ye,new Ye],function(t){return this.isEmpty()?this:(Je[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Je[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Je[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Je[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Je[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Je[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Je[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Je[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Je),this)}),translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Object.assign(cn.prototype,{set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:(Ke=new qn,function(t,e){var n=this.center;void 0!==e?n.copy(e):Ke.setFromPoints(t).getCenter(n);for(var i=0,r=0,a=t.length;r<a;r++)i=Math.max(i,n.distanceToSquared(t[r]));return this.radius=Math.sqrt(i),this}),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},intersectsBox:function(t){return t.intersectsSphere(this)},intersectsPlane:function(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius},clampPoint:function(t,e){var n=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new Ye),e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new qn),t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius}}),Object.assign(hn.prototype,{set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:function(){var t=new Ye,e=new Ye;return function(n,i,r){var a=t.subVectors(r,i).cross(e.subVectors(n,i)).normalize();return this.setFromNormalAndCoplanarPoint(a,n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new Ye),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(){var t=new Ye;return function(e,n){void 0===n&&(console.warn("THREE.Plane: .intersectLine() target is now required"),n=new Ye);var i=e.delta(t),r=this.normal.dot(i);if(0===r)return 0===this.distanceToPoint(e.start)?n.copy(e.start):void 0;var a=-(e.start.dot(this.normal)+this.constant)/r;return a<0||a>1?void 0:n.copy(i).multiplyScalar(a).add(e.start)}}(),intersectsLine:function(t){var e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new Ye),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var t=new Ye,e=new Ze;return function(n,i){var r=i||e.getNormalMatrix(n),a=this.coplanarPoint(t).applyMatrix4(n),o=this.normal.applyMatrix3(r).normalize();return this.constant=-a.dot(o),this}}(),translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}}),Object.assign(un.prototype,{set:function(t,e,n,i,r,a){var o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(n),o[3].copy(i),o[4].copy(r),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){for(var e=this.planes,n=0;n<6;n++)e[n].copy(t.planes[n]);return this},setFromMatrix:function(t){var e=this.planes,n=t.elements,i=n[0],r=n[1],a=n[2],o=n[3],s=n[4],l=n[5],q=n[6],c=n[7],h=n[8],u=n[9],m=n[10],d=n[11],p=n[12],f=n[13],g=n[14],v=n[15];return e[0].setComponents(o-i,c-s,d-h,v-p).normalize(),e[1].setComponents(o+i,c+s,d+h,v+p).normalize(),e[2].setComponents(o+r,c+l,d+u,v+f).normalize(),e[3].setComponents(o-r,c-l,d-u,v-f).normalize(),e[4].setComponents(o-a,c-q,d-m,v-g).normalize(),e[5].setComponents(o+a,c+q,d+m,v+g).normalize(),this},intersectsObject:(en=new cn,function(t){var e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),en.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(en)}),intersectsSprite:function(){var t=new cn;return function(e){return t.center.set(0,0,0),t.radius=.7071067811865476,t.applyMatrix4(e.matrixWorld),this.intersectsSphere(t)}}(),intersectsSphere:function(t){for(var e=this.planes,n=t.center,i=-t.radius,r=0;r<6;r++){if(e[r].distanceToPoint(n)<i)return!1}return!0},intersectsBox:($e=new Ye,tn=new Ye,function(t){for(var e=this.planes,n=0;n<6;n++){var i=e[n];$e.x=i.normal.x>0?t.min.x:t.max.x,tn.x=i.normal.x>0?t.max.x:t.min.x,$e.y=i.normal.y>0?t.min.y:t.max.y,tn.y=i.normal.y>0?t.max.y:t.min.y,$e.z=i.normal.z>0?t.min.z:t.max.z,tn.z=i.normal.z>0?t.max.z:t.min.z;var r=i.distanceToPoint($e),a=i.distanceToPoint(tn);if(r<0&&a<0)return!1}return!0}),containsPoint:function(t){for(var e=this.planes,n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}});var mn,dn={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n",bsdfs:"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif\n",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",encodings_fragment:"  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n",envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",fog_vertex:"\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",lights_pars_begin:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n",lights_pars_maps:"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif\n",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n",normal_fragment_maps:"#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\t\tscale *= float( gl_FrontFacing ) * 2.0 - 1.0;\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",cube_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",equirect_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n"},pn={merge:function(t){for(var e={},n=0;n<t.length;n++){var i=this.clone(t[n]);for(var r in i)e[r]=i[r]}return e},clone:function(t){var e={};for(var n in t)for(var i in e[n]={},t[n]){var r=t[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture)?e[n][i]=r.clone():Array.isArray(r)?e[n][i]=r.slice():e[n][i]=r}return e}},fn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function gn(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}Object.assign(gn.prototype,{isColor:!0,r:1,g:1,b:1,set:function(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this},setScalar:function(t){return this.r=t,this.g=t,this.b=t,this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,e,n){return this.r=t,this.g=e,this.b=n,this},setHSL:function(){function t(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}return function(e,n,i){if(e=ke.euclideanModulo(e,1),n=ke.clamp(n,0,1),i=ke.clamp(i,0,1),0===n)this.r=this.g=this.b=i;else{var r=i<=.5?i*(1+n):i+n-i*n,a=2*i-r;this.r=t(a,r,e+1/3),this.g=t(a,r,e),this.b=t(a,r,e-1/3)}return this}}(),setStyle:function(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}var n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)){var i,r=n[1],a=n[2];switch(r){case"rgb":case"rgba":if(i=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(i[1],10))/255,this.g=Math.min(255,parseInt(i[2],10))/255,this.b=Math.min(255,parseInt(i[3],10))/255,e(i[5]),this;if(i=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(i[1],10))/100,this.g=Math.min(100,parseInt(i[2],10))/100,this.b=Math.min(100,parseInt(i[3],10))/100,e(i[5]),this;break;case"hsl":case"hsla":if(i=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(i[1])/360,s=parseInt(i[2],10)/100,l=parseInt(i[3],10)/100;return e(i[5]),this.setHSL(o,s,l)}}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(t)){var q,c=(q=n[1]).length;if(3===c)return this.r=parseInt(q.charAt(0)+q.charAt(0),16)/255,this.g=parseInt(q.charAt(1)+q.charAt(1),16)/255,this.b=parseInt(q.charAt(2)+q.charAt(2),16)/255,this;if(6===c)return this.r=parseInt(q.charAt(0)+q.charAt(1),16)/255,this.g=parseInt(q.charAt(2)+q.charAt(3),16)/255,this.b=parseInt(q.charAt(4)+q.charAt(5),16)/255,this}t&&t.length>0&&(void 0!==(q=fn[t])?this.setHex(q):console.warn("THREE.Color: Unknown color "+t));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t,e){return void 0===e&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this},copyLinearToGamma:function(t,e){void 0===e&&(e=2);var n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this},convertGammaToLinear:function(){var t=this.r,e=this.g,n=this.b;return this.r=t*t,this.g=e*e,this.b=n*n,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});var e,n,i=this.r,r=this.g,a=this.b,o=Math.max(i,r,a),s=Math.min(i,r,a),l=(s+o)/2;if(s===o)e=0,n=0;else{var q=o-s;switch(n=l<=.5?q/(o+s):q/(2-o-s),o){case i:e=(r-a)/q+(r<a?6:0);break;case r:e=(a-i)/q+2;break;case a:e=(i-r)/q+4}e/=6}return t.h=e,t.s=n,t.l=l,t},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:(mn={},function(t,e,n){return this.getHSL(mn),mn.h+=t,mn.s+=e,mn.l+=n,this.setHSL(mn.h,mn.s,mn.l),this}),add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(t){return this.r+=t,this.g+=t,this.b+=t,this},sub:function(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(t){return this.r*=t,this.g*=t,this.b*=t,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t,e){return void 0===e&&(e=0),this.r=t[e],this.g=t[e+1],this.b=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t},toJSON:function(){return this.getHex()}});var vn,xn={common:{diffuse:{value:new gn(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Ze},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new je(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new gn(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new gn(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new Ze}}},yn={basic:{uniforms:pn.merge([xn.common,xn.specularmap,xn.envmap,xn.aomap,xn.lightmap,xn.fog]),vertexShader:dn.meshbasic_vert,fragmentShader:dn.meshbasic_frag},lambert:{uniforms:pn.merge([xn.common,xn.specularmap,xn.envmap,xn.aomap,xn.lightmap,xn.emissivemap,xn.fog,xn.lights,{emissive:{value:new gn(0)}}]),vertexShader:dn.meshlambert_vert,fragmentShader:dn.meshlambert_frag},phong:{uniforms:pn.merge([xn.common,xn.specularmap,xn.envmap,xn.aomap,xn.lightmap,xn.emissivemap,xn.bumpmap,xn.normalmap,xn.displacementmap,xn.gradientmap,xn.fog,xn.lights,{emissive:{value:new gn(0)},specular:{value:new gn(1118481)},shininess:{value:30}}]),vertexShader:dn.meshphong_vert,fragmentShader:dn.meshphong_frag},standard:{uniforms:pn.merge([xn.common,xn.envmap,xn.aomap,xn.lightmap,xn.emissivemap,xn.bumpmap,xn.normalmap,xn.displacementmap,xn.roughnessmap,xn.metalnessmap,xn.fog,xn.lights,{emissive:{value:new gn(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:dn.meshphysical_vert,fragmentShader:dn.meshphysical_frag},points:{uniforms:pn.merge([xn.points,xn.fog]),vertexShader:dn.points_vert,fragmentShader:dn.points_frag},dashed:{uniforms:pn.merge([xn.common,xn.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:dn.linedashed_vert,fragmentShader:dn.linedashed_frag},depth:{uniforms:pn.merge([xn.common,xn.displacementmap]),vertexShader:dn.depth_vert,fragmentShader:dn.depth_frag},normal:{uniforms:pn.merge([xn.common,xn.bumpmap,xn.normalmap,xn.displacementmap,{opacity:{value:1}}]),vertexShader:dn.normal_vert,fragmentShader:dn.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:dn.cube_vert,fragmentShader:dn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:dn.equirect_vert,fragmentShader:dn.equirect_frag},distanceRGBA:{uniforms:pn.merge([xn.common,xn.displacementmap,{referencePosition:{value:new Ye},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:dn.distanceRGBA_vert,fragmentShader:dn.distanceRGBA_frag},shadow:{uniforms:pn.merge([xn.lights,xn.fog,{color:{value:new gn(0)},opacity:{value:1}}]),vertexShader:dn.shadow_vert,fragmentShader:dn.shadow_frag}};function _n(t){var e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);var i=e.get(n);i&&(t.deleteBuffer(i.buffer),e.delete(n))},update:function(n,i){n.isInterleavedBufferAttribute&&(n=n.data);var r=e.get(n);void 0===r?e.set(n,function(e,n){var i=e.array,r=e.dynamic?t.DYNAMIC_DRAW:t.STATIC_DRAW,a=t.createBuffer();t.bindBuffer(n,a),t.bufferData(n,i,r),e.onUploadCallback();var o=t.FLOAT;return i instanceof Float32Array?o=t.FLOAT:i instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):i instanceof Uint16Array?o=t.UNSIGNED_SHORT:i instanceof Int16Array?o=t.SHORT:i instanceof Uint32Array?o=t.UNSIGNED_INT:i instanceof Int32Array?o=t.INT:i instanceof Int8Array?o=t.BYTE:i instanceof Uint8Array&&(o=t.UNSIGNED_BYTE),{buffer:a,type:o,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version}}(n,i)):r.version<n.version&&(function(e,n,i){var r=n.array,a=n.updateRange;t.bindBuffer(i,e),!1===n.dynamic?t.bufferData(i,r,t.STATIC_DRAW):-1===a.count?t.bufferSubData(i,0,r):0===a.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(t.bufferSubData(i,a.offset*r.BYTES_PER_ELEMENT,r.subarray(a.offset,a.offset+a.count)),a.count=-1)}(r.buffer,n,i),r.version=n.version)}}}function bn(t,e,n,i){this._x=t||0,this._y=e||0,this._z=n||0,this._order=i||bn.DefaultOrder}function wn(){this.mask=1}yn.physical={uniforms:pn.merge([yn.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:dn.meshphysical_vert,fragmentShader:dn.meshphysical_frag},bn.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],bn.DefaultOrder="XYZ",Object.defineProperties(bn.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(t){this._order=t,this.onChangeCallback()}}}),Object.assign(bn.prototype,{isEuler:!0,set:function(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._order=i||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this.onChangeCallback(),this},setFromRotationMatrix:function(t,e,n){var i=ke.clamp,r=t.elements,a=r[0],o=r[4],s=r[8],l=r[1],q=r[5],c=r[9],h=r[2],u=r[6],m=r[10];return"XYZ"===(e=e||this._order)?(this._y=Math.asin(i(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-c,m),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(u,q),this._z=0)):"YXZ"===e?(this._x=Math.asin(-i(c,-1,1)),Math.abs(c)<.99999?(this._y=Math.atan2(s,m),this._z=Math.atan2(l,q)):(this._y=Math.atan2(-h,a),this._z=0)):"ZXY"===e?(this._x=Math.asin(i(u,-1,1)),Math.abs(u)<.99999?(this._y=Math.atan2(-h,m),this._z=Math.atan2(-o,q)):(this._y=0,this._z=Math.atan2(l,a))):"ZYX"===e?(this._y=Math.asin(-i(h,-1,1)),Math.abs(h)<.99999?(this._x=Math.atan2(u,m),this._z=Math.atan2(l,a)):(this._x=0,this._z=Math.atan2(-o,q))):"YZX"===e?(this._z=Math.asin(i(l,-1,1)),Math.abs(l)<.99999?(this._x=Math.atan2(-c,q),this._y=Math.atan2(-h,a)):(this._x=0,this._y=Math.atan2(s,m))):"XZY"===e?(this._z=Math.asin(-i(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(u,q),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-c,m),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+e),this._order=e,!1!==n&&this.onChangeCallback(),this},setFromQuaternion:function(){var t=new We;return function(e,n,i){return t.makeRotationFromQuaternion(e),this.setFromRotationMatrix(t,n,i)}}(),setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:(vn=new Xe,function(t){return vn.setFromEuler(this),this.setFromQuaternion(vn,t)}),equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this.onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new Ye(this._x,this._y,this._z)},onChange:function(t){return this.onChangeCallback=t,this},onChangeCallback:function(){}}),Object.assign(wn.prototype,{set:function(t){this.mask=1<<t|0},enable:function(t){this.mask|=1<<t|0},toggle:function(t){this.mask^=1<<t|0},disable:function(t){this.mask&=~(1<<t|0)},test:function(t){return 0!=(this.mask&t.mask)}});var En,Mn,Tn,Sn,An=0;function Rn(){Object.defineProperty(this,"id",{value:An++}),this.uuid=ke.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Rn.DefaultUp.clone();var t=new Ye,e=new bn,n=new Xe,i=new Ye(1,1,1);e.onChange(function(){n.setFromEuler(e,!1)}),n.onChange(function(){e.setFromQuaternion(n,void 0,!1)}),Object.defineProperties(this,{position:{enumerable:!0,value:t},rotation:{enumerable:!0,value:e},quaternion:{enumerable:!0,value:n},scale:{enumerable:!0,value:i},modelViewMatrix:{value:new We},normalMatrix:{value:new Ze}}),this.matrix=new We,this.matrixWorld=new We,this.matrixAutoUpdate=Rn.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new wn,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function Ln(){Rn.call(this),this.type="Camera",this.matrixWorldInverse=new We,this.projectionMatrix=new We}function Pn(t,e,n,i,r,a){Ln.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=void 0!==r?r:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function Cn(t,e,n,i,r,a){this.a=t,this.b=e,this.c=n,this.normal=i&&i.isVector3?i:new Ye,this.vertexNormals=Array.isArray(i)?i:[],this.color=r&&r.isColor?r:new gn,this.vertexColors=Array.isArray(r)?r:[],this.materialIndex=void 0!==a?a:0}Rn.DefaultUp=new Ye(0,1,0),Rn.DefaultMatrixAutoUpdate=!0,Rn.prototype=Object.assign(Object.create(i.prototype),{constructor:Rn,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(t){this.matrix.multiplyMatrices(t,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(t){return this.quaternion.premultiply(t),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:(Sn=new Xe,function(t,e){return Sn.setFromAxisAngle(t,e),this.quaternion.multiply(Sn),this}),rotateOnWorldAxis:function(){var t=new Xe;return function(e,n){return t.setFromAxisAngle(e,n),this.quaternion.premultiply(t),this}}(),rotateX:function(){var t=new Ye(1,0,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateY:function(){var t=new Ye(0,1,0);return function(e){return this.rotateOnAxis(t,e)}}(),rotateZ:function(){var t=new Ye(0,0,1);return function(e){return this.rotateOnAxis(t,e)}}(),translateOnAxis:function(){var t=new Ye;return function(e,n){return t.copy(e).applyQuaternion(this.quaternion),this.position.add(t.multiplyScalar(n)),this}}(),translateX:function(){var t=new Ye(1,0,0);return function(e){return this.translateOnAxis(t,e)}}(),translateY:function(){var t=new Ye(0,1,0);return function(e){return this.translateOnAxis(t,e)}}(),translateZ:function(){var t=new Ye(0,0,1);return function(e){return this.translateOnAxis(t,e)}}(),localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:(Tn=new We,function(t){return t.applyMatrix4(Tn.getInverse(this.matrixWorld))}),lookAt:function(){var t=new We,e=new Ye;return function(n,i,r){n.isVector3?e.copy(n):e.set(n,i,r),this.isCamera?t.lookAt(this.position,e,this.up):t.lookAt(e,this.position,this.up),this.quaternion.setFromRotationMatrix(t)}}(),add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,t.dispatchEvent({type:"added"}),this.children.push(t)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)},remove:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}var n=this.children.indexOf(t);return-1!==n&&(t.parent=null,t.dispatchEvent({type:"removed"}),this.children.splice(n,1)),this},getObjectById:function(t){return this.getObjectByProperty("id",t)},getObjectByName:function(t){return this.getObjectByProperty("name",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(var n=0,i=this.children.length;n<i;n++){var r=this.children[n].getObjectByProperty(t,e);if(void 0!==r)return r}},getWorldPosition:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new Ye),this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:(En=new Ye,Mn=new Ye,function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),t=new Xe),this.updateMatrixWorld(!0),this.matrixWorld.decompose(En,t,Mn),t}),getWorldScale:function(){var t=new Ye,e=new Xe;return function(n){return void 0===n&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),n=new Ye),this.updateMatrixWorld(!0),this.matrixWorld.decompose(t,e,n),n}}(),getWorldDirection:function(){var t=new Xe;return function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),e=new Ye),this.getWorldQuaternion(t),e.set(0,0,1).applyQuaternion(t)}}(),raycast:function(){},traverse:function(t){t(this);for(var e=this.children,n=0,i=e.length;n<i;n++)e[n].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=this.children,n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}},traverseAncestors:function(t){var e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);for(var e=this.children,n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)},toJSON:function(t){var e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),void 0!==this.geometry){i.geometry=r(t.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var o=a.shapes;if(Array.isArray(o))for(var s=0,l=o.length;s<l;s++){var q=o[s];r(t.shapes,q)}else r(t.shapes,o)}}if(void 0!==this.material)if(Array.isArray(this.material)){var c=[];for(s=0,l=this.material.length;s<l;s++)c.push(r(t.materials,this.material[s]));i.material=c}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(s=0;s<this.children.length;s++)i.children.push(this.children[s].toJSON(t).object)}if(e){var h=p(t.geometries),u=p(t.materials),m=p(t.textures),d=p(t.images);o=p(t.shapes);h.length>0&&(n.geometries=h),u.length>0&&(n.materials=u),m.length>0&&(n.textures=m),d.length>0&&(n.images=d),o.length>0&&(n.shapes=o)}return n.object=i,n;function p(t){var e=[];for(var n in t){var i=t[n];delete i.metadata,e.push(i)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(t,e){if(void 0===e&&(e=!0),this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(var n=0;n<t.children.length;n++){var i=t.children[n];this.add(i.clone())}return this}}),Ln.prototype=Object.assign(Object.create(Rn.prototype),{constructor:Ln,isCamera:!0,copy:function(t,e){return Rn.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this},getWorldDirection:function(){var t=new Xe;return function(e){return void 0===e&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),e=new Ye),this.getWorldQuaternion(t),e.set(0,0,-1).applyQuaternion(t)}}(),updateMatrixWorld:function(t){Rn.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),Pn.prototype=Object.assign(Object.create(Ln.prototype),{constructor:Pn,isOrthographicCamera:!0,copy:function(t,e){return Ln.prototype.copy.call(this,t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this},setViewOffset:function(t,e,n,i,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2,r=n-t,a=n+t,o=i+e,s=i-e;if(null!==this.view&&this.view.enabled){var l=this.zoom/(this.view.width/this.view.fullWidth),q=this.zoom/(this.view.height/this.view.fullHeight),c=(this.right-this.left)/this.view.width,h=(this.top-this.bottom)/this.view.height;a=(r+=c*(this.view.offsetX/l))+c*(this.view.width/l),s=(o-=h*(this.view.offsetY/q))-h*(this.view.height/q)}this.projectionMatrix.makeOrthographic(r,a,o,s,this.near,this.far)},toJSON:function(t){var e=Rn.prototype.toJSON.call(this,t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}),Object.assign(Cn.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(var e=0,n=t.vertexNormals.length;e<n;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(e=0,n=t.vertexColors.length;e<n;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}});var On,In,Nn=0;function Un(){Object.defineProperty(this,"id",{value:Nn+=2}),this.uuid=ke.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function Dn(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Bn(t,e,n){Dn.call(this,new Int8Array(t),e,n)}function Fn(t,e,n){Dn.call(this,new Uint8Array(t),e,n)}function zn(t,e,n){Dn.call(this,new Uint8ClampedArray(t),e,n)}function Hn(t,e,n){Dn.call(this,new Int16Array(t),e,n)}function Gn(t,e,n){Dn.call(this,new Uint16Array(t),e,n)}function Vn(t,e,n){Dn.call(this,new Int32Array(t),e,n)}function kn(t,e,n){Dn.call(this,new Uint32Array(t),e,n)}function jn(t,e,n){Dn.call(this,new Float32Array(t),e,n)}function Wn(t,e,n){Dn.call(this,new Float64Array(t),e,n)}function Xn(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function Yn(t){if(0===t.length)return-1/0;for(var e=t[0],n=1,i=t.length;n<i;++n)t[n]>e&&(e=t[n]);return e}Un.prototype=Object.assign(Object.create(i.prototype),{constructor:Un,isGeometry:!0,applyMatrix:function(t){for(var e=(new Ze).getNormalMatrix(t),n=0,i=this.vertices.length;n<i;n++){this.vertices[n].applyMatrix4(t)}for(n=0,i=this.faces.length;n<i;n++){var r=this.faces[n];r.normal.applyMatrix3(e).normalize();for(var a=0,o=r.vertexNormals.length;a<o;a++)r.vertexNormals[a].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var t=new We;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new We;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new We;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new We;return function(e,n,i){return t.makeTranslation(e,n,i),this.applyMatrix(t),this}}(),scale:function(){var t=new We;return function(e,n,i){return t.makeScale(e,n,i),this.applyMatrix(t),this}}(),lookAt:(In=new Rn,function(t){In.lookAt(t),In.updateMatrix(),this.applyMatrix(In.matrix)}),fromBufferGeometry:function(t){var e=this,n=null!==t.index?t.index.array:void 0,i=t.attributes,r=i.position.array,a=void 0!==i.normal?i.normal.array:void 0,o=void 0!==i.color?i.color.array:void 0,s=void 0!==i.uv?i.uv.array:void 0,l=void 0!==i.uv2?i.uv2.array:void 0;void 0!==l&&(this.faceVertexUvs[1]=[]);for(var q=[],c=[],h=[],u=0,m=0;u<r.length;u+=3,m+=2)e.vertices.push(new Ye(r[u],r[u+1],r[u+2])),void 0!==a&&q.push(new Ye(a[u],a[u+1],a[u+2])),void 0!==o&&e.colors.push(new gn(o[u],o[u+1],o[u+2])),void 0!==s&&c.push(new je(s[m],s[m+1])),void 0!==l&&h.push(new je(l[m],l[m+1]));function d(t,n,i,r){var u=new Cn(t,n,i,void 0!==a?[q[t].clone(),q[n].clone(),q[i].clone()]:[],void 0!==o?[e.colors[t].clone(),e.colors[n].clone(),e.colors[i].clone()]:[],r);e.faces.push(u),void 0!==s&&e.faceVertexUvs[0].push([c[t].clone(),c[n].clone(),c[i].clone()]),void 0!==l&&e.faceVertexUvs[1].push([h[t].clone(),h[n].clone(),h[i].clone()])}var p=t.groups;if(p.length>0)for(u=0;u<p.length;u++)for(var f=p[u],g=f.start,v=(m=g,g+f.count);m<v;m+=3)void 0!==n?d(n[m],n[m+1],n[m+2],f.materialIndex):d(m,m+1,m+2,f.materialIndex);else if(void 0!==n)for(u=0;u<n.length;u+=3)d(n[u],n[u+1],n[u+2]);else for(u=0;u<r.length/3;u+=3)d(u,u+1,u+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:(On=new Ye,function(){return this.computeBoundingBox(),this.boundingBox.getCenter(On).negate(),this.translate(On.x,On.y,On.z),this}),normalize:function(){this.computeBoundingSphere();var t=this.boundingSphere.center,e=this.boundingSphere.radius,n=0===e?1:1/e,i=new We;return i.set(n,0,0,-n*t.x,0,n,0,-n*t.y,0,0,n,-n*t.z,0,0,0,1),this.applyMatrix(i),this},computeFaceNormals:function(){for(var t=new Ye,e=new Ye,n=0,i=this.faces.length;n<i;n++){var r=this.faces[n],a=this.vertices[r.a],o=this.vertices[r.b],s=this.vertices[r.c];t.subVectors(s,o),e.subVectors(a,o),t.cross(e),t.normalize(),r.normal.copy(t)}},computeVertexNormals:function(t){var e,n,i,r,a,o;for(void 0===t&&(t=!0),o=new Array(this.vertices.length),e=0,n=this.vertices.length;e<n;e++)o[e]=new Ye;if(t){var s,l,q,c=new Ye,h=new Ye;for(i=0,r=this.faces.length;i<r;i++)a=this.faces[i],s=this.vertices[a.a],l=this.vertices[a.b],q=this.vertices[a.c],c.subVectors(q,l),h.subVectors(s,l),c.cross(h),o[a.a].add(c),o[a.b].add(c),o[a.c].add(c)}else for(this.computeFaceNormals(),i=0,r=this.faces.length;i<r;i++)o[(a=this.faces[i]).a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(e=0,n=this.vertices.length;e<n;e++)o[e].normalize();for(i=0,r=this.faces.length;i<r;i++){var u=(a=this.faces[i]).vertexNormals;3===u.length?(u[0].copy(o[a.a]),u[1].copy(o[a.b]),u[2].copy(o[a.c])):(u[0]=o[a.a].clone(),u[1]=o[a.b].clone(),u[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var t,e,n;for(this.computeFaceNormals(),t=0,e=this.faces.length;t<e;t++){var i=(n=this.faces[t]).vertexNormals;3===i.length?(i[0].copy(n.normal),i[1].copy(n.normal),i[2].copy(n.normal)):(i[0]=n.normal.clone(),i[1]=n.normal.clone(),i[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var t,e,n,i,r;for(n=0,i=this.faces.length;n<i;n++)for((r=this.faces[n]).__originalFaceNormal?r.__originalFaceNormal.copy(r.normal):r.__originalFaceNormal=r.normal.clone(),r.__originalVertexNormals||(r.__originalVertexNormals=[]),t=0,e=r.vertexNormals.length;t<e;t++)r.__originalVertexNormals[t]?r.__originalVertexNormals[t].copy(r.vertexNormals[t]):r.__originalVertexNormals[t]=r.vertexNormals[t].clone();var a=new Un;for(a.faces=this.faces,t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];var o=this.morphNormals[t].faceNormals,s=this.morphNormals[t].vertexNormals;for(n=0,i=this.faces.length;n<i;n++)l=new Ye,q={a:new Ye,b:new Ye,c:new Ye},o.push(l),s.push(q)}var l,q,c=this.morphNormals[t];for(a.vertices=this.morphTargets[t].vertices,a.computeFaceNormals(),a.computeVertexNormals(),n=0,i=this.faces.length;n<i;n++)r=this.faces[n],l=c.faceNormals[n],q=c.vertexNormals[n],l.copy(r.normal),q.a.copy(r.vertexNormals[0]),q.b.copy(r.vertexNormals[1]),q.c.copy(r.vertexNormals[2])}for(n=0,i=this.faces.length;n<i;n++)(r=this.faces[n]).normal=r.__originalFaceNormal,r.vertexNormals=r.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new qn),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new cn),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,n){if(t&&t.isGeometry){var i,r=this.vertices.length,a=this.vertices,o=t.vertices,s=this.faces,l=t.faces,q=this.faceVertexUvs[0],c=t.faceVertexUvs[0],h=this.colors,u=t.colors;void 0===n&&(n=0),void 0!==e&&(i=(new Ze).getNormalMatrix(e));for(var m=0,d=o.length;m<d;m++){var p=o[m].clone();void 0!==e&&p.applyMatrix4(e),a.push(p)}for(m=0,d=u.length;m<d;m++)h.push(u[m].clone());for(m=0,d=l.length;m<d;m++){var f,g,v,x=l[m],y=x.vertexNormals,_=x.vertexColors;(f=new Cn(x.a+r,x.b+r,x.c+r)).normal.copy(x.normal),void 0!==i&&f.normal.applyMatrix3(i).normalize();for(var b=0,w=y.length;b<w;b++)g=y[b].clone(),void 0!==i&&g.applyMatrix3(i).normalize(),f.vertexNormals.push(g);f.color.copy(x.color);for(b=0,w=_.length;b<w;b++)v=_[b],f.vertexColors.push(v.clone());f.materialIndex=x.materialIndex+n,s.push(f)}for(m=0,d=c.length;m<d;m++){var E=c[m],M=[];if(void 0!==E){for(b=0,w=E.length;b<w;b++)M.push(E[b].clone());q.push(M)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t)},mergeMesh:function(t){t&&t.isMesh?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",t)},mergeVertices:function(){var t,e,n,i,r,a,o,s,l={},q=[],c=[],h=Math.pow(10,4);for(n=0,i=this.vertices.length;n<i;n++)t=this.vertices[n],void 0===l[e=Math.round(t.x*h)+"_"+Math.round(t.y*h)+"_"+Math.round(t.z*h)]?(l[e]=n,q.push(this.vertices[n]),c[n]=q.length-1):c[n]=c[l[e]];var u=[];for(n=0,i=this.faces.length;n<i;n++){(r=this.faces[n]).a=c[r.a],r.b=c[r.b],r.c=c[r.c],a=[r.a,r.b,r.c];for(var m=0;m<3;m++)if(a[m]===a[(m+1)%3]){u.push(n);break}}for(n=u.length-1;n>=0;n--){var d=u[n];for(this.faces.splice(d,1),o=0,s=this.faceVertexUvs.length;o<s;o++)this.faceVertexUvs[o].splice(d,1)}var p=this.vertices.length-q.length;return this.vertices=q,p},setFromPoints:function(t){this.vertices=[];for(var e=0,n=t.length;e<n;e++){var i=t[e];this.vertices.push(new Ye(i.x,i.y,i.z||0))}return this},sortFacesByMaterialIndex:function(){for(var t=this.faces,e=t.length,n=0;n<e;n++)t[n]._id=n;t.sort(function(t,e){return t.materialIndex-e.materialIndex});var i,r,a=this.faceVertexUvs[0],o=this.faceVertexUvs[1];a&&a.length===e&&(i=[]),o&&o.length===e&&(r=[]);for(n=0;n<e;n++){var s=t[n]._id;i&&i.push(a[s]),r&&r.push(o[s])}i&&(this.faceVertexUvs[0]=i),r&&(this.faceVertexUvs[1]=r)},toJSON:function(){var t={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}for(var i=[],r=0;r<this.vertices.length;r++){var a=this.vertices[r];i.push(a.x,a.y,a.z)}var o=[],s=[],l={},q=[],c={},h=[],u={};for(r=0;r<this.faces.length;r++){var m=this.faces[r],d=void 0!==this.faceVertexUvs[0][r],p=m.normal.length()>0,f=m.vertexNormals.length>0,g=1!==m.color.r||1!==m.color.g||1!==m.color.b,v=m.vertexColors.length>0,x=0;if(x=w(x=w(x=w(x=w(x=w(x=w(x=w(x=w(x,0,0),1,!0),2,!1),3,d),4,p),5,f),6,g),7,v),o.push(x),o.push(m.a,m.b,m.c),o.push(m.materialIndex),d){var y=this.faceVertexUvs[0][r];o.push(T(y[0]),T(y[1]),T(y[2]))}if(p&&o.push(E(m.normal)),f){var _=m.vertexNormals;o.push(E(_[0]),E(_[1]),E(_[2]))}if(g&&o.push(M(m.color)),v){var b=m.vertexColors;o.push(M(b[0]),M(b[1]),M(b[2]))}}function w(t,e,n){return n?t|1<<e:t&~(1<<e)}function E(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==l[e]?l[e]:(l[e]=s.length/3,s.push(t.x,t.y,t.z),l[e])}function M(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==c[e]?c[e]:(c[e]=q.length,q.push(t.getHex()),c[e])}function T(t){var e=t.x.toString()+t.y.toString();return void 0!==u[e]?u[e]:(u[e]=h.length/2,h.push(t.x,t.y),u[e])}return t.data={},t.data.vertices=i,t.data.normals=s,q.length>0&&(t.data.colors=q),h.length>0&&(t.data.uvs=[h]),t.data.faces=o,t},clone:function(){return(new Un).copy(this)},copy:function(t){var e,n,i,r,a,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var s=t.vertices;for(e=0,n=s.length;e<n;e++)this.vertices.push(s[e].clone());var l=t.colors;for(e=0,n=l.length;e<n;e++)this.colors.push(l[e].clone());var q=t.faces;for(e=0,n=q.length;e<n;e++)this.faces.push(q[e].clone());for(e=0,n=t.faceVertexUvs.length;e<n;e++){var c=t.faceVertexUvs[e];for(void 0===this.faceVertexUvs[e]&&(this.faceVertexUvs[e]=[]),i=0,r=c.length;i<r;i++){var h=c[i],u=[];for(a=0,o=h.length;a<o;a++){var m=h[a];u.push(m.clone())}this.faceVertexUvs[e].push(u)}}var d=t.morphTargets;for(e=0,n=d.length;e<n;e++){var p={};if(p.name=d[e].name,void 0!==d[e].vertices)for(p.vertices=[],i=0,r=d[e].vertices.length;i<r;i++)p.vertices.push(d[e].vertices[i].clone());if(void 0!==d[e].normals)for(p.normals=[],i=0,r=d[e].normals.length;i<r;i++)p.normals.push(d[e].normals[i].clone());this.morphTargets.push(p)}var f=t.morphNormals;for(e=0,n=f.length;e<n;e++){var g={};if(void 0!==f[e].vertexNormals)for(g.vertexNormals=[],i=0,r=f[e].vertexNormals.length;i<r;i++){var v=f[e].vertexNormals[i],x={};x.a=v.a.clone(),x.b=v.b.clone(),x.c=v.c.clone(),g.vertexNormals.push(x)}if(void 0!==f[e].faceNormals)for(g.faceNormals=[],i=0,r=f[e].faceNormals.length;i<r;i++)g.faceNormals.push(f[e].faceNormals[i].clone());this.morphNormals.push(g)}var y=t.skinWeights;for(e=0,n=y.length;e<n;e++)this.skinWeights.push(y[e].clone());var _=t.skinIndices;for(e=0,n=_.length;e<n;e++)this.skinIndices.push(_[e].clone());var b=t.lineDistances;for(e=0,n=b.length;e<n;e++)this.lineDistances.push(b[e]);var w=t.boundingBox;null!==w&&(this.boundingBox=w.clone());var E=t.boundingSphere;return null!==E&&(this.boundingSphere=E.clone()),this.elementsNeedUpdate=t.elementsNeedUpdate,this.verticesNeedUpdate=t.verticesNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.lineDistancesNeedUpdate=t.lineDistancesNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(Dn.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Dn.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==t?t.length/this.itemSize:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.dynamic=t.dynamic,this},copyAt:function(t,e,n){t*=this.itemSize,n*=e.itemSize;for(var i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var a=t[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),a=new gn),e[n++]=a.r,e[n++]=a.g,e[n++]=a.b}return this},copyVector2sArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var a=t[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),a=new je),e[n++]=a.x,e[n++]=a.y}return this},copyVector3sArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var a=t[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),a=new Ye),e[n++]=a.x,e[n++]=a.y,e[n++]=a.z}return this},copyVector4sArray:function(t){for(var e=this.array,n=0,i=0,r=t.length;i<r;i++){var a=t[i];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),a=new an),e[n++]=a.x,e[n++]=a.y,e[n++]=a.z,e[n++]=a.w}return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this},setXYZ:function(t,e,n,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this},setXYZW:function(t,e,n,i,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),Bn.prototype=Object.create(Dn.prototype),Bn.prototype.constructor=Bn,Fn.prototype=Object.create(Dn.prototype),Fn.prototype.constructor=Fn,zn.prototype=Object.create(Dn.prototype),zn.prototype.constructor=zn,Hn.prototype=Object.create(Dn.prototype),Hn.prototype.constructor=Hn,Gn.prototype=Object.create(Dn.prototype),Gn.prototype.constructor=Gn,Vn.prototype=Object.create(Dn.prototype),Vn.prototype.constructor=Vn,kn.prototype=Object.create(Dn.prototype),kn.prototype.constructor=kn,jn.prototype=Object.create(Dn.prototype),jn.prototype.constructor=jn,Wn.prototype=Object.create(Dn.prototype),Wn.prototype.constructor=Wn,Object.assign(Xn.prototype,{computeGroups:function(t){for(var e,n=[],i=void 0,r=t.faces,a=0;a<r.length;a++){var o=r[a];o.materialIndex!==i&&(i=o.materialIndex,void 0!==e&&(e.count=3*a-e.start,n.push(e)),e={start:3*a,materialIndex:i})}void 0!==e&&(e.count=3*a-e.start,n.push(e)),this.groups=n},fromGeometry:function(t){var e,n=t.faces,i=t.vertices,r=t.faceVertexUvs,a=r[0]&&r[0].length>0,o=r[1]&&r[1].length>0,s=t.morphTargets,l=s.length;if(l>0){e=[];for(var q=0;q<l;q++)e[q]=[];this.morphTargets.position=e}var c,h=t.morphNormals,u=h.length;if(u>0){c=[];for(q=0;q<u;q++)c[q]=[];this.morphTargets.normal=c}var m=t.skinIndices,d=t.skinWeights,p=m.length===i.length,f=d.length===i.length;for(q=0;q<n.length;q++){var g=n[q];this.vertices.push(i[g.a],i[g.b],i[g.c]);var v=g.vertexNormals;if(3===v.length)this.normals.push(v[0],v[1],v[2]);else{var x=g.normal;this.normals.push(x,x,x)}var y,_=g.vertexColors;if(3===_.length)this.colors.push(_[0],_[1],_[2]);else{var b=g.color;this.colors.push(b,b,b)}if(!0===a)void 0!==(y=r[0][q])?this.uvs.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",q),this.uvs.push(new je,new je,new je));if(!0===o)void 0!==(y=r[1][q])?this.uvs2.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",q),this.uvs2.push(new je,new je,new je));for(var w=0;w<l;w++){var E=s[w].vertices;e[w].push(E[g.a],E[g.b],E[g.c])}for(w=0;w<u;w++){var M=h[w].vertexNormals[q];c[w].push(M.a,M.b,M.c)}p&&this.skinIndices.push(m[g.a],m[g.b],m[g.c]),f&&this.skinWeights.push(d[g.a],d[g.b],d[g.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this}});var Zn=1;function Jn(){Object.defineProperty(this,"id",{value:Zn+=2}),this.uuid=ke.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}}function Qn(t,e,n,i,r,a){Un.call(this),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a},this.fromBufferGeometry(new Kn(t,e,n,i,r,a)),this.mergeVertices()}function Kn(t,e,n,i,r,a){Jn.call(this),this.type="BoxBufferGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};var o=this;t=t||1,e=e||1,n=n||1,i=Math.floor(i)||1,r=Math.floor(r)||1;var s=[],l=[],q=[],c=[],h=0,u=0;function m(t,e,n,i,r,a,m,d,p,f,g){var v,x,y=a/p,_=m/f,b=a/2,w=m/2,E=d/2,M=p+1,T=f+1,S=0,A=0,R=new Ye;for(x=0;x<T;x++){var L=x*_-w;for(v=0;v<M;v++){var P=v*y-b;R[t]=P*i,R[e]=L*r,R[n]=E,l.push(R.x,R.y,R.z),R[t]=0,R[e]=0,R[n]=d>0?1:-1,q.push(R.x,R.y,R.z),c.push(v/p),c.push(1-x/f),S+=1}}for(x=0;x<f;x++)for(v=0;v<p;v++){var C=h+v+M*x,O=h+v+M*(x+1),I=h+(v+1)+M*(x+1),N=h+(v+1)+M*x;s.push(C,O,N),s.push(O,I,N),A+=6}o.addGroup(u,A,g),u+=A,h+=S}m("z","y","x",-1,-1,n,e,t,a=Math.floor(a)||1,r,0),m("z","y","x",1,-1,n,e,-t,a,r,1),m("x","z","y",1,1,t,n,e,i,a,2),m("x","z","y",1,-1,t,n,-e,i,a,3),m("x","y","z",1,-1,t,e,n,i,r,4),m("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(s),this.addAttribute("position",new jn(l,3)),this.addAttribute("normal",new jn(q,3)),this.addAttribute("uv",new jn(c,2))}function $n(t,e,n,i){Un.call(this),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i},this.fromBufferGeometry(new ti(t,e,n,i)),this.mergeVertices()}function ti(t,e,n,i){Jn.call(this),this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};var r,a,o=(t=t||1)/2,s=(e=e||1)/2,l=Math.floor(n)||1,q=Math.floor(i)||1,c=l+1,h=q+1,u=t/l,m=e/q,d=[],p=[],f=[],g=[];for(a=0;a<h;a++){var v=a*m-s;for(r=0;r<c;r++){var x=r*u-o;p.push(x,-v,0),f.push(0,0,1),g.push(r/l),g.push(1-a/q)}}for(a=0;a<q;a++)for(r=0;r<l;r++){var y=r+c*a,_=r+c*(a+1),b=r+1+c*(a+1),w=r+1+c*a;d.push(y,_,w),d.push(_,b,w)}this.setIndex(d),this.addAttribute("position",new jn(p,3)),this.addAttribute("normal",new jn(f,3)),this.addAttribute("uv",new jn(g,2))}Jn.prototype=Object.assign(Object.create(i.prototype),{constructor:Jn,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){Array.isArray(t)?this.index=new(Yn(t)>65535?kn:Gn)(t,1):this.index=t},addAttribute:function(t,e){return e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),void this.setIndex(e)):(this.attributes[t]=e,this):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),void this.addAttribute(t,new Dn(arguments[1],arguments[2])))},getAttribute:function(t){return this.attributes[t]},removeAttribute:function(t){return delete this.attributes[t],this},addGroup:function(t,e,n){this.groups.push({start:t,count:e,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix:function(t){var e=this.attributes.position;void 0!==e&&(t.applyToBufferAttribute(e),e.needsUpdate=!0);var n=this.attributes.normal;void 0!==n&&((new Ze).getNormalMatrix(t).applyToBufferAttribute(n),n.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var t=new We;return function(e){return t.makeRotationX(e),this.applyMatrix(t),this}}(),rotateY:function(){var t=new We;return function(e){return t.makeRotationY(e),this.applyMatrix(t),this}}(),rotateZ:function(){var t=new We;return function(e){return t.makeRotationZ(e),this.applyMatrix(t),this}}(),translate:function(){var t=new We;return function(e,n,i){return t.makeTranslation(e,n,i),this.applyMatrix(t),this}}(),scale:function(){var t=new We;return function(e,n,i){return t.makeScale(e,n,i),this.applyMatrix(t),this}}(),lookAt:function(){var t=new Rn;return function(e){t.lookAt(e),t.updateMatrix(),this.applyMatrix(t.matrix)}}(),center:function(){var t=new Ye;return function(){return this.computeBoundingBox(),this.boundingBox.getCenter(t).negate(),this.translate(t.x,t.y,t.z),this}}(),setFromObject:function(t){var e=t.geometry;if(t.isPoints||t.isLine){var n=new jn(3*e.vertices.length,3),i=new jn(3*e.colors.length,3);if(this.addAttribute("position",n.copyVector3sArray(e.vertices)),this.addAttribute("color",i.copyColorsArray(e.colors)),e.lineDistances&&e.lineDistances.length===e.vertices.length){var r=new jn(e.lineDistances.length,1);this.addAttribute("lineDistance",r.copyArray(e.lineDistances))}null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone())}else t.isMesh&&e&&e.isGeometry&&this.fromGeometry(e);return this},setFromPoints:function(t){for(var e=[],n=0,i=t.length;n<i;n++){var r=t[n];e.push(r.x,r.y,r.z||0)}return this.addAttribute("position",new jn(e,3)),this},updateFromObject:function(t){var e,n=t.geometry;if(t.isMesh){var i=n.__directGeometry;if(!0===n.elementsNeedUpdate&&(i=void 0,n.elementsNeedUpdate=!1),void 0===i)return this.fromGeometry(n);i.verticesNeedUpdate=n.verticesNeedUpdate,i.normalsNeedUpdate=n.normalsNeedUpdate,i.colorsNeedUpdate=n.colorsNeedUpdate,i.uvsNeedUpdate=n.uvsNeedUpdate,i.groupsNeedUpdate=n.groupsNeedUpdate,n.verticesNeedUpdate=!1,n.normalsNeedUpdate=!1,n.colorsNeedUpdate=!1,n.uvsNeedUpdate=!1,n.groupsNeedUpdate=!1,n=i}return!0===n.verticesNeedUpdate&&(void 0!==(e=this.attributes.position)&&(e.copyVector3sArray(n.vertices),e.needsUpdate=!0),n.verticesNeedUpdate=!1),!0===n.normalsNeedUpdate&&(void 0!==(e=this.attributes.normal)&&(e.copyVector3sArray(n.normals),e.needsUpdate=!0),n.normalsNeedUpdate=!1),!0===n.colorsNeedUpdate&&(void 0!==(e=this.attributes.color)&&(e.copyColorsArray(n.colors),e.needsUpdate=!0),n.colorsNeedUpdate=!1),n.uvsNeedUpdate&&(void 0!==(e=this.attributes.uv)&&(e.copyVector2sArray(n.uvs),e.needsUpdate=!0),n.uvsNeedUpdate=!1),n.lineDistancesNeedUpdate&&(void 0!==(e=this.attributes.lineDistance)&&(e.copyArray(n.lineDistances),e.needsUpdate=!0),n.lineDistancesNeedUpdate=!1),n.groupsNeedUpdate&&(n.computeGroups(t.geometry),this.groups=n.groups,n.groupsNeedUpdate=!1),this},fromGeometry:function(t){return t.__directGeometry=(new Xn).fromGeometry(t),this.fromDirectGeometry(t.__directGeometry)},fromDirectGeometry:function(t){var e=new Float32Array(3*t.vertices.length);if(this.addAttribute("position",new Dn(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){var n=new Float32Array(3*t.normals.length);this.addAttribute("normal",new Dn(n,3).copyVector3sArray(t.normals))}if(t.colors.length>0){var i=new Float32Array(3*t.colors.length);this.addAttribute("color",new Dn(i,3).copyColorsArray(t.colors))}if(t.uvs.length>0){var r=new Float32Array(2*t.uvs.length);this.addAttribute("uv",new Dn(r,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){var a=new Float32Array(2*t.uvs2.length);this.addAttribute("uv2",new Dn(a,2).copyVector2sArray(t.uvs2))}for(var o in this.groups=t.groups,t.morphTargets){for(var s=[],l=t.morphTargets[o],q=0,c=l.length;q<c;q++){var h=l[q],u=new jn(3*h.length,3);s.push(u.copyVector3sArray(h))}this.morphAttributes[o]=s}if(t.skinIndices.length>0){var m=new jn(4*t.skinIndices.length,4);this.addAttribute("skinIndex",m.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){var d=new jn(4*t.skinWeights.length,4);this.addAttribute("skinWeight",d.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new qn);var t=this.attributes.position;void 0!==t?this.boundingBox.setFromBufferAttribute(t):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var t=new qn,e=new Ye;return function(){null===this.boundingSphere&&(this.boundingSphere=new cn);var n=this.attributes.position;if(n){var i=this.boundingSphere.center;t.setFromBufferAttribute(n),t.getCenter(i);for(var r=0,a=0,o=n.count;a<o;a++)e.x=n.getX(a),e.y=n.getY(a),e.z=n.getZ(a),r=Math.max(r,i.distanceToSquared(e));this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.index,e=this.attributes,n=this.groups;if(e.position){var i=e.position.array;if(void 0===e.normal)this.addAttribute("normal",new Dn(new Float32Array(i.length),3));else for(var r=e.normal.array,a=0,o=r.length;a<o;a++)r[a]=0;var s,l,q,c=e.normal.array,h=new Ye,u=new Ye,m=new Ye,d=new Ye,p=new Ye;if(t){var f=t.array;0===n.length&&this.addGroup(0,f.length);for(var g=0,v=n.length;g<v;++g){var x=n[g],y=x.start;for(a=y,o=y+x.count;a<o;a+=3)s=3*f[a+0],l=3*f[a+1],q=3*f[a+2],h.fromArray(i,s),u.fromArray(i,l),m.fromArray(i,q),d.subVectors(m,u),p.subVectors(h,u),d.cross(p),c[s]+=d.x,c[s+1]+=d.y,c[s+2]+=d.z,c[l]+=d.x,c[l+1]+=d.y,c[l+2]+=d.z,c[q]+=d.x,c[q+1]+=d.y,c[q+2]+=d.z}}else for(a=0,o=i.length;a<o;a+=9)h.fromArray(i,a),u.fromArray(i,a+3),m.fromArray(i,a+6),d.subVectors(m,u),p.subVectors(h,u),d.cross(p),c[a]=d.x,c[a+1]=d.y,c[a+2]=d.z,c[a+3]=d.x,c[a+4]=d.y,c[a+5]=d.z,c[a+6]=d.x,c[a+7]=d.y,c[a+8]=d.z;this.normalizeNormals(),e.normal.needsUpdate=!0}},merge:function(t,e){if(t&&t.isBufferGeometry){void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var n=this.attributes;for(var i in n)if(void 0!==t.attributes[i])for(var r=n[i].array,a=t.attributes[i],o=a.array,s=0,l=a.itemSize*e;s<o.length;s++,l++)r[l]=o[s];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)},normalizeNormals:function(){var t=new Ye;return function(){for(var e=this.attributes.normal,n=0,i=e.count;n<i;n++)t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.normalize(),e.setXYZ(n,t.x,t.y,t.z)}}(),toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new Jn,e=this.index.array,n=this.attributes;for(var i in n){for(var r=n[i],a=r.array,o=r.itemSize,s=new a.constructor(e.length*o),l=0,q=0,c=0,h=e.length;c<h;c++){l=e[c]*o;for(var u=0;u<o;u++)s[q++]=a[l++]}t.addAttribute(i,new Dn(s,o))}var m=this.groups;for(c=0,h=m.length;c<h;c++){var d=m[c];t.addGroup(d.start,d.count,d.materialIndex)}return t},toJSON:function(){var t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};var i=this.index;if(null!==i){var r=Array.prototype.slice.call(i.array);t.data.index={type:i.array.constructor.name,array:r}}var a=this.attributes;for(var n in a){var o=a[n];r=Array.prototype.slice.call(o.array);t.data.attributes[n]={itemSize:o.itemSize,type:o.array.constructor.name,array:r,normalized:o.normalized}}var s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));var l=this.boundingSphere;return null!==l&&(t.data.boundingSphere={center:l.center.toArray(),radius:l.radius}),t},clone:function(){return(new Jn).copy(this)},copy:function(t){var e,n,i;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var r=t.index;null!==r&&this.setIndex(r.clone());var a=t.attributes;for(e in a){var o=a[e];this.addAttribute(e,o.clone())}var s=t.morphAttributes;for(e in s){var l=[],q=s[e];for(n=0,i=q.length;n<i;n++)l.push(q[n].clone());this.morphAttributes[e]=l}var c=t.groups;for(n=0,i=c.length;n<i;n++){var h=c[n];this.addGroup(h.start,h.count,h.materialIndex)}var u=t.boundingBox;null!==u&&(this.boundingBox=u.clone());var m=t.boundingSphere;return null!==m&&(this.boundingSphere=m.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Qn.prototype=Object.create(Un.prototype),Qn.prototype.constructor=Qn,Kn.prototype=Object.create(Jn.prototype),Kn.prototype.constructor=Kn,$n.prototype=Object.create(Un.prototype),$n.prototype.constructor=$n,ti.prototype=Object.create(Jn.prototype),ti.prototype.constructor=ti;var ei,ni,ii,ri,ai,oi,si,li=0;function qi(){Object.defineProperty(this,"id",{value:li++}),this.uuid=ke.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=O,this.side=E,this.flatShading=!1,this.vertexColors=R,this.opacity=1,this.transparent=!1,this.blendSrc=X,this.blendDst=Y,this.blendEquation=B,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=it,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this.userData={},this.needsUpdate=!0}function ci(t){qi.call(this),this.type="MeshBasicMaterial",this.color=new gn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=lt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(t)}function hi(t){qi.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}function ui(t,e){this.origin=void 0!==t?t:new Ye,this.direction=void 0!==e?e:new Ye}function mi(t,e){this.start=void 0!==t?t:new Ye,this.end=void 0!==e?e:new Ye}function di(t,e,n){this.a=void 0!==t?t:new Ye,this.b=void 0!==e?e:new Ye,this.c=void 0!==n?n:new Ye}function pi(t,e){Rn.call(this),this.type="Mesh",this.geometry=void 0!==t?t:new Jn,this.material=void 0!==e?e:new ci({color:16777215*Math.random()}),this.drawMode=Pe,this.updateMorphTargets()}function fi(t,e){return Math.abs(e[1])-Math.abs(t[1])}function gi(t,e,n,i,r,a,o,s,l,q){t=void 0!==t?t:[],e=void 0!==e?e:gt,rn.call(this,t,e,n,i,r,a,o,s,l,q),this.flipY=!1}qi.prototype=Object.assign(Object.create(i.prototype),{constructor:qi,isMaterial:!0,onBeforeCompile:function(){},setValues:function(t){if(void 0!==t)for(var e in t){var n=t[e];if(void 0!==n)if("shading"!==e){var i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]="overdraw"===e?Number(n):n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===S;else console.warn("THREE.Material: '"+e+"' parameter is undefined.")}},toJSON:function(t){var e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});var n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function i(t){var e=[];for(var n in t){var i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearCoat&&(n.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(n.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,n.reflectivity=this.reflectivity),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==O&&(n.blending=this.blending),!0===this.flatShading&&(n.flatShading=this.flatShading),this.side!==E&&(n.side=this.side),this.vertexColors!==R&&(n.vertexColors=this.vertexColors),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,0!==this.rotation&&(n.rotation=this.rotation),1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.skinning&&(n.skinning=!0),!1===this.visible&&(n.visible=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){var r=i(t.textures),a=i(t.images);r.length>0&&(n.textures=r),a.length>0&&(n.images=a)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.name=t.name,this.fog=t.fog,this.lights=t.lights,this.blending=t.blending,this.side=t.side,this.flatShading=t.flatShading,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.overdraw=t.overdraw,this.visible=t.visible,this.userData=JSON.parse(JSON.stringify(t.userData)),this.clipShadows=t.clipShadows,this.clipIntersection=t.clipIntersection;var e=t.clippingPlanes,n=null;if(null!==e){var i=e.length;n=new Array(i);for(var r=0;r!==i;++r)n[r]=e[r].clone()}return this.clippingPlanes=n,this.shadowSide=t.shadowSide,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),ci.prototype=Object.create(qi.prototype),ci.prototype.constructor=ci,ci.prototype.isMeshBasicMaterial=!0,ci.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this},hi.prototype=Object.create(qi.prototype),hi.prototype.constructor=hi,hi.prototype.isShaderMaterial=!0,hi.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=pn.clone(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=t.extensions,this},hi.prototype.toJSON=function(t){var e=qi.prototype.toJSON.call(this,t);return e.uniforms=this.uniforms,e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e},Object.assign(ui.prototype,{set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new Ye),e.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:function(){var t=new Ye;return function(e){return this.origin.copy(this.at(e,t)),this}}(),closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new Ye),e.subVectors(t,this.origin);var n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(){var t=new Ye;return function(e){var n=t.subVectors(e,this.origin).dot(this.direction);return n<0?this.origin.distanceToSquared(e):(t.copy(this.direction).multiplyScalar(n).add(this.origin),t.distanceToSquared(e))}}(),distanceSqToSegment:(ni=new Ye,ii=new Ye,ri=new Ye,function(t,e,n,i){ni.copy(t).add(e).multiplyScalar(.5),ii.copy(e).sub(t).normalize(),ri.copy(this.origin).sub(ni);var r,a,o,s,l=.5*t.distanceTo(e),q=-this.direction.dot(ii),c=ri.dot(this.direction),h=-ri.dot(ii),u=ri.lengthSq(),m=Math.abs(1-q*q);if(m>0)if(a=q*c-h,s=l*m,(r=q*h-c)>=0)if(a>=-s)if(a<=s){var d=1/m;o=(r*=d)*(r+q*(a*=d)+2*c)+a*(q*r+a+2*h)+u}else a=l,o=-(r=Math.max(0,-(q*a+c)))*r+a*(a+2*h)+u;else a=-l,o=-(r=Math.max(0,-(q*a+c)))*r+a*(a+2*h)+u;else a<=-s?o=-(r=Math.max(0,-(-q*l+c)))*r+(a=r>0?-l:Math.min(Math.max(-l,-h),l))*(a+2*h)+u:a<=s?(r=0,o=(a=Math.min(Math.max(-l,-h),l))*(a+2*h)+u):o=-(r=Math.max(0,-(q*l+c)))*r+(a=r>0?l:Math.min(Math.max(-l,-h),l))*(a+2*h)+u;else a=q>0?-l:l,o=-(r=Math.max(0,-(q*a+c)))*r+a*(a+2*h)+u;return n&&n.copy(this.direction).multiplyScalar(r).add(this.origin),i&&i.copy(ii).multiplyScalar(a).add(ni),o}),intersectSphere:function(){var t=new Ye;return function(e,n){t.subVectors(e.center,this.origin);var i=t.dot(this.direction),r=t.dot(t)-i*i,a=e.radius*e.radius;if(r>a)return null;var o=Math.sqrt(a-r),s=i-o,l=i+o;return s<0&&l<0?null:s<0?this.at(l,n):this.at(s,n)}}(),intersectsSphere:function(t){return this.distanceToPoint(t.center)<=t.radius},distanceToPlane:function(t){var e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null},intersectPlane:function(t,e){var n=this.distanceToPlane(t);return null===n?null:this.at(n,e)},intersectsPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},intersectBox:function(t,e){var n,i,r,a,o,s,l=1/this.direction.x,q=1/this.direction.y,c=1/this.direction.z,h=this.origin;return l>=0?(n=(t.min.x-h.x)*l,i=(t.max.x-h.x)*l):(n=(t.max.x-h.x)*l,i=(t.min.x-h.x)*l),q>=0?(r=(t.min.y-h.y)*q,a=(t.max.y-h.y)*q):(r=(t.max.y-h.y)*q,a=(t.min.y-h.y)*q),n>a||r>i?null:((r>n||n!=n)&&(n=r),(a<i||i!=i)&&(i=a),c>=0?(o=(t.min.z-h.z)*c,s=(t.max.z-h.z)*c):(o=(t.max.z-h.z)*c,s=(t.min.z-h.z)*c),n>s||o>i?null:((o>n||n!=n)&&(n=o),(s<i||i!=i)&&(i=s),i<0?null:this.at(n>=0?n:i,e)))},intersectsBox:(ei=new Ye,function(t){return null!==this.intersectBox(t,ei)}),intersectTriangle:function(){var t=new Ye,e=new Ye,n=new Ye,i=new Ye;return function(r,a,o,s,l){e.subVectors(a,r),n.subVectors(o,r),i.crossVectors(e,n);var q,c=this.direction.dot(i);if(c>0){if(s)return null;q=1}else{if(!(c<0))return null;q=-1,c=-c}t.subVectors(this.origin,r);var h=q*this.direction.dot(n.crossVectors(t,n));if(h<0)return null;var u=q*this.direction.dot(e.cross(t));if(u<0)return null;if(h+u>c)return null;var m=-q*t.dot(i);return m<0?null:this.at(m/c,l)}}(),applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}}),Object.assign(mi.prototype,{set:function(t,e){return this.start.copy(t),this.end.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.start.copy(t.start),this.end.copy(t.end),this},getCenter:function(t){return void 0===t&&(console.warn("THREE.Line3: .getCenter() target is now required"),t=new Ye),t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(t){return void 0===t&&(console.warn("THREE.Line3: .delta() target is now required"),t=new Ye),t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,e){return void 0===e&&(console.warn("THREE.Line3: .at() target is now required"),e=new Ye),this.delta(e).multiplyScalar(t).add(this.start)},closestPointToPointParameter:(ai=new Ye,oi=new Ye,function(t,e){ai.subVectors(t,this.start),oi.subVectors(this.end,this.start);var n=oi.dot(oi),i=oi.dot(ai)/n;return e&&(i=ke.clamp(i,0,1)),i}),closestPointToPoint:function(t,e,n){var i=this.closestPointToPointParameter(t,e);return void 0===n&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),n=new Ye),this.delta(n).multiplyScalar(i).add(this.start)},applyMatrix4:function(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this},equals:function(t){return t.start.equals(this.start)&&t.end.equals(this.end)}}),Object.assign(di,{getNormal:(si=new Ye,function(t,e,n,i){void 0===i&&(console.warn("THREE.Triangle: .getNormal() target is now required"),i=new Ye),i.subVectors(n,e),si.subVectors(t,e),i.cross(si);var r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}),getBarycoord:function(){var t=new Ye,e=new Ye,n=new Ye;return function(i,r,a,o,s){t.subVectors(o,r),e.subVectors(a,r),n.subVectors(i,r);var l=t.dot(t),q=t.dot(e),c=t.dot(n),h=e.dot(e),u=e.dot(n),m=l*h-q*q;if(void 0===s&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),s=new Ye),0===m)return s.set(-2,-1,-1);var d=1/m,p=(h*c-q*u)*d,f=(l*u-q*c)*d;return s.set(1-p-f,f,p)}}(),containsPoint:function(){var t=new Ye;return function(e,n,i,r){return di.getBarycoord(e,n,i,r,t),t.x>=0&&t.y>=0&&t.x+t.y<=1}}()}),Object.assign(di.prototype,{set:function(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this},setFromPointsAndIndices:function(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},getArea:function(){var t=new Ye,e=new Ye;return function(){return t.subVectors(this.c,this.b),e.subVectors(this.a,this.b),.5*t.cross(e).length()}}(),getMidpoint:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new Ye),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(t){return di.getNormal(this.a,this.b,this.c,t)},getPlane:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new Ye),t.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(t,e){return di.getBarycoord(t,this.a,this.b,this.c,e)},containsPoint:function(t){return di.containsPoint(t,this.a,this.b,this.c)},intersectsBox:function(t){return t.intersectsTriangle(this)},closestPointToPoint:function(){var t=new hn,e=[new mi,new mi,new mi],n=new Ye,i=new Ye;return function(r,a){void 0===a&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),a=new Ye);var o=1/0;if(t.setFromCoplanarPoints(this.a,this.b,this.c),t.projectPoint(r,n),!0===this.containsPoint(n))a.copy(n);else{e[0].set(this.a,this.b),e[1].set(this.b,this.c),e[2].set(this.c,this.a);for(var s=0;s<e.length;s++){e[s].closestPointToPoint(n,!0,i);var l=n.distanceToSquared(i);l<o&&(o=l,a.copy(i))}}return a}}(),equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}),pi.prototype=Object.assign(Object.create(Rn.prototype),{constructor:pi,isMesh:!0,setDrawMode:function(t){this.drawMode=t},copy:function(t){return Rn.prototype.copy.call(this,t),this.drawMode=t.drawMode,void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this},updateMorphTargets:function(){var t,e,n,i=this.geometry;if(i.isBufferGeometry){var r=i.morphAttributes,a=Object.keys(r);if(a.length>0){var o=r[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=o.length;t<e;t++)n=o[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}}else{var s=i.morphTargets;if(void 0!==s&&s.length>0)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=s.length;t<e;t++)n=s[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}},raycast:function(){var t=new We,e=new ui,n=new cn,i=new Ye,r=new Ye,a=new Ye,o=new Ye,s=new Ye,l=new Ye,q=new je,c=new je,h=new je,u=new Ye,m=new Ye,d=new Ye;function p(t,e,n,i,r,a,o){return di.getBarycoord(t,e,n,i,u),r.multiplyScalar(u.x),a.multiplyScalar(u.y),o.multiplyScalar(u.z),r.add(a).add(o),r.clone()}function f(t,e,n,i,r,a,o,s){if(null===(e.side===M?i.intersectTriangle(o,a,r,!0,s):i.intersectTriangle(r,a,o,e.side!==T,s)))return null;d.copy(s),d.applyMatrix4(t.matrixWorld);var l=n.ray.origin.distanceTo(d);return l<n.near||l>n.far?null:{distance:l,point:d.clone(),object:t}}function g(t,e,n,o,s,l,u,d){i.fromBufferAttribute(o,l),r.fromBufferAttribute(o,u),a.fromBufferAttribute(o,d);var g=f(t,t.material,e,n,i,r,a,m);if(g){s&&(q.fromBufferAttribute(s,l),c.fromBufferAttribute(s,u),h.fromBufferAttribute(s,d),g.uv=p(m,i,r,a,q,c,h));var v=new Cn(l,u,d);di.getNormal(i,r,a,v.normal),g.face=v,g.faceIndex=l}return g}return function(u,d){var v,x=this.geometry,y=this.material,_=this.matrixWorld;if(void 0!==y&&(null===x.boundingSphere&&x.computeBoundingSphere(),n.copy(x.boundingSphere),n.applyMatrix4(_),!1!==u.ray.intersectsSphere(n)&&(t.getInverse(_),e.copy(u.ray).applyMatrix4(t),null===x.boundingBox||!1!==e.intersectsBox(x.boundingBox))))if(x.isBufferGeometry){var b,w,E,M,T,S=x.index,A=x.attributes.position,R=x.attributes.uv;if(null!==S)for(M=0,T=S.count;M<T;M+=3)b=S.getX(M),w=S.getX(M+1),E=S.getX(M+2),(v=g(this,u,e,A,R,b,w,E))&&(v.faceIndex=Math.floor(M/3),d.push(v));else if(void 0!==A)for(M=0,T=A.count;M<T;M+=3)(v=g(this,u,e,A,R,b=M,w=M+1,E=M+2))&&d.push(v)}else if(x.isGeometry){var L,P,C,O,I=Array.isArray(y),N=x.vertices,U=x.faces,D=x.faceVertexUvs[0];D.length>0&&(O=D);for(var B=0,F=U.length;B<F;B++){var z=U[B],H=I?y[z.materialIndex]:y;if(void 0!==H){if(L=N[z.a],P=N[z.b],C=N[z.c],!0===H.morphTargets){var G=x.morphTargets,V=this.morphTargetInfluences;i.set(0,0,0),r.set(0,0,0),a.set(0,0,0);for(var k=0,j=G.length;k<j;k++){var W=V[k];if(0!==W){var X=G[k].vertices;i.addScaledVector(o.subVectors(X[z.a],L),W),r.addScaledVector(s.subVectors(X[z.b],P),W),a.addScaledVector(l.subVectors(X[z.c],C),W)}}i.add(L),r.add(P),a.add(C),L=i,P=r,C=a}if(v=f(this,H,u,e,L,P,C,m)){if(O&&O[B]){var Y=O[B];q.copy(Y[0]),c.copy(Y[1]),h.copy(Y[2]),v.uv=p(m,L,P,C,q,c,h)}v.face=z,v.faceIndex=B,d.push(v)}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),gi.prototype=Object.create(rn.prototype),gi.prototype.constructor=gi,gi.prototype.isCubeTexture=!0,Object.defineProperty(gi.prototype,"images",{get:function(){return this.image},set:function(t){this.image=t}});var vi=new rn,xi=new gi;function yi(){this.seq=[],this.map={}}var _i=[],bi=[],wi=new Float32Array(16),Ei=new Float32Array(9);function Mi(t,e,n){var i=t[0];if(i<=0||i>0)return t;var r=e*n,a=_i[r];if(void 0===a&&(a=new Float32Array(r),_i[r]=a),0!==e){i.toArray(a,0);for(var o=1,s=0;o!==e;++o)s+=n,t[o].toArray(a,s)}return a}function Ti(t,e){var n=bi[e];void 0===n&&(n=new Int32Array(e),bi[e]=n);for(var i=0;i!==e;++i)n[i]=t.allocTextureUnit();return n}function Si(t,e){t.uniform1f(this.addr,e)}function Ai(t,e){t.uniform1i(this.addr,e)}function Ri(t,e){void 0===e.x?t.uniform2fv(this.addr,e):t.uniform2f(this.addr,e.x,e.y)}function Li(t,e){void 0!==e.x?t.uniform3f(this.addr,e.x,e.y,e.z):void 0!==e.r?t.uniform3f(this.addr,e.r,e.g,e.b):t.uniform3fv(this.addr,e)}function Pi(t,e){void 0===e.x?t.uniform4fv(this.addr,e):t.uniform4f(this.addr,e.x,e.y,e.z,e.w)}function Ci(t,e){t.uniformMatrix2fv(this.addr,!1,e.elements||e)}function Oi(t,e){void 0===e.elements?t.uniformMatrix3fv(this.addr,!1,e):(Ei.set(e.elements),t.uniformMatrix3fv(this.addr,!1,Ei))}function Ii(t,e){void 0===e.elements?t.uniformMatrix4fv(this.addr,!1,e):(wi.set(e.elements),t.uniformMatrix4fv(this.addr,!1,wi))}function Ni(t,e,n){var i=n.allocTextureUnit();t.uniform1i(this.addr,i),n.setTexture2D(e||vi,i)}function Ui(t,e,n){var i=n.allocTextureUnit();t.uniform1i(this.addr,i),n.setTextureCube(e||xi,i)}function Di(t,e){t.uniform2iv(this.addr,e)}function Bi(t,e){t.uniform3iv(this.addr,e)}function Fi(t,e){t.uniform4iv(this.addr,e)}function zi(t,e){t.uniform1fv(this.addr,e)}function Hi(t,e){t.uniform1iv(this.addr,e)}function Gi(t,e){t.uniform2fv(this.addr,Mi(e,this.size,2))}function Vi(t,e){t.uniform3fv(this.addr,Mi(e,this.size,3))}function ki(t,e){t.uniform4fv(this.addr,Mi(e,this.size,4))}function ji(t,e){t.uniformMatrix2fv(this.addr,!1,Mi(e,this.size,4))}function Wi(t,e){t.uniformMatrix3fv(this.addr,!1,Mi(e,this.size,9))}function Xi(t,e){t.uniformMatrix4fv(this.addr,!1,Mi(e,this.size,16))}function Yi(t,e,n){var i=e.length,r=Ti(n,i);t.uniform1iv(this.addr,r);for(var a=0;a!==i;++a)n.setTexture2D(e[a]||vi,r[a])}function Zi(t,e,n){var i=e.length,r=Ti(n,i);t.uniform1iv(this.addr,r);for(var a=0;a!==i;++a)n.setTextureCube(e[a]||xi,r[a])}function Ji(t,e,n){this.id=t,this.addr=n,this.setValue=function(t){switch(t){case 5126:return Si;case 35664:return Ri;case 35665:return Li;case 35666:return Pi;case 35674:return Ci;case 35675:return Oi;case 35676:return Ii;case 35678:case 36198:return Ni;case 35680:return Ui;case 5124:case 35670:return Ai;case 35667:case 35671:return Di;case 35668:case 35672:return Bi;case 35669:case 35673:return Fi}}(e.type)}function Qi(t,e,n){this.id=t,this.addr=n,this.size=e.size,this.setValue=function(t){switch(t){case 5126:return zi;case 35664:return Gi;case 35665:return Vi;case 35666:return ki;case 35674:return ji;case 35675:return Wi;case 35676:return Xi;case 35678:return Yi;case 35680:return Zi;case 5124:case 35670:return Hi;case 35667:case 35671:return Di;case 35668:case 35672:return Bi;case 35669:case 35673:return Fi}}(e.type)}function Ki(t){this.id=t,yi.call(this)}Ki.prototype.setValue=function(t,e){for(var n=this.seq,i=0,r=n.length;i!==r;++i){var a=n[i];a.setValue(t,e[a.id])}};var $i=/([\w\d_]+)(\])?(\[|\.)?/g;function tr(t,e){t.seq.push(e),t.map[e.id]=e}function er(t,e,n){var i=t.name,r=i.length;for($i.lastIndex=0;;){var a=$i.exec(i),o=$i.lastIndex,s=a[1],l="]"===a[2],q=a[3];if(l&&(s|=0),void 0===q||"["===q&&o+2===r){tr(n,void 0===q?new Ji(s,t,e):new Qi(s,t,e));break}var c=n.map[s];void 0===c&&tr(n,c=new Ki(s)),n=c}}function nr(t,e,n){yi.call(this),this.renderer=n;for(var i=t.getProgramParameter(e,t.ACTIVE_UNIFORMS),r=0;r<i;++r){var a=t.getActiveUniform(e,r);er(a,t.getUniformLocation(e,a.name),this)}}function ir(t,e,n){var i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),!1===t.getShaderParameter(i,t.COMPILE_STATUS)&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==t.getShaderInfoLog(i)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",e===t.VERTEX_SHADER?"vertex":"fragment",t.getShaderInfoLog(i),function(t){for(var e=t.split("\n"),n=0;n<e.length;n++)e[n]=n+1+": "+e[n];return e.join("\n")}(n)),i}nr.prototype.setValue=function(t,e,n){var i=this.map[e];void 0!==i&&i.setValue(t,n,this.renderer)},nr.prototype.setOptional=function(t,e,n){var i=e[n];void 0!==i&&this.setValue(t,n,i)},nr.upload=function(t,e,n,i){for(var r=0,a=e.length;r!==a;++r){var o=e[r],s=n[o.id];!1!==s.needsUpdate&&o.setValue(t,s.value,i)}},nr.seqWithValue=function(t,e){for(var n=[],i=0,r=t.length;i!==r;++i){var a=t[i];a.id in e&&n.push(a)}return n};var rr=0;function ar(t){switch(t){case Ie:return["Linear","( value )"];case Ne:return["sRGB","( value )"];case De:return["RGBE","( value )"];case Fe:return["RGBM","( value, 7.0 )"];case ze:return["RGBM","( value, 16.0 )"];case He:return["RGBD","( value, 256.0 )"];case Ue:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+t)}}function or(t,e){var n=ar(e);return"vec4 "+t+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function sr(t){return""!==t}function lr(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights)}function qr(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}function cr(t){return t.replace(/^[ \t]*#include +<([\w\d.]+)>/gm,function(t,e){var n=dn[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return cr(n)})}function hr(t){return t.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,function(t,e,n,i){for(var r="",a=parseInt(e);a<parseInt(n);a++)r+=i.replace(/\[ i \]/g,"[ "+a+" ]");return r})}function ur(t,e,n,i,r,a){var o=t.context,s=i.defines,l=r.vertexShader,q=r.fragmentShader,c="SHADOWMAP_TYPE_BASIC";a.shadowMapType===b?c="SHADOWMAP_TYPE_PCF":a.shadowMapType===w&&(c="SHADOWMAP_TYPE_PCF_SOFT");var h="ENVMAP_TYPE_CUBE",u="ENVMAP_MODE_REFLECTION",m="ENVMAP_BLENDING_MULTIPLY";if(a.envMap){switch(i.envMap.mapping){case gt:case vt:h="ENVMAP_TYPE_CUBE";break;case bt:case wt:h="ENVMAP_TYPE_CUBE_UV";break;case xt:case yt:h="ENVMAP_TYPE_EQUIREC";break;case _t:h="ENVMAP_TYPE_SPHERE"}switch(i.envMap.mapping){case vt:case yt:u="ENVMAP_MODE_REFRACTION"}switch(i.combine){case lt:m="ENVMAP_BLENDING_MULTIPLY";break;case qt:m="ENVMAP_BLENDING_MIX";break;case ct:m="ENVMAP_BLENDING_ADD"}}var d,p,f,g,v,x=t.gammaFactor>0?t.gammaFactor:1,y=function(t,e,n){return[(t=t||{}).derivatives||e.envMapCubeUV||e.bumpMap||e.normalMap||e.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(t.fragDepth||e.logarithmicDepthBuffer)&&n.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",t.drawBuffers&&n.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(t.shaderTextureLOD||e.envMap)&&n.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(sr).join("\n")}(i.extensions,a,e),_=function(t){var e=[];for(var n in t){var i=t[n];!1!==i&&e.push("#define "+n+" "+i)}return e.join("\n")}(s),E=o.createProgram();i.isRawShaderMaterial?((d=[_].filter(sr).join("\n")).length>0&&(d+="\n"),(p=[y,_].filter(sr).join("\n")).length>0&&(p+="\n")):(d=["precision "+a.precision+" float;","precision "+a.precision+" int;","#define SHADER_NAME "+r.name,_,a.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+x,"#define MAX_BONES "+a.maxBones,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+u:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.displacementMap&&a.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.vertexColors?"#define USE_COLOR":"",a.flatShading?"#define FLAT_SHADED":"",a.skinning?"#define USE_SKINNING":"",a.useVertexTexture?"#define BONE_TEXTURE":"",a.morphTargets?"#define USE_MORPHTARGETS":"",a.morphNormals&&!1===a.flatShading?"#define USE_MORPHNORMALS":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+c:"",a.sizeAttenuation?"#define USE_SIZEATTENUATION":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&e.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(sr).join("\n"),p=[y,"precision "+a.precision+" float;","precision "+a.precision+" int;","#define SHADER_NAME "+r.name,_,a.alphaTest?"#define ALPHATEST "+a.alphaTest:"","#define GAMMA_FACTOR "+x,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+h:"",a.envMap?"#define "+u:"",a.envMap?"#define "+m:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.vertexColors?"#define USE_COLOR":"",a.gradientMap?"#define USE_GRADIENTMAP":"",a.flatShading?"#define FLAT_SHADED":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+c:"",a.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",a.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&e.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",a.envMap&&e.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",a.toneMapping!==ht?"#define TONE_MAPPING":"",a.toneMapping!==ht?dn.tonemapping_pars_fragment:"",a.toneMapping!==ht?function(t,e){var n;switch(e){case ut:n="Linear";break;case mt:n="Reinhard";break;case dt:n="Uncharted2";break;case pt:n="OptimizedCineon";break;default:throw new Error("unsupported toneMapping: "+e)}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}("toneMapping",a.toneMapping):"",a.dithering?"#define DITHERING":"",a.outputEncoding||a.mapEncoding||a.envMapEncoding||a.emissiveMapEncoding?dn.encodings_pars_fragment:"",a.mapEncoding?or("mapTexelToLinear",a.mapEncoding):"",a.envMapEncoding?or("envMapTexelToLinear",a.envMapEncoding):"",a.emissiveMapEncoding?or("emissiveMapTexelToLinear",a.emissiveMapEncoding):"",a.outputEncoding?(f="linearToOutputTexel",g=a.outputEncoding,v=ar(g),"vec4 "+f+"( vec4 value ) { return LinearTo"+v[0]+v[1]+"; }"):"",a.depthPacking?"#define DEPTH_PACKING "+i.depthPacking:"","\n"].filter(sr).join("\n")),l=qr(l=lr(l=cr(l),a),a),q=qr(q=lr(q=cr(q),a),a);var M=d+(l=hr(l)),T=p+(q=hr(q)),S=ir(o,o.VERTEX_SHADER,M),A=ir(o,o.FRAGMENT_SHADER,T);o.attachShader(E,S),o.attachShader(E,A),void 0!==i.index0AttributeName?o.bindAttribLocation(E,0,i.index0AttributeName):!0===a.morphTargets&&o.bindAttribLocation(E,0,"position"),o.linkProgram(E);var R,L,P=o.getProgramInfoLog(E).trim(),C=o.getShaderInfoLog(S).trim(),O=o.getShaderInfoLog(A).trim(),I=!0,N=!0;return!1===o.getProgramParameter(E,o.LINK_STATUS)?(I=!1,console.error("THREE.WebGLProgram: shader error: ",o.getError(),"gl.VALIDATE_STATUS",o.getProgramParameter(E,o.VALIDATE_STATUS),"gl.getProgramInfoLog",P,C,O)):""!==P?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",P):""!==C&&""!==O||(N=!1),N&&(this.diagnostics={runnable:I,material:i,programLog:P,vertexShader:{log:C,prefix:d},fragmentShader:{log:O,prefix:p}}),o.deleteShader(S),o.deleteShader(A),this.getUniforms=function(){return void 0===R&&(R=new nr(o,E,t)),R},this.getAttributes=function(){return void 0===L&&(L=function(t,e){for(var n={},i=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES),r=0;r<i;r++){var a=t.getActiveAttrib(e,r).name;n[a]=t.getAttribLocation(e,a)}return n}(o,E)),L},this.destroy=function(){o.deleteProgram(E),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.name=r.name,this.id=rr++,this.code=n,this.usedTimes=1,this.program=E,this.vertexShader=S,this.fragmentShader=A,this}function mr(t,e,n){var i=[],r={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow"},a=["precision","supportsVertexTextures","map","mapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];function o(t,e){var n;return t?t.isTexture?n=t.encoding:t.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),n=t.texture.encoding):n=Ie,n===Ie&&e&&(n=Ue),n}this.getParameters=function(e,i,a,s,l,q,c){var h=r[e.type],u=c.isSkinnedMesh?function(t){var e=t.skeleton.bones;if(n.floatVertexTextures)return 1024;var i=n.maxVertexUniforms,r=Math.floor((i-20)/4),a=Math.min(r,e.length);return a<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+a+"."),0):a}(c):0,m=n.precision;null!==e.precision&&(m=n.getMaxPrecision(e.precision))!==e.precision&&console.warn("THREE.WebGLProgram.getParameters:",e.precision,"not supported, using",m,"instead.");var d=t.getRenderTarget();return{shaderID:h,precision:m,supportsVertexTextures:n.vertexTextures,outputEncoding:o(d?d.texture:null,t.gammaOutput),map:!!e.map,mapEncoding:o(e.map,t.gammaInput),envMap:!!e.envMap,envMapMode:e.envMap&&e.envMap.mapping,envMapEncoding:o(e.envMap,t.gammaInput),envMapCubeUV:!!e.envMap&&(e.envMap.mapping===bt||e.envMap.mapping===wt),lightMap:!!e.lightMap,aoMap:!!e.aoMap,emissiveMap:!!e.emissiveMap,emissiveMapEncoding:o(e.emissiveMap,t.gammaInput),bumpMap:!!e.bumpMap,normalMap:!!e.normalMap,displacementMap:!!e.displacementMap,roughnessMap:!!e.roughnessMap,metalnessMap:!!e.metalnessMap,specularMap:!!e.specularMap,alphaMap:!!e.alphaMap,gradientMap:!!e.gradientMap,combine:e.combine,vertexColors:e.vertexColors,fog:!!s,useFog:e.fog,fogExp:s&&s.isFogExp2,flatShading:e.flatShading,sizeAttenuation:e.sizeAttenuation,logarithmicDepthBuffer:n.logarithmicDepthBuffer,skinning:e.skinning&&u>0,maxBones:u,useVertexTexture:n.floatVertexTextures,morphTargets:e.morphTargets,morphNormals:e.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:i.directional.length,numPointLights:i.point.length,numSpotLights:i.spot.length,numRectAreaLights:i.rectArea.length,numHemiLights:i.hemi.length,numClippingPlanes:l,numClipIntersection:q,dithering:e.dithering,shadowMapEnabled:t.shadowMap.enabled&&c.receiveShadow&&a.length>0,shadowMapType:t.shadowMap.type,toneMapping:t.toneMapping,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:e.premultipliedAlpha,alphaTest:e.alphaTest,doubleSided:e.side===T,flipSided:e.side===M,depthPacking:void 0!==e.depthPacking&&e.depthPacking}},this.getProgramCode=function(e,n){var i=[];if(n.shaderID?i.push(n.shaderID):(i.push(e.fragmentShader),i.push(e.vertexShader)),void 0!==e.defines)for(var r in e.defines)i.push(r),i.push(e.defines[r]);for(var o=0;o<a.length;o++)i.push(n[a[o]]);return i.push(e.onBeforeCompile.toString()),i.push(t.gammaOutput),i.join()},this.acquireProgram=function(n,r,a,o){for(var s,l=0,q=i.length;l<q;l++){var c=i[l];if(c.code===o){++(s=c).usedTimes;break}}return void 0===s&&(s=new ur(t,e,o,n,r,a),i.push(s)),s},this.releaseProgram=function(t){if(0==--t.usedTimes){var e=i.indexOf(t);i[e]=i[i.length-1],i.pop(),t.destroy()}},this.programs=i}function dr(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program&&e.program&&t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function pr(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function fr(){var t={};return{get:function(e,n){var i=e.id+","+n.id,r=t[i];return void 0===r&&(r=new function(){var t=[],e=0,n=[],i=[];return{opaque:n,transparent:i,init:function(){e=0,n.length=0,i.length=0},push:function(r,a,o,s,l){var q=t[e];void 0===q?(q={id:r.id,object:r,geometry:a,material:o,program:o.program,renderOrder:r.renderOrder,z:s,group:l},t[e]=q):(q.id=r.id,q.object=r,q.geometry=a,q.material=o,q.program=o.program,q.renderOrder=r.renderOrder,q.z=s,q.group=l),(!0===o.transparent?i:n).push(q),e++},sort:function(){n.length>1&&n.sort(dr),i.length>1&&i.sort(pr)}}},t[i]=r),r},dispose:function(){t={}}}}var gr,vr,xr,yr,_r,br,wr,Er,Mr=0;function Tr(){var t=new function(){var t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];var n;switch(e.type){case"DirectionalLight":n={direction:new Ye,color:new gn,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new je};break;case"SpotLight":n={position:new Ye,direction:new Ye,color:new gn,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new je};break;case"PointLight":n={position:new Ye,color:new gn,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new je,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":n={direction:new Ye,skyColor:new gn,groundColor:new gn};break;case"RectAreaLight":n={color:new gn,position:new Ye,halfWidth:new Ye,halfHeight:new Ye}}return t[e.id]=n,n}}},e={id:Mr++,hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},n=new Ye,i=new We,r=new We;return{setup:function(a,o,s){for(var l=0,q=0,c=0,h=0,u=0,m=0,d=0,p=0,f=s.matrixWorldInverse,g=0,v=a.length;g<v;g++){var x=a[g],y=x.color,_=x.intensity,b=x.distance,w=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)l+=y.r*_,q+=y.g*_,c+=y.b*_;else if(x.isDirectionalLight){if((M=t.get(x)).color.copy(x.color).multiplyScalar(x.intensity),M.direction.setFromMatrixPosition(x.matrixWorld),n.setFromMatrixPosition(x.target.matrixWorld),M.direction.sub(n),M.direction.transformDirection(f),M.shadow=x.castShadow,x.castShadow){var E=x.shadow;M.shadowBias=E.bias,M.shadowRadius=E.radius,M.shadowMapSize=E.mapSize}e.directionalShadowMap[h]=w,e.directionalShadowMatrix[h]=x.shadow.matrix,e.directional[h]=M,h++}else if(x.isSpotLight)(M=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),M.position.applyMatrix4(f),M.color.copy(y).multiplyScalar(_),M.distance=b,M.direction.setFromMatrixPosition(x.matrixWorld),n.setFromMatrixPosition(x.target.matrixWorld),M.direction.sub(n),M.direction.transformDirection(f),M.coneCos=Math.cos(x.angle),M.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),M.decay=0===x.distance?0:x.decay,M.shadow=x.castShadow,x.castShadow&&(E=x.shadow,M.shadowBias=E.bias,M.shadowRadius=E.radius,M.shadowMapSize=E.mapSize),e.spotShadowMap[m]=w,e.spotShadowMatrix[m]=x.shadow.matrix,e.spot[m]=M,m++;else if(x.isRectAreaLight)(M=t.get(x)).color.copy(y).multiplyScalar(_),M.position.setFromMatrixPosition(x.matrixWorld),M.position.applyMatrix4(f),r.identity(),i.copy(x.matrixWorld),i.premultiply(f),r.extractRotation(i),M.halfWidth.set(.5*x.width,0,0),M.halfHeight.set(0,.5*x.height,0),M.halfWidth.applyMatrix4(r),M.halfHeight.applyMatrix4(r),e.rectArea[d]=M,d++;else if(x.isPointLight)(M=t.get(x)).position.setFromMatrixPosition(x.matrixWorld),M.position.applyMatrix4(f),M.color.copy(x.color).multiplyScalar(x.intensity),M.distance=x.distance,M.decay=0===x.distance?0:x.decay,M.shadow=x.castShadow,x.castShadow&&(E=x.shadow,M.shadowBias=E.bias,M.shadowRadius=E.radius,M.shadowMapSize=E.mapSize,M.shadowCameraNear=E.camera.near,M.shadowCameraFar=E.camera.far),e.pointShadowMap[u]=w,e.pointShadowMatrix[u]=x.shadow.matrix,e.point[u]=M,u++;else if(x.isHemisphereLight){var M;(M=t.get(x)).direction.setFromMatrixPosition(x.matrixWorld),M.direction.transformDirection(f),M.direction.normalize(),M.skyColor.copy(x.color).multiplyScalar(_),M.groundColor.copy(x.groundColor).multiplyScalar(_),e.hemi[p]=M,p++}}e.ambient[0]=l,e.ambient[1]=q,e.ambient[2]=c,e.directional.length=h,e.spot.length=m,e.rectArea.length=d,e.point.length=u,e.hemi.length=p,e.hash=e.id+","+h+","+u+","+m+","+d+","+p+","+o.length},state:e}}function Sr(){var t={};return{get:function(e,n){var i=e.id+","+n.id,r=t[i];return void 0===r&&(r=new function(){var t=new Tr,e=[],n=[],i=[];return{init:function(){e.length=0,n.length=0,i.length=0},state:{lightsArray:e,shadowsArray:n,spritesArray:i,lights:t},setupLights:function(i){t.setup(e,n,i)},pushLight:function(t){e.push(t)},pushShadow:function(t){n.push(t)},pushSprite:function(t){i.push(t)}}},t[i]=r),r},dispose:function(){t={}}}}function Ar(t){qi.call(this),this.type="MeshDepthMaterial",this.depthPacking=Ge,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(t)}function Rr(t){qi.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new Ye,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.lights=!1,this.setValues(t)}function Lr(t,e,n){for(var i=new un,r=new We,a=new je,o=new je(n,n),s=new Ye,l=new Ye,q=1,c=2,h=1+(q|c),u=new Array(h),m=new Array(h),d={},p={0:M,1:E,2:T},f=[new Ye(1,0,0),new Ye(-1,0,0),new Ye(0,0,1),new Ye(0,0,-1),new Ye(0,1,0),new Ye(0,-1,0)],g=[new Ye(0,1,0),new Ye(0,1,0),new Ye(0,1,0),new Ye(0,1,0),new Ye(0,0,1),new Ye(0,0,-1)],v=[new an,new an,new an,new an,new an,new an],x=0;x!==h;++x){var y=0!=(x&q),_=0!=(x&c),w=new Ar({depthPacking:Ve,morphTargets:y,skinning:_});u[x]=w;var S=new Rr({morphTargets:y,skinning:_});m[x]=S}var A=this;function R(e,n,i,r,a,o){var s=e.geometry,l=null,h=u,f=e.customDepthMaterial;if(i&&(h=m,f=e.customDistanceMaterial),f)l=f;else{var g=!1;n.morphTargets&&(s&&s.isBufferGeometry?g=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:s&&s.isGeometry&&(g=s.morphTargets&&s.morphTargets.length>0)),e.isSkinnedMesh&&!1===n.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",e);var v=e.isSkinnedMesh&&n.skinning,x=0;g&&(x|=q),v&&(x|=c),l=h[x]}if(t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){var y=l.uuid,_=n.uuid,b=d[y];void 0===b&&(b={},d[y]=b);var w=b[_];void 0===w&&(w=l.clone(),b[_]=w),l=w}return l.visible=n.visible,l.wireframe=n.wireframe,l.side=null!=n.shadowSide?n.shadowSide:p[n.side],l.clipShadows=n.clipShadows,l.clippingPlanes=n.clippingPlanes,l.clipIntersection=n.clipIntersection,l.wireframeLinewidth=n.wireframeLinewidth,l.linewidth=n.linewidth,i&&l.isMeshDistanceMaterial&&(l.referencePosition.copy(r),l.nearDistance=a,l.farDistance=o),l}function L(n,r,a,o){if(!1!==n.visible){if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&n.castShadow&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);var s=e.update(n),q=n.material;if(Array.isArray(q))for(var c=s.groups,h=0,u=c.length;h<u;h++){var m=c[h],d=q[m.materialIndex];if(d&&d.visible){var p=R(n,d,o,l,a.near,a.far);t.renderBufferDirect(a,null,s,p,n,m)}}else if(q.visible){p=R(n,q,o,l,a.near,a.far);t.renderBufferDirect(a,null,s,p,n,null)}}for(var f=n.children,g=0,v=f.length;g<v;g++)L(f[g],r,a,o)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=b,this.render=function(e,n,q){if(!1!==A.enabled&&(!1!==A.autoUpdate||!1!==A.needsUpdate)&&0!==e.length){var c,h=t.context,u=t.state;u.disable(h.BLEND),u.buffers.color.setClear(1,1,1,1),u.buffers.depth.setTest(!0),u.setScissorTest(!1);for(var m=0,d=e.length;m<d;m++){var p=e[m],x=p.shadow,y=p&&p.isPointLight;if(void 0!==x){var _=x.camera;if(a.copy(x.mapSize),a.min(o),y){var b=a.x,w=a.y;v[0].set(2*b,w,b,w),v[1].set(0,w,b,w),v[2].set(3*b,w,b,w),v[3].set(b,w,b,w),v[4].set(3*b,0,b,w),v[5].set(b,0,b,w),a.x*=4,a.y*=2}if(null===x.map){var E={minFilter:St,magFilter:St,format:Xt};x.map=new on(a.x,a.y,E),x.map.texture.name=p.name+".shadowMap",_.updateProjectionMatrix()}x.isSpotLightShadow&&x.update(p);var M=x.map,T=x.matrix;l.setFromMatrixPosition(p.matrixWorld),_.position.copy(l),y?(c=6,T.makeTranslation(-l.x,-l.y,-l.z)):(c=1,s.setFromMatrixPosition(p.target.matrixWorld),_.lookAt(s),_.updateMatrixWorld(),T.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),T.multiply(_.projectionMatrix),T.multiply(_.matrixWorldInverse)),t.setRenderTarget(M),t.clear();for(var S=0;S<c;S++){if(y){s.copy(_.position),s.add(f[S]),_.up.copy(g[S]),_.lookAt(s),_.updateMatrixWorld();var R=v[S];u.viewport(R)}r.multiplyMatrices(_.projectionMatrix,_.matrixWorldInverse),i.setFromMatrix(r),L(n,q,_,y)}}else console.warn("THREE.WebGLShadowMap:",p,"has no shadow.")}A.needsUpdate=!1}}}function Pr(t,e,n,i,r,a,o,s,l){rn.call(this,t,e,n,i,r,a,o,s,l),this.needsUpdate=!0}function Cr(t,e,n,i,r){var a,o,s,l,q,c,h=new Ye,u=new Xe,m=new Ye;function d(){var t=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),n=new Uint16Array([0,1,2,0,2,3]);a=e.createBuffer(),o=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,a),e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,o),e.bufferData(e.ELEMENT_ARRAY_BUFFER,n,e.STATIC_DRAW),s=function(){var t=e.createProgram(),n=e.createShader(e.VERTEX_SHADER),i=e.createShader(e.FRAGMENT_SHADER);return e.shaderSource(n,["precision "+r.precision+" float;","#define SHADER_NAME SpriteMaterial","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform float rotation;","uniform vec2 center;","uniform vec2 scale;","uniform vec2 uvOffset;","uniform vec2 uvScale;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","varying float fogDepth;","void main() {","\tvUV = uvOffset + uv * uvScale;","\tvec2 alignedPosition = ( position - center ) * scale;","\tvec2 rotatedPosition;","\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;","\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;","\tvec4 mvPosition;","\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );","\tmvPosition.xy += rotatedPosition;","\tgl_Position = projectionMatrix * mvPosition;","\tfogDepth = - mvPosition.z;","}"].join("\n")),e.shaderSource(i,["precision "+r.precision+" float;","#define SHADER_NAME SpriteMaterial","uniform vec3 color;","uniform sampler2D map;","uniform float opacity;","uniform int fogType;","uniform vec3 fogColor;","uniform float fogDensity;","uniform float fogNear;","uniform float fogFar;","uniform float alphaTest;","varying vec2 vUV;","varying float fogDepth;","void main() {","\tvec4 texture = texture2D( map, vUV );","\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );","\tif ( gl_FragColor.a < alphaTest ) discard;","\tif ( fogType > 0 ) {","\t\tfloat fogFactor = 0.0;","\t\tif ( fogType == 1 ) {","\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );","\t\t} else {","\t\t\tconst float LOG2 = 1.442695;","\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );","\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );","\t\t}","\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );","\t}","}"].join("\n")),e.compileShader(n),e.compileShader(i),e.attachShader(t,n),e.attachShader(t,i),e.linkProgram(t),t}(),l={position:e.getAttribLocation(s,"position"),uv:e.getAttribLocation(s,"uv")},q={uvOffset:e.getUniformLocation(s,"uvOffset"),uvScale:e.getUniformLocation(s,"uvScale"),rotation:e.getUniformLocation(s,"rotation"),center:e.getUniformLocation(s,"center"),scale:e.getUniformLocation(s,"scale"),color:e.getUniformLocation(s,"color"),map:e.getUniformLocation(s,"map"),opacity:e.getUniformLocation(s,"opacity"),modelViewMatrix:e.getUniformLocation(s,"modelViewMatrix"),projectionMatrix:e.getUniformLocation(s,"projectionMatrix"),fogType:e.getUniformLocation(s,"fogType"),fogDensity:e.getUniformLocation(s,"fogDensity"),fogNear:e.getUniformLocation(s,"fogNear"),fogFar:e.getUniformLocation(s,"fogFar"),fogColor:e.getUniformLocation(s,"fogColor"),fogDepth:e.getUniformLocation(s,"fogDepth"),alphaTest:e.getUniformLocation(s,"alphaTest")};var i=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");i.width=8,i.height=8;var h=i.getContext("2d");h.fillStyle="white",h.fillRect(0,0,8,8),c=new Pr(i)}function p(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:e.id-t.id}this.render=function(r,f,g){if(0!==r.length){void 0===s&&d(),n.useProgram(s),n.initAttributes(),n.enableAttribute(l.position),n.enableAttribute(l.uv),n.disableUnusedAttributes(),n.disable(e.CULL_FACE),n.enable(e.BLEND),e.bindBuffer(e.ARRAY_BUFFER,a),e.vertexAttribPointer(l.position,2,e.FLOAT,!1,16,0),e.vertexAttribPointer(l.uv,2,e.FLOAT,!1,16,8),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,o),e.uniformMatrix4fv(q.projectionMatrix,!1,g.projectionMatrix.elements),n.activeTexture(e.TEXTURE0),e.uniform1i(q.map,0);var v=0,x=0,y=f.fog;y?(e.uniform3f(q.fogColor,y.color.r,y.color.g,y.color.b),y.isFog?(e.uniform1f(q.fogNear,y.near),e.uniform1f(q.fogFar,y.far),e.uniform1i(q.fogType,1),v=1,x=1):y.isFogExp2&&(e.uniform1f(q.fogDensity,y.density),e.uniform1i(q.fogType,2),v=2,x=2)):(e.uniform1i(q.fogType,0),v=0,x=0);for(var _=0,b=r.length;_<b;_++){(M=r[_]).modelViewMatrix.multiplyMatrices(g.matrixWorldInverse,M.matrixWorld),M.z=-M.modelViewMatrix.elements[14]}r.sort(p);var w=[],E=[];for(_=0,b=r.length;_<b;_++){var M,T=(M=r[_]).material;if(!1!==T.visible){M.onBeforeRender(t,f,g,void 0,T,void 0),e.uniform1f(q.alphaTest,T.alphaTest),e.uniformMatrix4fv(q.modelViewMatrix,!1,M.modelViewMatrix.elements),M.matrixWorld.decompose(h,u,m),w[0]=m.x,w[1]=m.y,E[0]=M.center.x-.5,E[1]=M.center.y-.5;var S=0;f.fog&&T.fog&&(S=x),v!==S&&(e.uniform1i(q.fogType,S),v=S),null!==T.map?(e.uniform2f(q.uvOffset,T.map.offset.x,T.map.offset.y),e.uniform2f(q.uvScale,T.map.repeat.x,T.map.repeat.y)):(e.uniform2f(q.uvOffset,0,0),e.uniform2f(q.uvScale,1,1)),e.uniform1f(q.opacity,T.opacity),e.uniform3f(q.color,T.color.r,T.color.g,T.color.b),e.uniform1f(q.rotation,T.rotation),e.uniform2fv(q.center,E),e.uniform2fv(q.scale,w),n.setBlending(T.blending,T.blendEquation,T.blendSrc,T.blendDst,T.blendEquationAlpha,T.blendSrcAlpha,T.blendDstAlpha,T.premultipliedAlpha),n.buffers.depth.setTest(T.depthTest),n.buffers.depth.setMask(T.depthWrite),n.buffers.color.setMask(T.colorWrite),i.setTexture2D(T.map||c,0),e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0),M.onAfterRender(t,f,g,void 0,T,void 0)}}n.enable(e.CULL_FACE),n.reset()}}}function Or(t,e,n,i,r,a,o){var s,l="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext,q={};function c(t,e){if(t.width>e||t.height>e){if("data"in t)return void console.warn("THREE.WebGLRenderer: image in DataTexture is too big ("+t.width+"x"+t.height+").");var n=e/Math.max(t.width,t.height),i=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return i.width=Math.floor(t.width*n),i.height=Math.floor(t.height*n),i.getContext("2d").drawImage(t,0,0,t.width,t.height,0,0,i.width,i.height),console.warn("THREE.WebGLRenderer: image is too big ("+t.width+"x"+t.height+"). Resized to "+i.width+"x"+i.height,t),i}return t}function h(t){return ke.isPowerOfTwo(t.width)&&ke.isPowerOfTwo(t.height)}function u(t,e){return t.generateMipmaps&&e&&t.minFilter!==St&&t.minFilter!==Lt}function m(e,n,r,a){t.generateMipmap(e),i.get(n).__maxMipLevel=Math.log(Math.max(r,a))*Math.LOG2E}function d(e){return e===St||e===At||e===Rt?t.NEAREST:t.LINEAR}function p(e){var n=e.target;n.removeEventListener("dispose",p),function(e){var n=i.get(e);if(e.image&&n.__image__webglTextureCube)t.deleteTexture(n.__image__webglTextureCube);else{if(void 0===n.__webglInit)return;t.deleteTexture(n.__webglTexture)}i.remove(e)}(n),n.isVideoTexture&&delete q[n.id],o.memory.textures--}function f(e){var n=e.target;n.removeEventListener("dispose",f),function(e){var n=i.get(e),r=i.get(e.texture);if(!e)return;void 0!==r.__webglTexture&&t.deleteTexture(r.__webglTexture);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLRenderTargetCube)for(var a=0;a<6;a++)t.deleteFramebuffer(n.__webglFramebuffer[a]),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer[a]);else t.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer);i.remove(e.texture),i.remove(e)}(n),o.memory.textures--}function g(e,d){var f=i.get(e);if(e.isVideoTexture&&function(t){var e=t.id,n=o.render.frame;q[e]!==n&&(q[e]=n,t.update())}(e),e.version>0&&f.__version!==e.version){var g=e.image;if(void 0===g)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",e);else{if(!1!==g.complete)return void function(e,i,q){void 0===e.__webglInit&&(e.__webglInit=!0,i.addEventListener("dispose",p),e.__webglTexture=t.createTexture(),o.memory.textures++);n.activeTexture(t.TEXTURE0+q),n.bindTexture(t.TEXTURE_2D,e.__webglTexture),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,i.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,i.unpackAlignment);var d=c(i.image,r.maxTextureSize);(function(t){return t.wrapS!==Mt||t.wrapT!==Mt||t.minFilter!==St&&t.minFilter!==Lt})(i)&&!1===h(d)&&(d=function(t){return t instanceof HTMLImageElement||t instanceof HTMLCanvasElement||t instanceof ImageBitmap?(void 0===s&&(s=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),s.width=ke.floorPowerOfTwo(t.width),s.height=ke.floorPowerOfTwo(t.height),s.getContext("2d").drawImage(t,0,0,s.width,s.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+t.width+"x"+t.height+"). Resized to "+s.width+"x"+s.height,t),s):t}(d));var f=h(d),g=a.convert(i.format),x=a.convert(i.type);v(t.TEXTURE_2D,i,f);var y,_=i.mipmaps;if(i.isDepthTexture){var b=t.DEPTH_COMPONENT;if(i.type===Ft){if(!l)throw new Error("Float Depth Texture only supported in WebGL2.0");b=t.DEPTH_COMPONENT32F}else l&&(b=t.DEPTH_COMPONENT16);i.format===Qt&&b===t.DEPTH_COMPONENT&&i.type!==Ut&&i.type!==Bt&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),i.type=Ut,x=a.convert(i.type)),i.format===Kt&&(b=t.DEPTH_STENCIL,i.type!==kt&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),i.type=kt,x=a.convert(i.type))),n.texImage2D(t.TEXTURE_2D,0,b,d.width,d.height,0,g,x,null)}else if(i.isDataTexture)if(_.length>0&&f){for(var w=0,E=_.length;w<E;w++)y=_[w],n.texImage2D(t.TEXTURE_2D,w,g,y.width,y.height,0,g,x,y.data);i.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else n.texImage2D(t.TEXTURE_2D,0,g,d.width,d.height,0,g,x,d.data),e.__maxMipLevel=0;else if(i.isCompressedTexture){for(var w=0,E=_.length;w<E;w++)y=_[w],i.format!==Xt&&i.format!==Wt?n.getCompressedTextureFormats().indexOf(g)>-1?n.compressedTexImage2D(t.TEXTURE_2D,w,g,y.width,y.height,0,y.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(t.TEXTURE_2D,w,g,y.width,y.height,0,g,x,y.data);e.__maxMipLevel=_.length-1}else if(_.length>0&&f){for(var w=0,E=_.length;w<E;w++)y=_[w],n.texImage2D(t.TEXTURE_2D,w,g,g,x,y);i.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else n.texImage2D(t.TEXTURE_2D,0,g,g,x,d),e.__maxMipLevel=0;u(i,f)&&m(t.TEXTURE_2D,i,d.width,d.height);e.__version=i.version,i.onUpdate&&i.onUpdate(i)}(f,e,d);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",e)}}n.activeTexture(t.TEXTURE0+d),n.bindTexture(t.TEXTURE_2D,f.__webglTexture)}function v(n,o,s){var l;if(s?(t.texParameteri(n,t.TEXTURE_WRAP_S,a.convert(o.wrapS)),t.texParameteri(n,t.TEXTURE_WRAP_T,a.convert(o.wrapT)),t.texParameteri(n,t.TEXTURE_MAG_FILTER,a.convert(o.magFilter)),t.texParameteri(n,t.TEXTURE_MIN_FILTER,a.convert(o.minFilter))):(t.texParameteri(n,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(n,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),o.wrapS===Mt&&o.wrapT===Mt||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",o),t.texParameteri(n,t.TEXTURE_MAG_FILTER,d(o.magFilter)),t.texParameteri(n,t.TEXTURE_MIN_FILTER,d(o.minFilter)),o.minFilter!==St&&o.minFilter!==Lt&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",o)),l=e.get("EXT_texture_filter_anisotropic")){if(o.type===Ft&&null===e.get("OES_texture_float_linear"))return;if(o.type===zt&&null===e.get("OES_texture_half_float_linear"))return;(o.anisotropy>1||i.get(o).__currentAnisotropy)&&(t.texParameterf(n,l.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(o.anisotropy,r.getMaxAnisotropy())),i.get(o).__currentAnisotropy=o.anisotropy)}}function x(e,r,o,s){var l=a.convert(r.texture.format),q=a.convert(r.texture.type);n.texImage2D(s,0,l,r.width,r.height,0,l,q,null),t.bindFramebuffer(t.FRAMEBUFFER,e),t.framebufferTexture2D(t.FRAMEBUFFER,o,s,i.get(r.texture).__webglTexture,0),t.bindFramebuffer(t.FRAMEBUFFER,null)}function y(e,n){t.bindRenderbuffer(t.RENDERBUFFER,e),n.depthBuffer&&!n.stencilBuffer?(t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_COMPONENT16,n.width,n.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,e)):n.depthBuffer&&n.stencilBuffer?(t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_STENCIL,n.width,n.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,e)):t.renderbufferStorage(t.RENDERBUFFER,t.RGBA4,n.width,n.height),t.bindRenderbuffer(t.RENDERBUFFER,null)}function _(e){var n=i.get(e),r=!0===e.isWebGLRenderTargetCube;if(e.depthTexture){if(r)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,n){if(n&&n.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(t.FRAMEBUFFER,e),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),g(n.depthTexture,0);var r=i.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===Qt)t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,r,0);else{if(n.depthTexture.format!==Kt)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,r,0)}}(n.__webglFramebuffer,e)}else if(r){n.__webglDepthbuffer=[];for(var a=0;a<6;a++)t.bindFramebuffer(t.FRAMEBUFFER,n.__webglFramebuffer[a]),n.__webglDepthbuffer[a]=t.createRenderbuffer(),y(n.__webglDepthbuffer[a],e)}else t.bindFramebuffer(t.FRAMEBUFFER,n.__webglFramebuffer),n.__webglDepthbuffer=t.createRenderbuffer(),y(n.__webglDepthbuffer,e);t.bindFramebuffer(t.FRAMEBUFFER,null)}this.setTexture2D=g,this.setTextureCube=function(e,s){var l=i.get(e);if(6===e.image.length)if(e.version>0&&l.__version!==e.version){l.__image__webglTextureCube||(e.addEventListener("dispose",p),l.__image__webglTextureCube=t.createTexture(),o.memory.textures++),n.activeTexture(t.TEXTURE0+s),n.bindTexture(t.TEXTURE_CUBE_MAP,l.__image__webglTextureCube),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,e.flipY);for(var q=e&&e.isCompressedTexture,d=e.image[0]&&e.image[0].isDataTexture,f=[],g=0;g<6;g++)f[g]=q||d?d?e.image[g].image:e.image[g]:c(e.image[g],r.maxCubemapSize);var x=f[0],y=h(x),_=a.convert(e.format),b=a.convert(e.type);for(v(t.TEXTURE_CUBE_MAP,e,y),g=0;g<6;g++)if(q)for(var w,E=f[g].mipmaps,M=0,T=E.length;M<T;M++)w=E[M],e.format!==Xt&&e.format!==Wt?n.getCompressedTextureFormats().indexOf(_)>-1?n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+g,M,_,w.width,w.height,0,w.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+g,M,_,w.width,w.height,0,_,b,w.data);else d?n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,_,f[g].width,f[g].height,0,_,b,f[g].data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,_,_,b,f[g]);l.__maxMipLevel=q?E.length-1:0,u(e,y)&&m(t.TEXTURE_CUBE_MAP,e,x.width,x.height),l.__version=e.version,e.onUpdate&&e.onUpdate(e)}else n.activeTexture(t.TEXTURE0+s),n.bindTexture(t.TEXTURE_CUBE_MAP,l.__image__webglTextureCube)},this.setTextureCubeDynamic=function(e,r){n.activeTexture(t.TEXTURE0+r),n.bindTexture(t.TEXTURE_CUBE_MAP,i.get(e).__webglTexture)},this.setupRenderTarget=function(e){var r=i.get(e),a=i.get(e.texture);e.addEventListener("dispose",f),a.__webglTexture=t.createTexture(),o.memory.textures++;var s=!0===e.isWebGLRenderTargetCube,l=h(e);if(s){r.__webglFramebuffer=[];for(var q=0;q<6;q++)r.__webglFramebuffer[q]=t.createFramebuffer()}else r.__webglFramebuffer=t.createFramebuffer();if(s){for(n.bindTexture(t.TEXTURE_CUBE_MAP,a.__webglTexture),v(t.TEXTURE_CUBE_MAP,e.texture,l),q=0;q<6;q++)x(r.__webglFramebuffer[q],e,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+q);u(e.texture,l)&&m(t.TEXTURE_CUBE_MAP,e.texture,e.width,e.height),n.bindTexture(t.TEXTURE_CUBE_MAP,null)}else n.bindTexture(t.TEXTURE_2D,a.__webglTexture),v(t.TEXTURE_2D,e.texture,l),x(r.__webglFramebuffer,e,t.COLOR_ATTACHMENT0,t.TEXTURE_2D),u(e.texture,l)&&m(t.TEXTURE_2D,e.texture,e.width,e.height),n.bindTexture(t.TEXTURE_2D,null);e.depthBuffer&&_(e)},this.updateRenderTargetMipmap=function(e){var r=e.texture;if(u(r,h(e))){var a=e.isWebGLRenderTargetCube?t.TEXTURE_CUBE_MAP:t.TEXTURE_2D,o=i.get(r).__webglTexture;n.bindTexture(a,o),m(a,r,e.width,e.height),n.bindTexture(a,null)}}}function Ir(t,e){return{convert:function(n){var i;if(n===Et)return t.REPEAT;if(n===Mt)return t.CLAMP_TO_EDGE;if(n===Tt)return t.MIRRORED_REPEAT;if(n===St)return t.NEAREST;if(n===At)return t.NEAREST_MIPMAP_NEAREST;if(n===Rt)return t.NEAREST_MIPMAP_LINEAR;if(n===Lt)return t.LINEAR;if(n===Pt)return t.LINEAR_MIPMAP_NEAREST;if(n===Ct)return t.LINEAR_MIPMAP_LINEAR;if(n===Ot)return t.UNSIGNED_BYTE;if(n===Ht)return t.UNSIGNED_SHORT_4_4_4_4;if(n===Gt)return t.UNSIGNED_SHORT_5_5_5_1;if(n===Vt)return t.UNSIGNED_SHORT_5_6_5;if(n===It)return t.BYTE;if(n===Nt)return t.SHORT;if(n===Ut)return t.UNSIGNED_SHORT;if(n===Dt)return t.INT;if(n===Bt)return t.UNSIGNED_INT;if(n===Ft)return t.FLOAT;if(n===zt&&null!==(i=e.get("OES_texture_half_float")))return i.HALF_FLOAT_OES;if(n===jt)return t.ALPHA;if(n===Wt)return t.RGB;if(n===Xt)return t.RGBA;if(n===Yt)return t.LUMINANCE;if(n===Zt)return t.LUMINANCE_ALPHA;if(n===Qt)return t.DEPTH_COMPONENT;if(n===Kt)return t.DEPTH_STENCIL;if(n===B)return t.FUNC_ADD;if(n===F)return t.FUNC_SUBTRACT;if(n===z)return t.FUNC_REVERSE_SUBTRACT;if(n===V)return t.ZERO;if(n===k)return t.ONE;if(n===j)return t.SRC_COLOR;if(n===W)return t.ONE_MINUS_SRC_COLOR;if(n===X)return t.SRC_ALPHA;if(n===Y)return t.ONE_MINUS_SRC_ALPHA;if(n===Z)return t.DST_ALPHA;if(n===J)return t.ONE_MINUS_DST_ALPHA;if(n===Q)return t.DST_COLOR;if(n===K)return t.ONE_MINUS_DST_COLOR;if(n===$)return t.SRC_ALPHA_SATURATE;if((n===$t||n===te||n===ee||n===ne)&&null!==(i=e.get("WEBGL_compressed_texture_s3tc"))){if(n===$t)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===te)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===ee)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===ne)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((n===ie||n===re||n===ae||n===oe)&&null!==(i=e.get("WEBGL_compressed_texture_pvrtc"))){if(n===ie)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===re)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===ae)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===oe)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===se&&null!==(i=e.get("WEBGL_compressed_texture_etc1")))return i.COMPRESSED_RGB_ETC1_WEBGL;if((n===le||n===qe||n===ce||n===he||n===ue||n===me||n===de||n===pe||n===fe||n===ge||n===ve||n===xe||n===ye||n===_e)&&null!==(i=e.get("WEBGL_compressed_texture_astc")))return n;if((n===H||n===G)&&null!==(i=e.get("EXT_blend_minmax"))){if(n===H)return i.MIN_EXT;if(n===G)return i.MAX_EXT}return n===kt&&null!==(i=e.get("WEBGL_depth_texture"))?i.UNSIGNED_INT_24_8_WEBGL:0}}}function Nr(t,e,n,i){Ln.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==i?i:2e3,this.focus=10,this.aspect=void 0!==e?e:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function Ur(t){Nr.call(this),this.cameras=t||[]}function Dr(t){var e=this,n=null,i=null,r=null,a=new We,o=new We;"undefined"!=typeof window&&"VRFrameData"in window&&(i=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",f,!1));var s=new We,l=new Xe,q=new Ye,c=new Nr;c.bounds=new an(0,0,.5,1),c.layers.enable(1);var h=new Nr;h.bounds=new an(.5,0,.5,1),h.layers.enable(2);var u,m,d=new Ur([c,h]);function p(){return null!==n&&!0===n.isPresenting}function f(){if(p()){var i=n.getEyeParameters("left"),r=i.renderWidth,a=i.renderHeight;m=t.getPixelRatio(),u=t.getSize(),t.setDrawingBufferSize(2*r,a,1)}else e.enabled&&t.setDrawingBufferSize(u.width,u.height,m)}d.layers.enable(1),d.layers.enable(2),this.enabled=!1,this.userHeight=1.6,this.getDevice=function(){return n},this.setDevice=function(t){void 0!==t&&(n=t)},this.setPoseTarget=function(t){void 0!==t&&(r=t)},this.getCamera=function(t){if(null===n)return t;n.depthNear=t.near,n.depthFar=t.far,n.getFrameData(i);var u=n.stageParameters;u?a.fromArray(u.sittingToStandingTransform):a.makeTranslation(0,e.userHeight,0);var m=i.pose,p=null!==r?r:t;if(p.matrix.copy(a),p.matrix.decompose(p.position,p.quaternion,p.scale),null!==m.orientation&&(l.fromArray(m.orientation),p.quaternion.multiply(l)),null!==m.position&&(l.setFromRotationMatrix(a),q.fromArray(m.position),q.applyQuaternion(l),p.position.add(q)),p.updateMatrixWorld(),!1===n.isPresenting)return t;c.near=t.near,h.near=t.near,c.far=t.far,h.far=t.far,d.matrixWorld.copy(t.matrixWorld),d.matrixWorldInverse.copy(t.matrixWorldInverse),c.matrixWorldInverse.fromArray(i.leftViewMatrix),h.matrixWorldInverse.fromArray(i.rightViewMatrix),o.getInverse(a),c.matrixWorldInverse.multiply(o),h.matrixWorldInverse.multiply(o);var f=p.parent;null!==f&&(s.getInverse(f.matrixWorld),c.matrixWorldInverse.multiply(s),h.matrixWorldInverse.multiply(s)),c.matrixWorld.getInverse(c.matrixWorldInverse),h.matrixWorld.getInverse(h.matrixWorldInverse),c.projectionMatrix.fromArray(i.leftProjectionMatrix),h.projectionMatrix.fromArray(i.rightProjectionMatrix),d.projectionMatrix.copy(c.projectionMatrix);var g=n.getLayers();if(g.length){var v=g[0];null!==v.leftBounds&&4===v.leftBounds.length&&c.bounds.fromArray(v.leftBounds),null!==v.rightBounds&&4===v.rightBounds.length&&h.bounds.fromArray(v.rightBounds)}return d},this.getStandingMatrix=function(){return a},this.submitFrame=function(){p()&&n.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",f)}}function Br(t){console.log("THREE.WebGLRenderer",m);var e=void 0!==(t=t||{}).canvas?t.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==t.context?t.context:null,i=void 0!==t.alpha&&t.alpha,r=void 0===t.depth||t.depth,a=void 0===t.stencil||t.stencil,o=void 0!==t.antialias&&t.antialias,s=void 0===t.premultipliedAlpha||t.premultipliedAlpha,l=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,q=void 0!==t.powerPreference?t.powerPreference:"default",c=null,h=null;this.domElement=e,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=ut,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var u,d,v,x,y,_,b,w,E,S,A,L,P,B,F,z,H,G,V,k=this,j=!1,W=null,X=null,Y=-1,Z="",J=null,Q=null,K=new an,$=new an,lt=null,qt=0,ct=e.width,ht=e.height,mt=1,dt=new an(0,0,ct,ht),pt=new an(0,0,ct,ht),ft=!1,gt=new un,vt=new function(){var t=this,e=null,n=0,i=!1,r=!1,a=new hn,o=new Ze,s={value:null,needsUpdate:!1};function l(){s.value!==e&&(s.value=e,s.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function q(e,n,i,r){var l=null!==e?e.length:0,q=null;if(0!==l){if(q=s.value,!0!==r||null===q){var c=i+4*l,h=n.matrixWorldInverse;o.getNormalMatrix(h),(null===q||q.length<c)&&(q=new Float32Array(c));for(var u=0,m=i;u!==l;++u,m+=4)a.copy(e[u]).applyMatrix4(h,o),a.normal.toArray(q,m),q[m+3]=a.constant}s.value=q,s.needsUpdate=!0}return t.numPlanes=l,q}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(t,r,a){var o=0!==t.length||r||0!==n||i;return i=r,e=q(t,a,0),n=t.length,o},this.beginShadows=function(){r=!0,q(null)},this.endShadows=function(){r=!1,l()},this.setState=function(t,a,o,c,h,u){if(!i||null===t||0===t.length||r&&!o)r?q(null):l();else{var m=r?0:n,d=4*m,p=h.clippingState||null;s.value=p,p=q(t,c,d,u);for(var f=0;f!==d;++f)p[f]=e[f];h.clippingState=p,this.numIntersection=a?this.numPlanes:0,this.numPlanes+=m}}},xt=!1,yt=!1,_t=new We,bt=new Ye;function wt(){return null===W?mt:1}try{var Et={alpha:i,depth:r,stencil:a,antialias:o,premultipliedAlpha:s,preserveDrawingBuffer:l,powerPreference:q};if(e.addEventListener("webglcontextlost",At,!1),e.addEventListener("webglcontextrestored",Rt,!1),null===(u=n||e.getContext("webgl",Et)||e.getContext("experimental-webgl",Et)))throw null!==e.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===u.getShaderPrecisionFormat&&(u.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){console.error("THREE.WebGLRenderer: "+t.message)}function Mt(){(d=new function(t){var e={};return{get:function(n){if(void 0!==e[n])return e[n];var i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}return null===i&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),e[n]=i,i}}}(u)).get("WEBGL_depth_texture"),d.get("OES_texture_float"),d.get("OES_texture_float_linear"),d.get("OES_texture_half_float"),d.get("OES_texture_half_float_linear"),d.get("OES_standard_derivatives"),d.get("OES_element_index_uint"),d.get("ANGLE_instanced_arrays"),V=new Ir(u,d),v=new function(t,e,n){var i;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}var a=void 0!==n.precision?n.precision:"highp",o=r(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);var s=!0===n.logarithmicDepthBuffer,l=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),q=t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS),c=t.getParameter(t.MAX_TEXTURE_SIZE),h=t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),u=t.getParameter(t.MAX_VERTEX_ATTRIBS),m=t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),d=t.getParameter(t.MAX_VARYING_VECTORS),p=t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),f=q>0,g=!!e.get("OES_texture_float");return{getMaxAnisotropy:function(){if(void 0!==i)return i;var n=e.get("EXT_texture_filter_anisotropic");return i=null!==n?t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:r,precision:a,logarithmicDepthBuffer:s,maxTextures:l,maxVertexTextures:q,maxTextureSize:c,maxCubemapSize:h,maxAttributes:u,maxVertexUniforms:m,maxVaryings:d,maxFragmentUniforms:p,vertexTextures:f,floatFragmentTextures:g,floatVertexTextures:f&&g}}(u,d,t),(x=new function(t,e,n){var i=new function(){var e=!1,n=new an,i=null,r=new an(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,a,o,s){!0===s&&(e*=o,i*=o,a*=o),n.set(e,i,a,o),!1===r.equals(n)&&(t.clearColor(e,i,a,o),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}},r=new function(){var e=!1,n=null,i=null,r=null;return{setTest:function(e){e?X(t.DEPTH_TEST):Y(t.DEPTH_TEST)},setMask:function(i){n===i||e||(t.depthMask(i),n=i)},setFunc:function(e){if(i!==e){if(e)switch(e){case tt:t.depthFunc(t.NEVER);break;case et:t.depthFunc(t.ALWAYS);break;case nt:t.depthFunc(t.LESS);break;case it:t.depthFunc(t.LEQUAL);break;case rt:t.depthFunc(t.EQUAL);break;case at:t.depthFunc(t.GEQUAL);break;case ot:t.depthFunc(t.GREATER);break;case st:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}else t.depthFunc(t.LEQUAL);i=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,i=null,r=null}}},a=new function(){var e=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,q=null;return{setTest:function(e){e?X(t.STENCIL_TEST):Y(t.STENCIL_TEST)},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,o){i===e&&r===n&&a===o||(t.stencilFunc(e,n,o),i=e,r=n,a=o)},setOp:function(e,n,i){o===e&&s===n&&l===i||(t.stencilOp(e,n,i),o=e,s=n,l=i)},setLocked:function(t){e=t},setClear:function(e){q!==e&&(t.clearStencil(e),q=e)},reset:function(){e=!1,n=null,i=null,r=null,a=null,o=null,s=null,l=null,q=null}}},o=t.getParameter(t.MAX_VERTEX_ATTRIBS),s=new Uint8Array(o),l=new Uint8Array(o),q=new Uint8Array(o),c={},h=null,u=null,m=null,d=null,v=null,x=null,y=null,_=null,b=null,w=!1,E=null,S=null,A=null,R=null,L=null,P=t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS),B=!1,F=0,z=t.getParameter(t.VERSION);-1!==z.indexOf("WebGL")?(F=parseFloat(/^WebGL\ ([0-9])/.exec(z)[1]),B=F>=1):-1!==z.indexOf("OpenGL ES")&&(F=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(z)[1]),B=F>=2);var H=null,G={},V=new an,k=new an;function j(e,n,i){var r=new Uint8Array(4),a=t.createTexture();t.bindTexture(e,a),t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.NEAREST);for(var o=0;o<i;o++)t.texImage2D(n+o,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,r);return a}var W={};function X(e){!0!==c[e]&&(t.enable(e),c[e]=!0)}function Y(e){!1!==c[e]&&(t.disable(e),c[e]=!1)}function Z(e,i,r,a,o,s,l,q){if(e!==C?X(t.BLEND):Y(t.BLEND),e!==D){if(e!==m||q!==w)switch(e){case I:q?(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.ONE,t.ONE,t.ONE,t.ONE)):(t.blendEquation(t.FUNC_ADD),t.blendFunc(t.SRC_ALPHA,t.ONE));break;case N:q?(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.ZERO,t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ONE_MINUS_SRC_ALPHA)):(t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ZERO,t.ONE_MINUS_SRC_COLOR));break;case U:q?(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.ZERO,t.SRC_COLOR,t.ZERO,t.SRC_ALPHA)):(t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ZERO,t.SRC_COLOR));break;default:q?(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA)):(t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA))}d=null,v=null,x=null,y=null,_=null,b=null}else o=o||i,s=s||r,l=l||a,i===d&&o===y||(t.blendEquationSeparate(n.convert(i),n.convert(o)),d=i,y=o),r===v&&a===x&&s===_&&l===b||(t.blendFuncSeparate(n.convert(r),n.convert(a),n.convert(s),n.convert(l)),v=r,x=a,_=s,b=l);m=e,w=q}function J(e){E!==e&&(e?t.frontFace(t.CW):t.frontFace(t.CCW),E=e)}function Q(e){e!==p?(X(t.CULL_FACE),e!==S&&(e===f?t.cullFace(t.BACK):e===g?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):Y(t.CULL_FACE),S=e}function K(e,n,i){e?(X(t.POLYGON_OFFSET_FILL),R===n&&L===i||(t.polygonOffset(n,i),R=n,L=i)):Y(t.POLYGON_OFFSET_FILL)}function $(e){void 0===e&&(e=t.TEXTURE0+P-1),H!==e&&(t.activeTexture(e),H=e)}return W[t.TEXTURE_2D]=j(t.TEXTURE_2D,t.TEXTURE_2D,1),W[t.TEXTURE_CUBE_MAP]=j(t.TEXTURE_CUBE_MAP,t.TEXTURE_CUBE_MAP_POSITIVE_X,6),i.setClear(0,0,0,1),r.setClear(1),a.setClear(0),X(t.DEPTH_TEST),r.setFunc(it),J(!1),Q(f),X(t.CULL_FACE),X(t.BLEND),Z(O),{buffers:{color:i,depth:r,stencil:a},initAttributes:function(){for(var t=0,e=s.length;t<e;t++)s[t]=0},enableAttribute:function(n){s[n]=1,0===l[n]&&(t.enableVertexAttribArray(n),l[n]=1),0!==q[n]&&(e.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(n,0),q[n]=0)},enableAttributeAndDivisor:function(n,i){s[n]=1,0===l[n]&&(t.enableVertexAttribArray(n),l[n]=1),q[n]!==i&&(e.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(n,i),q[n]=i)},disableUnusedAttributes:function(){for(var e=0,n=l.length;e!==n;++e)l[e]!==s[e]&&(t.disableVertexAttribArray(e),l[e]=0)},enable:X,disable:Y,getCompressedTextureFormats:function(){if(null===h&&(h=[],e.get("WEBGL_compressed_texture_pvrtc")||e.get("WEBGL_compressed_texture_s3tc")||e.get("WEBGL_compressed_texture_etc1")||e.get("WEBGL_compressed_texture_astc")))for(var n=t.getParameter(t.COMPRESSED_TEXTURE_FORMATS),i=0;i<n.length;i++)h.push(n[i]);return h},useProgram:function(e){return u!==e&&(t.useProgram(e),u=e,!0)},setBlending:Z,setMaterial:function(e,n){e.side===T?Y(t.CULL_FACE):X(t.CULL_FACE);var a=e.side===M;n&&(a=!a),J(a),!0===e.transparent?Z(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha):Z(C),r.setFunc(e.depthFunc),r.setTest(e.depthTest),r.setMask(e.depthWrite),i.setMask(e.colorWrite),K(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)},setFlipSided:J,setCullFace:Q,setLineWidth:function(e){e!==A&&(B&&t.lineWidth(e),A=e)},setPolygonOffset:K,setScissorTest:function(e){e?X(t.SCISSOR_TEST):Y(t.SCISSOR_TEST)},activeTexture:$,bindTexture:function(e,n){null===H&&$();var i=G[H];void 0===i&&(i={type:void 0,texture:void 0},G[H]=i),i.type===e&&i.texture===n||(t.bindTexture(e,n||W[e]),i.type=e,i.texture=n)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===V.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),V.copy(e))},viewport:function(e){!1===k.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),k.copy(e))},reset:function(){for(var e=0;e<l.length;e++)1===l[e]&&(t.disableVertexAttribArray(e),l[e]=0);c={},h=null,H=null,G={},u=null,m=null,E=null,S=null,i.reset(),r.reset(),a.reset()}}}(u,d,V)).scissor($.copy(pt).multiplyScalar(mt)),x.viewport(K.copy(dt).multiplyScalar(mt)),y=new function(t){var e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(n,i,r){switch(r=r||1,e.calls++,i){case t.TRIANGLES:e.triangles+=r*(n/3);break;case t.TRIANGLE_STRIP:case t.TRIANGLE_FAN:e.triangles+=r*(n-2);break;case t.LINES:e.lines+=r*(n/2);break;case t.LINE_STRIP:e.lines+=r*(n-1);break;case t.LINE_LOOP:e.lines+=r*n;break;case t.POINTS:e.points+=r*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}(u),_=new function(){var t=new WeakMap;return{get:function(e){var n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,i){t.get(e)[n]=i},dispose:function(){t=new WeakMap}}},b=new Or(u,d,x,_,v,V,y),w=new _n(u),E=new function(t,e,n){var i={},r={};function a(t){var o=t.target,s=i[o.id];for(var l in null!==s.index&&e.remove(s.index),s.attributes)e.remove(s.attributes[l]);o.removeEventListener("dispose",a),delete i[o.id];var q=r[o.id];q&&(e.remove(q),delete r[o.id]),(q=r[s.id])&&(e.remove(q),delete r[s.id]),n.memory.geometries--}return{get:function(t,e){var r=i[e.id];return r||(e.addEventListener("dispose",a),e.isBufferGeometry?r=e:e.isGeometry&&(void 0===e._bufferGeometry&&(e._bufferGeometry=(new Jn).setFromObject(t)),r=e._bufferGeometry),i[e.id]=r,n.memory.geometries++,r)},update:function(n){var i=n.index,r=n.attributes;for(var a in null!==i&&e.update(i,t.ELEMENT_ARRAY_BUFFER),r)e.update(r[a],t.ARRAY_BUFFER);var o=n.morphAttributes;for(var a in o)for(var s=o[a],l=0,q=s.length;l<q;l++)e.update(s[l],t.ARRAY_BUFFER)},getWireframeAttribute:function(n){var i=r[n.id];if(i)return i;var a,o=[],s=n.index,l=n.attributes;if(null!==s)for(var q=0,c=(a=s.array).length;q<c;q+=3){var h=a[q+0],u=a[q+1],m=a[q+2];o.push(h,u,u,m,m,h)}else for(q=0,c=(a=l.position.array).length/3-1;q<c;q+=3)h=q+0,u=q+1,m=q+2,o.push(h,u,u,m,m,h);return i=new(Yn(o)>65535?kn:Gn)(o,1),e.update(i,t.ELEMENT_ARRAY_BUFFER),r[n.id]=i,i}}}(u,w,y),S=new function(t,e){var n={};return{update:function(i){var r=e.render.frame,a=i.geometry,o=t.get(i,a);return n[o.id]!==r&&(a.isGeometry&&o.updateFromObject(i),t.update(o),n[o.id]=r),o},dispose:function(){n={}}}}(E,y),F=new function(t){var e={},n=new Float32Array(8);return{update:function(i,r,a,o){var s=i.morphTargetInfluences,l=s.length,q=e[r.id];if(void 0===q){q=[];for(var c=0;c<l;c++)q[c]=[c,0];e[r.id]=q}var h=a.morphTargets&&r.morphAttributes.position,u=a.morphNormals&&r.morphAttributes.normal;for(c=0;c<l;c++)0!==(m=q[c])[1]&&(h&&r.removeAttribute("morphTarget"+c),u&&r.removeAttribute("morphNormal"+c));for(c=0;c<l;c++)(m=q[c])[0]=c,m[1]=s[c];for(q.sort(fi),c=0;c<8;c++){var m;if(m=q[c]){var d=m[0],p=m[1];if(p){h&&r.addAttribute("morphTarget"+c,h[d]),u&&r.addAttribute("morphNormal"+c,u[d]),n[c]=p;continue}}n[c]=0}o.getUniforms().setValue(t,"morphTargetInfluences",n)}}}(u),A=new mr(k,d,v),L=new fr,P=new Sr,B=new function(t,e,n,i){var r,a,o,s=new gn(0),l=0;function q(t,n){e.buffers.color.setClear(t.r,t.g,t.b,n,i)}return{getClearColor:function(){return s},setClearColor:function(t,e){s.set(t),q(s,l=void 0!==e?e:1)},getClearAlpha:function(){return l},setClearAlpha:function(t){q(s,l=t)},render:function(e,i,c,h){var u=i.background;null===u?q(s,l):u&&u.isColor&&(q(u,1),h=!0),(t.autoClear||h)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),u&&u.isCubeTexture?(void 0===o&&((o=new pi(new Kn(1,1,1),new hi({uniforms:yn.cube.uniforms,vertexShader:yn.cube.vertexShader,fragmentShader:yn.cube.fragmentShader,side:M,depthTest:!0,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),o.geometry.removeAttribute("uv"),o.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},n.update(o.geometry)),o.material.uniforms.tCube.value=u,e.push(o,o.geometry,o.material,0,null)):u&&u.isTexture&&(void 0===r&&(r=new Pn(-1,1,1,-1,0,1),a=new pi(new ti(2,2),new ci({depthTest:!1,depthWrite:!1,fog:!1})),n.update(a.geometry)),a.material.map=u,t.renderBufferDirect(r,null,a.geometry,a.material,a,null))}}}(k,x,E,s),z=new function(t,e,n){var i;this.setMode=function(t){i=t},this.render=function(e,r){t.drawArrays(i,e,r),n.update(r,i)},this.renderInstances=function(t,r,a){var o=e.get("ANGLE_instanced_arrays");if(null!==o){var s=t.attributes.position;s.isInterleavedBufferAttribute?(a=s.data.count,o.drawArraysInstancedANGLE(i,0,a,t.maxInstancedCount)):o.drawArraysInstancedANGLE(i,r,a,t.maxInstancedCount),n.update(a,i,t.maxInstancedCount)}else console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.")}}(u,d,y),H=new function(t,e,n){var i,r,a;this.setMode=function(t){i=t},this.setIndex=function(t){r=t.type,a=t.bytesPerElement},this.render=function(e,o){t.drawElements(i,o,r,e*a),n.update(o,i)},this.renderInstances=function(t,o,s){var l=e.get("ANGLE_instanced_arrays");null!==l?(l.drawElementsInstancedANGLE(i,s,r,o*a,t.maxInstancedCount),n.update(s,i,t.maxInstancedCount)):console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.")}}(u,d,y),G=new Cr(k,u,x,b,v),y.programs=A.programs,k.context=u,k.capabilities=v,k.extensions=d,k.properties=_,k.renderLists=L,k.state=x,k.info=y}Mt();var Tt=new Dr(k);this.vr=Tt;var St=new Lr(k,S,v.maxTextureSize);function At(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),j=!0}function Rt(){console.log("THREE.WebGLRenderer: Context Restored."),j=!1,Mt()}function Lt(t){var e=t.target;e.removeEventListener("dispose",Lt),function(t){Pt(t),_.remove(t)}(e)}function Pt(t){var e=_.get(t).program;t.program=void 0,void 0!==e&&A.releaseProgram(e)}this.shadowMap=St,this.getContext=function(){return u},this.getContextAttributes=function(){return u.getContextAttributes()},this.forceContextLoss=function(){var t=d.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){var t=d.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return mt},this.setPixelRatio=function(t){void 0!==t&&(mt=t,this.setSize(ct,ht,!1))},this.getSize=function(){return{width:ct,height:ht}},this.setSize=function(t,n,i){var r=Tt.getDevice();r&&r.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(ct=t,ht=n,e.width=t*mt,e.height=n*mt,!1!==i&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(){return{width:ct*mt,height:ht*mt}},this.setDrawingBufferSize=function(t,n,i){ct=t,ht=n,mt=i,e.width=t*i,e.height=n*i,this.setViewport(0,0,t,n)},this.getCurrentViewport=function(){return K},this.setViewport=function(t,e,n,i){dt.set(t,ht-e-i,n,i),x.viewport(K.copy(dt).multiplyScalar(mt))},this.setScissor=function(t,e,n,i){pt.set(t,ht-e-i,n,i),x.scissor($.copy(pt).multiplyScalar(mt))},this.setScissorTest=function(t){x.setScissorTest(ft=t)},this.getClearColor=function(){return B.getClearColor()},this.setClearColor=function(){B.setClearColor.apply(B,arguments)},this.getClearAlpha=function(){return B.getClearAlpha()},this.setClearAlpha=function(){B.setClearAlpha.apply(B,arguments)},this.clear=function(t,e,n){var i=0;(void 0===t||t)&&(i|=u.COLOR_BUFFER_BIT),(void 0===e||e)&&(i|=u.DEPTH_BUFFER_BIT),(void 0===n||n)&&(i|=u.STENCIL_BUFFER_BIT),u.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(t,e,n,i){this.setRenderTarget(t),this.clear(e,n,i)},this.dispose=function(){e.removeEventListener("webglcontextlost",At,!1),e.removeEventListener("webglcontextrestored",Rt,!1),L.dispose(),P.dispose(),_.dispose(),S.dispose(),Tt.dispose(),Ut()},this.renderBufferImmediate=function(t,e,n){x.initAttributes();var i=_.get(t);t.hasPositions&&!i.position&&(i.position=u.createBuffer()),t.hasNormals&&!i.normal&&(i.normal=u.createBuffer()),t.hasUvs&&!i.uv&&(i.uv=u.createBuffer()),t.hasColors&&!i.color&&(i.color=u.createBuffer());var r=e.getAttributes();if(t.hasPositions&&(u.bindBuffer(u.ARRAY_BUFFER,i.position),u.bufferData(u.ARRAY_BUFFER,t.positionArray,u.DYNAMIC_DRAW),x.enableAttribute(r.position),u.vertexAttribPointer(r.position,3,u.FLOAT,!1,0,0)),t.hasNormals){if(u.bindBuffer(u.ARRAY_BUFFER,i.normal),!n.isMeshPhongMaterial&&!n.isMeshStandardMaterial&&!n.isMeshNormalMaterial&&!0===n.flatShading)for(var a=0,o=3*t.count;a<o;a+=9){var s=t.normalArray,l=(s[a+0]+s[a+3]+s[a+6])/3,q=(s[a+1]+s[a+4]+s[a+7])/3,c=(s[a+2]+s[a+5]+s[a+8])/3;s[a+0]=l,s[a+1]=q,s[a+2]=c,s[a+3]=l,s[a+4]=q,s[a+5]=c,s[a+6]=l,s[a+7]=q,s[a+8]=c}u.bufferData(u.ARRAY_BUFFER,t.normalArray,u.DYNAMIC_DRAW),x.enableAttribute(r.normal),u.vertexAttribPointer(r.normal,3,u.FLOAT,!1,0,0)}t.hasUvs&&n.map&&(u.bindBuffer(u.ARRAY_BUFFER,i.uv),u.bufferData(u.ARRAY_BUFFER,t.uvArray,u.DYNAMIC_DRAW),x.enableAttribute(r.uv),u.vertexAttribPointer(r.uv,2,u.FLOAT,!1,0,0)),t.hasColors&&n.vertexColors!==R&&(u.bindBuffer(u.ARRAY_BUFFER,i.color),u.bufferData(u.ARRAY_BUFFER,t.colorArray,u.DYNAMIC_DRAW),x.enableAttribute(r.color),u.vertexAttribPointer(r.color,3,u.FLOAT,!1,0,0)),x.disableUnusedAttributes(),u.drawArrays(u.TRIANGLES,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,n,i,r,a){var o=r.isMesh&&r.matrixWorld.determinant()<0;x.setMaterial(i,o);var s=kt(t,e,i,r),l=n.id+"_"+s.id+"_"+(!0===i.wireframe),q=!1;l!==Z&&(Z=l,q=!0),r.morphTargetInfluences&&(F.update(r,n,i,s),q=!0);var c,h=n.index,m=n.attributes.position,p=1;!0===i.wireframe&&(h=E.getWireframeAttribute(n),p=2);var f=z;null!==h&&(c=w.get(h),(f=H).setIndex(c)),q&&(!function(t,e,n){if(n&&n.isInstancedBufferGeometry&&null===d.get("ANGLE_instanced_arrays"))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");x.initAttributes();var i=n.attributes,r=e.getAttributes(),a=t.defaultAttributeValues;for(var o in r){var s=r[o];if(s>=0){var l=i[o];if(void 0!==l){var q=l.normalized,c=l.itemSize,h=w.get(l);if(void 0===h)continue;var m=h.buffer,p=h.type,f=h.bytesPerElement;if(l.isInterleavedBufferAttribute){var g=l.data,v=g.stride,y=l.offset;g&&g.isInstancedInterleavedBuffer?(x.enableAttributeAndDivisor(s,g.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=g.meshPerAttribute*g.count)):x.enableAttribute(s),u.bindBuffer(u.ARRAY_BUFFER,m),u.vertexAttribPointer(s,c,p,q,v*f,y*f)}else l.isInstancedBufferAttribute?(x.enableAttributeAndDivisor(s,l.meshPerAttribute),void 0===n.maxInstancedCount&&(n.maxInstancedCount=l.meshPerAttribute*l.count)):x.enableAttribute(s),u.bindBuffer(u.ARRAY_BUFFER,m),u.vertexAttribPointer(s,c,p,q,0,0)}else if(void 0!==a){var _=a[o];if(void 0!==_)switch(_.length){case 2:u.vertexAttrib2fv(s,_);break;case 3:u.vertexAttrib3fv(s,_);break;case 4:u.vertexAttrib4fv(s,_);break;default:u.vertexAttrib1fv(s,_)}}}}x.disableUnusedAttributes()}(i,s,n),null!==h&&u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,c.buffer));var g=1/0;null!==h?g=h.count:void 0!==m&&(g=m.count);var v=n.drawRange.start*p,y=n.drawRange.count*p,_=null!==a?a.start*p:0,b=null!==a?a.count*p:1/0,M=Math.max(v,_),T=Math.min(g,v+y,_+b)-1,S=Math.max(0,T-M+1);if(0!==S){if(r.isMesh)if(!0===i.wireframe)x.setLineWidth(i.wireframeLinewidth*wt()),f.setMode(u.LINES);else switch(r.drawMode){case Pe:f.setMode(u.TRIANGLES);break;case Ce:f.setMode(u.TRIANGLE_STRIP);break;case Oe:f.setMode(u.TRIANGLE_FAN)}else if(r.isLine){var A=i.linewidth;void 0===A&&(A=1),x.setLineWidth(A*wt()),r.isLineSegments?f.setMode(u.LINES):r.isLineLoop?f.setMode(u.LINE_LOOP):f.setMode(u.LINE_STRIP)}else r.isPoints&&f.setMode(u.POINTS);n&&n.isInstancedBufferGeometry?n.maxInstancedCount>0&&f.renderInstances(n,M,S):f.render(M,S)}},this.compile=function(t,e){(h=P.get(t,e)).init(),t.traverse(function(t){t.isLight&&(h.pushLight(t),t.castShadow&&h.pushShadow(t))}),h.setupLights(e),t.traverse(function(e){if(e.material)if(Array.isArray(e.material))for(var n=0;n<e.material.length;n++)Vt(e.material[n],t.fog,e);else Vt(e.material,t.fog,e)})};var Ct,It=!1,Nt=null;function Ut(){It=!1}function Dt(){var t=Tt.getDevice();t&&t.isPresenting?t.requestAnimationFrame(Bt):window.requestAnimationFrame(Bt)}function Bt(t){!1!==It&&(Nt(t),Dt())}function Ht(t,e,n,i){for(var r=0,a=t.length;r<a;r++){var o=t[r],s=o.object,l=o.geometry,q=void 0===i?o.material:i,c=o.group;if(n.isArrayCamera){Q=n;for(var h=n.cameras,u=0,m=h.length;u<m;u++){var d=h[u];if(s.layers.test(d.layers)){var p=d.bounds,f=p.x*ct,g=p.y*ht,v=p.z*ct,y=p.w*ht;x.viewport(K.set(f,g,v,y).multiplyScalar(mt)),Gt(s,e,d,l,q,c)}}}else Q=null,Gt(s,e,n,l,q,c)}}function Gt(t,e,n,i,r,a){if(t.onBeforeRender(k,e,n,i,r,a),h=P.get(e,Q||n),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){var o=t.isMesh&&t.matrixWorld.determinant()<0;x.setMaterial(r,o);var s=kt(n,e.fog,r,t);Z="",function(t,e,n){t.render(function(t){k.renderBufferImmediate(t,e,n)})}(t,s,r)}else k.renderBufferDirect(n,e.fog,i,r,t,a);t.onAfterRender(k,e,n,i,r,a),h=P.get(e,Q||n)}function Vt(t,e,n){var i=_.get(t),r=h.state.lights,a=h.state.shadowsArray,o=A.getParameters(t,r.state,a,e,vt.numPlanes,vt.numIntersection,n),s=A.getProgramCode(t,o),l=i.program,q=!0;if(void 0===l)t.addEventListener("dispose",Lt);else if(l.code!==s)Pt(t);else if(i.lightsHash!==r.state.hash)_.update(t,"lightsHash",r.state.hash),q=!1;else{if(void 0!==o.shaderID)return;q=!1}if(q){if(o.shaderID){var c=yn[o.shaderID];i.shader={name:t.type,uniforms:pn.clone(c.uniforms),vertexShader:c.vertexShader,fragmentShader:c.fragmentShader}}else i.shader={name:t.type,uniforms:t.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader};t.onBeforeCompile(i.shader,k),l=A.acquireProgram(t,i.shader,o,s),i.program=l,t.program=l}var u=l.getAttributes();if(t.morphTargets){t.numSupportedMorphTargets=0;for(var m=0;m<k.maxMorphTargets;m++)u["morphTarget"+m]>=0&&t.numSupportedMorphTargets++}if(t.morphNormals){t.numSupportedMorphNormals=0;for(m=0;m<k.maxMorphNormals;m++)u["morphNormal"+m]>=0&&t.numSupportedMorphNormals++}var d=i.shader.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(i.numClippingPlanes=vt.numPlanes,i.numIntersection=vt.numIntersection,d.clippingPlanes=vt.uniform),i.fog=e,i.lightsHash=r.state.hash,t.lights&&(d.ambientLightColor.value=r.state.ambient,d.directionalLights.value=r.state.directional,d.spotLights.value=r.state.spot,d.rectAreaLights.value=r.state.rectArea,d.pointLights.value=r.state.point,d.hemisphereLights.value=r.state.hemi,d.directionalShadowMap.value=r.state.directionalShadowMap,d.directionalShadowMatrix.value=r.state.directionalShadowMatrix,d.spotShadowMap.value=r.state.spotShadowMap,d.spotShadowMatrix.value=r.state.spotShadowMatrix,d.pointShadowMap.value=r.state.pointShadowMap,d.pointShadowMatrix.value=r.state.pointShadowMatrix);var p=i.program.getUniforms(),f=nr.seqWithValue(p.seq,d);i.uniformsList=f}function kt(t,e,n,i){qt=0;var r=_.get(n),a=h.state.lights;if(xt&&(yt||t!==J)){var o=t===J&&n.id===Y;vt.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,t,r,o)}!1===n.needsUpdate&&(void 0===r.program?n.needsUpdate=!0:n.fog&&r.fog!==e?n.needsUpdate=!0:n.lights&&r.lightsHash!==a.state.hash?n.needsUpdate=!0:void 0===r.numClippingPlanes||r.numClippingPlanes===vt.numPlanes&&r.numIntersection===vt.numIntersection||(n.needsUpdate=!0)),n.needsUpdate&&(Vt(n,e,i),n.needsUpdate=!1);var s,l,q=!1,c=!1,m=!1,d=r.program,p=d.getUniforms(),f=r.shader.uniforms;if(x.useProgram(d.program)&&(q=!0,c=!0,m=!0),n.id!==Y&&(Y=n.id,c=!0),q||t!==J){if(p.setValue(u,"projectionMatrix",t.projectionMatrix),v.logarithmicDepthBuffer&&p.setValue(u,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),J!==(Q||t)&&(J=Q||t,c=!0,m=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshStandardMaterial||n.envMap){var g=p.map.cameraPosition;void 0!==g&&g.setValue(u,bt.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&p.setValue(u,"viewMatrix",t.matrixWorldInverse)}if(n.skinning){p.setOptional(u,i,"bindMatrix"),p.setOptional(u,i,"bindMatrixInverse");var y=i.skeleton;if(y){var b=y.bones;if(v.floatVertexTextures){if(void 0===y.boneTexture){var w=Math.sqrt(4*b.length);w=ke.ceilPowerOfTwo(w),w=Math.max(w,4);var E=new Float32Array(w*w*4);E.set(y.boneMatrices);var M=new ln(E,w,w,Xt,Ft);M.needsUpdate=!0,y.boneMatrices=E,y.boneTexture=M,y.boneTextureSize=w}p.setValue(u,"boneTexture",y.boneTexture),p.setValue(u,"boneTextureSize",y.boneTextureSize)}else p.setOptional(u,y,"boneMatrices")}}return c&&(p.setValue(u,"toneMappingExposure",k.toneMappingExposure),p.setValue(u,"toneMappingWhitePoint",k.toneMappingWhitePoint),n.lights&&(l=m,(s=f).ambientLightColor.needsUpdate=l,s.directionalLights.needsUpdate=l,s.pointLights.needsUpdate=l,s.spotLights.needsUpdate=l,s.rectAreaLights.needsUpdate=l,s.hemisphereLights.needsUpdate=l),e&&n.fog&&function(t,e){t.fogColor.value=e.color,e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)}(f,e),n.isMeshBasicMaterial?jt(f,n):n.isMeshLambertMaterial?(jt(f,n),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(f,n)):n.isMeshPhongMaterial?(jt(f,n),n.isMeshToonMaterial?function(t,e){Wt(t,e),e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(f,n):Wt(f,n)):n.isMeshStandardMaterial?(jt(f,n),n.isMeshPhysicalMaterial?function(t,e){t.clearCoat.value=e.clearCoat,t.clearCoatRoughness.value=e.clearCoatRoughness,Yt(t,e)}(f,n):Yt(f,n)):n.isMeshDepthMaterial?(jt(f,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(f,n)):n.isMeshDistanceMaterial?(jt(f,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(f,n)):n.isMeshNormalMaterial?(jt(f,n),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale);e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale));e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(f,n)):n.isLineBasicMaterial?(function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity}(f,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(f,n)):n.isPointsMaterial?function(t,e){t.diffuse.value=e.color,t.opacity.value=e.opacity,t.size.value=e.size*mt,t.scale.value=.5*ht,t.map.value=e.map,null!==e.map&&(!0===e.map.matrixAutoUpdate&&e.map.updateMatrix(),t.uvTransform.value.copy(e.map.matrix))}(f,n):n.isShadowMaterial&&(f.color.value=n.color,f.opacity.value=n.opacity),void 0!==f.ltc_1&&(f.ltc_1.value=xn.LTC_1),void 0!==f.ltc_2&&(f.ltc_2.value=xn.LTC_2),nr.upload(u,r.uniformsList,f,k)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(nr.upload(u,r.uniformsList,f,k),n.uniformsNeedUpdate=!1),p.setValue(u,"modelViewMatrix",i.modelViewMatrix),p.setValue(u,"normalMatrix",i.normalMatrix),p.setValue(u,"modelMatrix",i.matrixWorld),d}function jt(t,e){var n;t.opacity.value=e.opacity,e.color&&(t.diffuse.value=e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap),e.envMap&&(t.envMap.value=e.envMap,t.flipEnvMap.value=e.envMap&&e.envMap.isCubeTexture?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio,t.maxMipLevel.value=_.get(e.envMap).__maxMipLevel),e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?n=e.map:e.specularMap?n=e.specularMap:e.displacementMap?n=e.displacementMap:e.normalMap?n=e.normalMap:e.bumpMap?n=e.bumpMap:e.roughnessMap?n=e.roughnessMap:e.metalnessMap?n=e.metalnessMap:e.alphaMap?n=e.alphaMap:e.emissiveMap&&(n=e.emissiveMap),void 0!==n&&(n.isWebGLRenderTarget&&(n=n.texture),!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}function Wt(t,e){t.specular.value=e.specular,t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale)),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}function Yt(t,e){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale)),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}this.animate=function(t){null!==(Nt=t)?It||(Dt(),It=!0):Ut()},this.render=function(t,e,n,i){if(e&&e.isCamera){if(!j){Z="",Y=-1,J=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),Tt.enabled&&(e=Tt.getCamera(e)),(h=P.get(t,e)).init(),t.onBeforeRender(k,t,e,n),_t.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),gt.setFromMatrix(_t),yt=this.localClippingEnabled,xt=vt.init(this.clippingPlanes,yt,e),(c=L.get(t,e)).init(),function t(e,n,i){if(!1===e.visible)return;var r=e.layers.test(n.layers);if(r)if(e.isLight)h.pushLight(e),e.castShadow&&h.pushShadow(e);else if(e.isSprite)e.frustumCulled&&!gt.intersectsSprite(e)||h.pushSprite(e);else if(e.isImmediateRenderObject)i&&bt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(_t),c.push(e,null,e.material,bt.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.update(),!e.frustumCulled||gt.intersectsObject(e))){i&&bt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(_t);var a=S.update(e),o=e.material;if(Array.isArray(o))for(var s=a.groups,l=0,q=s.length;l<q;l++){var u=s[l],m=o[u.materialIndex];m&&m.visible&&c.push(e,a,m,bt.z,u)}else o.visible&&c.push(e,a,o,bt.z,null)}var d=e.children;for(var l=0,q=d.length;l<q;l++)t(d[l],n,i)}(t,e,k.sortObjects),!0===k.sortObjects&&c.sort(),xt&&vt.beginShadows();var r=h.state.shadowsArray;St.render(r,t,e),h.setupLights(e),xt&&vt.endShadows(),this.info.autoReset&&this.info.reset(),void 0===n&&(n=null),this.setRenderTarget(n),B.render(c,t,e,i);var a=c.opaque,o=c.transparent;if(t.overrideMaterial){var s=t.overrideMaterial;a.length&&Ht(a,t,e,s),o.length&&Ht(o,t,e,s)}else a.length&&Ht(a,t,e),o.length&&Ht(o,t,e);var l=h.state.spritesArray;G.render(l,t,e),n&&b.updateRenderTargetMipmap(n),x.buffers.depth.setTest(!0),x.buffers.depth.setMask(!0),x.buffers.color.setMask(!0),x.setPolygonOffset(!1),t.onAfterRender(k,t,e),Tt.enabled&&Tt.submitFrame(),c=null,h=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.allocTextureUnit=function(){var t=qt;return t>=v.maxTextures&&console.warn("THREE.WebGLRenderer: Trying to use "+t+" texture units while this GPU supports only "+v.maxTextures),qt+=1,t},this.setTexture2D=(Ct=!1,function(t,e){t&&t.isWebGLRenderTarget&&(Ct||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),Ct=!0),t=t.texture),b.setTexture2D(t,e)}),this.setTexture=function(){var t=!1;return function(e,n){t||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),t=!0),b.setTexture2D(e,n)}}(),this.setTextureCube=function(){var t=!1;return function(e,n){e&&e.isWebGLRenderTargetCube&&(t||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),t=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?b.setTextureCube(e,n):b.setTextureCubeDynamic(e,n)}}(),this.getRenderTarget=function(){return W},this.setRenderTarget=function(t){W=t,t&&void 0===_.get(t).__webglFramebuffer&&b.setupRenderTarget(t);var e=null,n=!1;if(t){var i=_.get(t).__webglFramebuffer;t.isWebGLRenderTargetCube?(e=i[t.activeCubeFace],n=!0):e=i,K.copy(t.viewport),$.copy(t.scissor),lt=t.scissorTest}else K.copy(dt).multiplyScalar(mt),$.copy(pt).multiplyScalar(mt),lt=ft;if(X!==e&&(u.bindFramebuffer(u.FRAMEBUFFER,e),X=e),x.viewport(K),x.scissor($),x.setScissorTest(lt),n){var r=_.get(t.texture);u.framebufferTexture2D(u.FRAMEBUFFER,u.COLOR_ATTACHMENT0,u.TEXTURE_CUBE_MAP_POSITIVE_X+t.activeCubeFace,r.__webglTexture,t.activeMipMapLevel)}},this.readRenderTargetPixels=function(t,e,n,i,r,a){if(t&&t.isWebGLRenderTarget){var o=_.get(t).__webglFramebuffer;if(o){var s=!1;o!==X&&(u.bindFramebuffer(u.FRAMEBUFFER,o),s=!0);try{var l=t.texture,q=l.format,c=l.type;if(q!==Xt&&V.convert(q)!==u.getParameter(u.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(c===Ot||V.convert(c)===u.getParameter(u.IMPLEMENTATION_COLOR_READ_TYPE)||c===Ft&&(d.get("OES_texture_float")||d.get("WEBGL_color_buffer_float"))||c===zt&&d.get("EXT_color_buffer_half_float")))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");u.checkFramebufferStatus(u.FRAMEBUFFER)===u.FRAMEBUFFER_COMPLETE?e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&u.readPixels(e,n,i,r,V.convert(q),V.convert(c),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{s&&u.bindFramebuffer(u.FRAMEBUFFER,X)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(t,e,n){var i=e.image.width,r=e.image.height,a=V.convert(e.format);this.setTexture2D(e,0),u.copyTexImage2D(u.TEXTURE_2D,n||0,a,t.x,t.y,i,r,0)},this.copyTextureToTexture=function(t,e,n,i){var r=e.image.width,a=e.image.height,o=V.convert(n.format),s=V.convert(n.type),l=e.isDataTexture?e.image.data:e.image;this.setTexture2D(n,0),u.texSubImage2D(u.TEXTURE_2D,i||0,t.x,t.y,r,a,o,s,l)}}function Fr(t,e){this.name="",this.color=new gn(t),this.density=void 0!==e?e:25e-5}function zr(t,e,n){this.name="",this.color=new gn(t),this.near=void 0!==e?e:1,this.far=void 0!==n?n:1e3}function Hr(){Rn.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function Gr(t){qi.call(this),this.type="SpriteMaterial",this.color=new gn(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(t)}function Vr(t){Rn.call(this),this.type="Sprite",this.material=void 0!==t?t:new Gr,this.center=new je(.5,.5)}function kr(){Rn.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function jr(t,e){if(t=t||[],this.bones=t.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new We)}}function Wr(){Rn.call(this),this.type="Bone"}function Xr(t,e){pi.call(this,t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new We,this.bindMatrixInverse=new We;var n=new jr(this.initBones());this.bind(n,this.matrixWorld),this.normalizeSkinWeights()}function Yr(t){qi.call(this),this.type="LineBasicMaterial",this.color=new gn(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(t)}function Zr(t,e,n){if(1===n)return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new Jr(t,e);Rn.call(this),this.type="Line",this.geometry=void 0!==t?t:new Jn,this.material=void 0!==e?e:new Yr({color:16777215*Math.random()})}function Jr(t,e){Zr.call(this,t,e),this.type="LineSegments"}function Qr(t,e){Zr.call(this,t,e),this.type="LineLoop"}function Kr(t){qi.call(this),this.type="PointsMaterial",this.color=new gn(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.lights=!1,this.setValues(t)}function $r(t,e){Rn.call(this),this.type="Points",this.geometry=void 0!==t?t:new Jn,this.material=void 0!==e?e:new Kr({color:16777215*Math.random()})}function ta(){Rn.call(this),this.type="Group"}function ea(t,e,n,i,r,a,o,s,l){rn.call(this,t,e,n,i,r,a,o,s,l),this.generateMipmaps=!1}function na(t,e,n,i,r,a,o,s,l,q,c,h){rn.call(this,null,a,o,s,l,q,i,r,c,h),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}function ia(t,e,n,i,r,a,o,s,l,q){if((q=void 0!==q?q:Qt)!==Qt&&q!==Kt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&q===Qt&&(n=Ut),void 0===n&&q===Kt&&(n=kt),rn.call(this,null,i,r,a,o,s,q,n,l),this.image={width:t,height:e},this.magFilter=void 0!==o?o:St,this.minFilter=void 0!==s?s:St,this.flipY=!1,this.generateMipmaps=!1}function ra(t){Jn.call(this),this.type="WireframeGeometry";var e,n,i,r,a,o,s,l,q,c,h=[],u=[0,0],m={},d=["a","b","c"];if(t&&t.isGeometry){var p=t.faces;for(e=0,i=p.length;e<i;e++){var f=p[e];for(n=0;n<3;n++)s=f[d[n]],l=f[d[(n+1)%3]],u[0]=Math.min(s,l),u[1]=Math.max(s,l),void 0===m[q=u[0]+","+u[1]]&&(m[q]={index1:u[0],index2:u[1]})}for(q in m)o=m[q],c=t.vertices[o.index1],h.push(c.x,c.y,c.z),c=t.vertices[o.index2],h.push(c.x,c.y,c.z)}else if(t&&t.isBufferGeometry){var g,v,x,y,_,b,w;if(c=new Ye,null!==t.index){for(g=t.attributes.position,v=t.index,0===(x=t.groups).length&&(x=[{start:0,count:v.count,materialIndex:0}]),r=0,a=x.length;r<a;++r)for(e=_=(y=x[r]).start,i=_+y.count;e<i;e+=3)for(n=0;n<3;n++)s=v.getX(e+n),l=v.getX(e+(n+1)%3),u[0]=Math.min(s,l),u[1]=Math.max(s,l),void 0===m[q=u[0]+","+u[1]]&&(m[q]={index1:u[0],index2:u[1]});for(q in m)o=m[q],c.fromBufferAttribute(g,o.index1),h.push(c.x,c.y,c.z),c.fromBufferAttribute(g,o.index2),h.push(c.x,c.y,c.z)}else for(e=0,i=(g=t.attributes.position).count/3;e<i;e++)for(n=0;n<3;n++)b=3*e+n,c.fromBufferAttribute(g,b),h.push(c.x,c.y,c.z),w=3*e+(n+1)%3,c.fromBufferAttribute(g,w),h.push(c.x,c.y,c.z)}this.addAttribute("position",new jn(h,3))}function aa(t,e,n){Un.call(this),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:n},this.fromBufferGeometry(new oa(t,e,n)),this.mergeVertices()}function oa(t,e,n){Jn.call(this),this.type="ParametricBufferGeometry",this.parameters={func:t,slices:e,stacks:n};var i,r,a=[],o=[],s=[],l=[],q=new Ye,c=new Ye,h=new Ye,u=new Ye,m=new Ye,d=e+1;for(i=0;i<=n;i++){var p=i/n;for(r=0;r<=e;r++){var f=r/e;t(f,p,c),o.push(c.x,c.y,c.z),f-1e-5>=0?(t(f-1e-5,p,h),u.subVectors(c,h)):(t(f+1e-5,p,h),u.subVectors(h,c)),p-1e-5>=0?(t(f,p-1e-5,h),m.subVectors(c,h)):(t(f,p+1e-5,h),m.subVectors(h,c)),q.crossVectors(u,m).normalize(),s.push(q.x,q.y,q.z),l.push(f,p)}}for(i=0;i<n;i++)for(r=0;r<e;r++){var g=i*d+r,v=i*d+r+1,x=(i+1)*d+r+1,y=(i+1)*d+r;a.push(g,v,y),a.push(v,x,y)}this.setIndex(a),this.addAttribute("position",new jn(o,3)),this.addAttribute("normal",new jn(s,3)),this.addAttribute("uv",new jn(l,2))}function sa(t,e,n,i){Un.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:i},this.fromBufferGeometry(new la(t,e,n,i)),this.mergeVertices()}function la(t,e,n,i){Jn.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:i},n=n||1;var r=[],a=[];function o(t,e,n,i){var r,a,o=Math.pow(2,i),l=[];for(r=0;r<=o;r++){l[r]=[];var q=t.clone().lerp(n,r/o),c=e.clone().lerp(n,r/o),h=o-r;for(a=0;a<=h;a++)l[r][a]=0===a&&r===o?q:q.clone().lerp(c,a/h)}for(r=0;r<o;r++)for(a=0;a<2*(o-r)-1;a++){var u=Math.floor(a/2);a%2==0?(s(l[r][u+1]),s(l[r+1][u]),s(l[r][u])):(s(l[r][u+1]),s(l[r+1][u+1]),s(l[r+1][u]))}}function s(t){r.push(t.x,t.y,t.z)}function l(e,n){var i=3*e;n.x=t[i+0],n.y=t[i+1],n.z=t[i+2]}function q(t,e,n,i){i<0&&1===t.x&&(a[e]=t.x-1),0===n.x&&0===n.z&&(a[e]=i/2/Math.PI+.5)}function c(t){return Math.atan2(t.z,-t.x)}!function(t){for(var n=new Ye,i=new Ye,r=new Ye,a=0;a<e.length;a+=3)l(e[a+0],n),l(e[a+1],i),l(e[a+2],r),o(n,i,r,t)}(i=i||0),function(t){for(var e=new Ye,n=0;n<r.length;n+=3)e.x=r[n+0],e.y=r[n+1],e.z=r[n+2],e.normalize().multiplyScalar(t),r[n+0]=e.x,r[n+1]=e.y,r[n+2]=e.z}(n),function(){for(var t=new Ye,e=0;e<r.length;e+=3){t.x=r[e+0],t.y=r[e+1],t.z=r[e+2];var n=c(t)/2/Math.PI+.5,i=(o=t,Math.atan2(-o.y,Math.sqrt(o.x*o.x+o.z*o.z))/Math.PI+.5);a.push(n,1-i)}var o;(function(){for(var t=new Ye,e=new Ye,n=new Ye,i=new Ye,o=new je,s=new je,l=new je,h=0,u=0;h<r.length;h+=9,u+=6){t.set(r[h+0],r[h+1],r[h+2]),e.set(r[h+3],r[h+4],r[h+5]),n.set(r[h+6],r[h+7],r[h+8]),o.set(a[u+0],a[u+1]),s.set(a[u+2],a[u+3]),l.set(a[u+4],a[u+5]),i.copy(t).add(e).add(n).divideScalar(3);var m=c(i);q(o,u+0,t,m),q(s,u+2,e,m),q(l,u+4,n,m)}})(),function(){for(var t=0;t<a.length;t+=6){var e=a[t+0],n=a[t+2],i=a[t+4],r=Math.max(e,n,i),o=Math.min(e,n,i);r>.9&&o<.1&&(e<.2&&(a[t+0]+=1),n<.2&&(a[t+2]+=1),i<.2&&(a[t+4]+=1))}}()}(),this.addAttribute("position",new jn(r,3)),this.addAttribute("normal",new jn(r.slice(),3)),this.addAttribute("uv",new jn(a,2)),0===i?this.computeVertexNormals():this.normalizeNormals()}function qa(t,e){Un.call(this),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new ca(t,e)),this.mergeVertices()}function ca(t,e){la.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronBufferGeometry",this.parameters={radius:t,detail:e}}function ha(t,e){Un.call(this),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new ua(t,e)),this.mergeVertices()}function ua(t,e){la.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronBufferGeometry",this.parameters={radius:t,detail:e}}function ma(t,e){Un.call(this),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new da(t,e)),this.mergeVertices()}function da(t,e){var n=(1+Math.sqrt(5))/2,i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];la.call(this,i,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronBufferGeometry",this.parameters={radius:t,detail:e}}function pa(t,e){Un.call(this),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new fa(t,e)),this.mergeVertices()}function fa(t,e){var n=(1+Math.sqrt(5))/2,i=1/n,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i];la.call(this,r,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronBufferGeometry",this.parameters={radius:t,detail:e}}function ga(t,e,n,i,r,a){Un.call(this),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:i,closed:r},void 0!==a&&console.warn("THREE.TubeGeometry: taper has been removed.");var o=new va(t,e,n,i,r);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals,this.fromBufferGeometry(o),this.mergeVertices()}function va(t,e,n,i,r){Jn.call(this),this.type="TubeBufferGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:i,closed:r},e=e||64,n=n||1,i=i||8,r=r||!1;var a=t.computeFrenetFrames(e,r);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;var o,s,l=new Ye,q=new Ye,c=new je,h=new Ye,u=[],m=[],d=[],p=[];function f(r){h=t.getPointAt(r/e,h);var o=a.normals[r],c=a.binormals[r];for(s=0;s<=i;s++){var d=s/i*Math.PI*2,p=Math.sin(d),f=-Math.cos(d);q.x=f*o.x+p*c.x,q.y=f*o.y+p*c.y,q.z=f*o.z+p*c.z,q.normalize(),m.push(q.x,q.y,q.z),l.x=h.x+n*q.x,l.y=h.y+n*q.y,l.z=h.z+n*q.z,u.push(l.x,l.y,l.z)}}!function(){for(o=0;o<e;o++)f(o);f(!1===r?e:0),function(){for(o=0;o<=e;o++)for(s=0;s<=i;s++)c.x=o/e,c.y=s/i,d.push(c.x,c.y)}(),function(){for(s=1;s<=e;s++)for(o=1;o<=i;o++){var t=(i+1)*(s-1)+(o-1),n=(i+1)*s+(o-1),r=(i+1)*s+o,a=(i+1)*(s-1)+o;p.push(t,n,a),p.push(n,r,a)}}()}(),this.setIndex(p),this.addAttribute("position",new jn(u,3)),this.addAttribute("normal",new jn(m,3)),this.addAttribute("uv",new jn(d,2))}function xa(t,e,n,i,r,a,o){Un.call(this),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:i,p:r,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new ya(t,e,n,i,r,a)),this.mergeVertices()}function ya(t,e,n,i,r,a){Jn.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:i,p:r,q:a},t=t||1,e=e||.4,n=Math.floor(n)||64,i=Math.floor(i)||8,r=r||2,a=a||3;var o,s,l=[],q=[],c=[],h=[],u=new Ye,m=new Ye,d=new Ye,p=new Ye,f=new Ye,g=new Ye,v=new Ye;for(o=0;o<=n;++o){var x=o/n*r*Math.PI*2;for(S(x,r,a,t,d),S(x+.01,r,a,t,p),g.subVectors(p,d),v.addVectors(p,d),f.crossVectors(g,v),v.crossVectors(f,g),f.normalize(),v.normalize(),s=0;s<=i;++s){var y=s/i*Math.PI*2,_=-e*Math.cos(y),b=e*Math.sin(y);u.x=d.x+(_*v.x+b*f.x),u.y=d.y+(_*v.y+b*f.y),u.z=d.z+(_*v.z+b*f.z),q.push(u.x,u.y,u.z),m.subVectors(u,d).normalize(),c.push(m.x,m.y,m.z),h.push(o/n),h.push(s/i)}}for(s=1;s<=n;s++)for(o=1;o<=i;o++){var w=(i+1)*(s-1)+(o-1),E=(i+1)*s+(o-1),M=(i+1)*s+o,T=(i+1)*(s-1)+o;l.push(w,E,T),l.push(E,M,T)}function S(t,e,n,i,r){var a=Math.cos(t),o=Math.sin(t),s=n/e*t,l=Math.cos(s);r.x=i*(2+l)*.5*a,r.y=i*(2+l)*o*.5,r.z=i*Math.sin(s)*.5}this.setIndex(l),this.addAttribute("position",new jn(q,3)),this.addAttribute("normal",new jn(c,3)),this.addAttribute("uv",new jn(h,2))}function _a(t,e,n,i,r){Un.call(this),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:r},this.fromBufferGeometry(new ba(t,e,n,i,r)),this.mergeVertices()}function ba(t,e,n,i,r){Jn.call(this),this.type="TorusBufferGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:r},t=t||1,e=e||.4,n=Math.floor(n)||8,i=Math.floor(i)||6,r=r||2*Math.PI;var a,o,s=[],l=[],q=[],c=[],h=new Ye,u=new Ye,m=new Ye;for(a=0;a<=n;a++)for(o=0;o<=i;o++){var d=o/i*r,p=a/n*Math.PI*2;u.x=(t+e*Math.cos(p))*Math.cos(d),u.y=(t+e*Math.cos(p))*Math.sin(d),u.z=e*Math.sin(p),l.push(u.x,u.y,u.z),h.x=t*Math.cos(d),h.y=t*Math.sin(d),m.subVectors(u,h).normalize(),q.push(m.x,m.y,m.z),c.push(o/i),c.push(a/n)}for(a=1;a<=n;a++)for(o=1;o<=i;o++){var f=(i+1)*a+o-1,g=(i+1)*(a-1)+o-1,v=(i+1)*(a-1)+o,x=(i+1)*a+o;s.push(f,g,x),s.push(g,v,x)}this.setIndex(s),this.addAttribute("position",new jn(l,3)),this.addAttribute("normal",new jn(q,3)),this.addAttribute("uv",new jn(c,2))}Ar.prototype=Object.create(qi.prototype),Ar.prototype.constructor=Ar,Ar.prototype.isMeshDepthMaterial=!0,Ar.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this},Rr.prototype=Object.create(qi.prototype),Rr.prototype.constructor=Rr,Rr.prototype.isMeshDistanceMaterial=!0,Rr.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this},Pr.prototype=Object.create(rn.prototype),Pr.prototype.constructor=Pr,Nr.prototype=Object.assign(Object.create(Ln.prototype),{constructor:Nr,isPerspectiveCamera:!0,copy:function(t,e){return Ln.prototype.copy.call(this,t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(t){var e=.5*this.getFilmHeight()/t;this.fov=2*ke.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){var t=Math.tan(.5*ke.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*ke.RAD2DEG*Math.atan(Math.tan(.5*ke.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,n,i,r,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=this.near,e=t*Math.tan(.5*ke.DEG2RAD*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i,a=this.view;if(null!==this.view&&this.view.enabled){var o=a.fullWidth,s=a.fullHeight;r+=a.offsetX*i/o,e-=a.offsetY*n/s,i*=a.width/o,n*=a.height/s}var l=this.filmOffset;0!==l&&(r+=t*l/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far)},toJSON:function(t){var e=Rn.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}),Ur.prototype=Object.assign(Object.create(Nr.prototype),{constructor:Ur,isArrayCamera:!0}),Fr.prototype.isFogExp2=!0,Fr.prototype.clone=function(){return new Fr(this.color.getHex(),this.density)},Fr.prototype.toJSON=function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}},zr.prototype.isFog=!0,zr.prototype.clone=function(){return new zr(this.color.getHex(),this.near,this.far)},zr.prototype.toJSON=function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}},Hr.prototype=Object.assign(Object.create(Rn.prototype),{constructor:Hr,copy:function(t,e){return Rn.prototype.copy.call(this,t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this},toJSON:function(t){var e=Rn.prototype.toJSON.call(this,t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}),Gr.prototype=Object.create(qi.prototype),Gr.prototype.constructor=Gr,Gr.prototype.isSpriteMaterial=!0,Gr.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.rotation=t.rotation,this},Vr.prototype=Object.assign(Object.create(Rn.prototype),{constructor:Vr,isSprite:!0,raycast:(gr=new Ye,vr=new Ye,xr=new Ye,function(t,e){vr.setFromMatrixPosition(this.matrixWorld),t.ray.closestPointToPoint(vr,gr),xr.setFromMatrixScale(this.matrixWorld);var n=xr.x*xr.y/4;if(!(vr.distanceToSquared(gr)>n)){var i=t.ray.origin.distanceTo(gr);i<t.near||i>t.far||e.push({distance:i,point:gr.clone(),face:null,object:this})}}),clone:function(){return new this.constructor(this.material).copy(this)},copy:function(t){return Rn.prototype.copy.call(this,t),void 0!==t.center&&this.center.copy(t.center),this}}),kr.prototype=Object.assign(Object.create(Rn.prototype),{constructor:kr,copy:function(t){Rn.prototype.copy.call(this,t,!1);for(var e=t.levels,n=0,i=e.length;n<i;n++){var r=e[n];this.addLevel(r.object.clone(),r.distance)}return this},addLevel:function(t,e){void 0===e&&(e=0),e=Math.abs(e);for(var n=this.levels,i=0;i<n.length&&!(e<n[i].distance);i++);n.splice(i,0,{distance:e,object:t}),this.add(t)},getObjectForDistance:function(t){for(var e=this.levels,n=1,i=e.length;n<i&&!(t<e[n].distance);n++);return e[n-1].object},raycast:(yr=new Ye,function(t,e){yr.setFromMatrixPosition(this.matrixWorld);var n=t.ray.origin.distanceTo(yr);this.getObjectForDistance(n).raycast(t,e)}),update:function(){var t=new Ye,e=new Ye;return function(n){var i=this.levels;if(i.length>1){t.setFromMatrixPosition(n.matrixWorld),e.setFromMatrixPosition(this.matrixWorld);var r=t.distanceTo(e);i[0].object.visible=!0;for(var a=1,o=i.length;a<o&&r>=i[a].distance;a++)i[a-1].object.visible=!1,i[a].object.visible=!0;for(;a<o;a++)i[a].object.visible=!1}}}(),toJSON:function(t){var e=Rn.prototype.toJSON.call(this,t);e.object.levels=[];for(var n=this.levels,i=0,r=n.length;i<r;i++){var a=n[i];e.object.levels.push({object:a.object.uuid,distance:a.distance})}return e}}),Object.assign(jr.prototype,{calculateInverses:function(){this.boneInverses=[];for(var t=0,e=this.bones.length;t<e;t++){var n=new We;this.bones[t]&&n.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(n)}},pose:function(){var t,e,n;for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&t.matrixWorld.getInverse(this.boneInverses[e]);for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&(t.parent&&t.parent.isBone?(t.matrix.getInverse(t.parent.matrixWorld),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))},update:(_r=new We,br=new We,function(){for(var t=this.bones,e=this.boneInverses,n=this.boneMatrices,i=this.boneTexture,r=0,a=t.length;r<a;r++){var o=t[r]?t[r].matrixWorld:br;_r.multiplyMatrices(o,e[r]),_r.toArray(n,16*r)}void 0!==i&&(i.needsUpdate=!0)}),clone:function(){return new jr(this.bones,this.boneInverses)},getBoneByName:function(t){for(var e=0,n=this.bones.length;e<n;e++){var i=this.bones[e];if(i.name===t)return i}}}),Wr.prototype=Object.assign(Object.create(Rn.prototype),{constructor:Wr,isBone:!0}),Xr.prototype=Object.assign(Object.create(pi.prototype),{constructor:Xr,isSkinnedMesh:!0,initBones:function(){var t,e,n,i,r=[];if(this.geometry&&void 0!==this.geometry.bones){for(n=0,i=this.geometry.bones.length;n<i;n++)e=this.geometry.bones[n],t=new Wr,r.push(t),t.name=e.name,t.position.fromArray(e.pos),t.quaternion.fromArray(e.rotq),void 0!==e.scl&&t.scale.fromArray(e.scl);for(n=0,i=this.geometry.bones.length;n<i;n++)-1!==(e=this.geometry.bones[n]).parent&&null!==e.parent&&void 0!==r[e.parent]?r[e.parent].add(r[n]):this.add(r[n])}return this.updateMatrixWorld(!0),r},bind:function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){var t,e;if(this.geometry&&this.geometry.isGeometry)for(e=0;e<this.geometry.skinWeights.length;e++){var n=this.geometry.skinWeights[e];(t=1/n.manhattanLength())!==1/0?n.multiplyScalar(t):n.set(1,0,0,0)}else if(this.geometry&&this.geometry.isBufferGeometry){var i=new an,r=this.geometry.attributes.skinWeight;for(e=0;e<r.count;e++)i.x=r.getX(e),i.y=r.getY(e),i.z=r.getZ(e),i.w=r.getW(e),(t=1/i.manhattanLength())!==1/0?i.multiplyScalar(t):i.set(1,0,0,0),r.setXYZW(e,i.x,i.y,i.z,i.w)}},updateMatrixWorld:function(t){pi.prototype.updateMatrixWorld.call(this,t),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Yr.prototype=Object.create(qi.prototype),Yr.prototype.constructor=Yr,Yr.prototype.isLineBasicMaterial=!0,Yr.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this},Zr.prototype=Object.assign(Object.create(Rn.prototype),{constructor:Zr,isLine:!0,computeLineDistances:(wr=new Ye,Er=new Ye,function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,n=[0],i=1,r=e.count;i<r;i++)wr.fromBufferAttribute(e,i-1),Er.fromBufferAttribute(e,i),n[i]=n[i-1],n[i]+=wr.distanceTo(Er);t.addAttribute("lineDistance",new jn(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(t.isGeometry){var a=t.vertices;for((n=t.lineDistances)[0]=0,i=1,r=a.length;i<r;i++)n[i]=n[i-1],n[i]+=a[i-1].distanceTo(a[i])}return this}),raycast:function(){var t=new We,e=new ui,n=new cn;return function(i,r){var a=i.linePrecision,o=a*a,s=this.geometry,l=this.matrixWorld;if(null===s.boundingSphere&&s.computeBoundingSphere(),n.copy(s.boundingSphere),n.applyMatrix4(l),!1!==i.ray.intersectsSphere(n)){t.getInverse(l),e.copy(i.ray).applyMatrix4(t);var q=new Ye,c=new Ye,h=new Ye,u=new Ye,m=this&&this.isLineSegments?2:1;if(s.isBufferGeometry){var d=s.index,p=s.attributes.position.array;if(null!==d)for(var f=d.array,g=0,v=f.length-1;g<v;g+=m){var x=f[g],y=f[g+1];if(q.fromArray(p,3*x),c.fromArray(p,3*y),!(e.distanceSqToSegment(q,c,u,h)>o))u.applyMatrix4(this.matrixWorld),(w=i.ray.origin.distanceTo(u))<i.near||w>i.far||r.push({distance:w,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}else for(g=0,v=p.length/3-1;g<v;g+=m){if(q.fromArray(p,3*g),c.fromArray(p,3*g+3),!(e.distanceSqToSegment(q,c,u,h)>o))u.applyMatrix4(this.matrixWorld),(w=i.ray.origin.distanceTo(u))<i.near||w>i.far||r.push({distance:w,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}}else if(s.isGeometry){var _=s.vertices,b=_.length;for(g=0;g<b-1;g+=m){var w;if(!(e.distanceSqToSegment(_[g],_[g+1],u,h)>o))u.applyMatrix4(this.matrixWorld),(w=i.ray.origin.distanceTo(u))<i.near||w>i.far||r.push({distance:w,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Jr.prototype=Object.assign(Object.create(Zr.prototype),{constructor:Jr,isLineSegments:!0,computeLineDistances:function(){var t=new Ye,e=new Ye;return function(){var n=this.geometry;if(n.isBufferGeometry)if(null===n.index){for(var i=n.attributes.position,r=[],a=0,o=i.count;a<o;a+=2)t.fromBufferAttribute(i,a),e.fromBufferAttribute(i,a+1),r[a]=0===a?0:r[a-1],r[a+1]=r[a]+t.distanceTo(e);n.addAttribute("lineDistance",new jn(r,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(n.isGeometry){var s=n.vertices;for(r=n.lineDistances,a=0,o=s.length;a<o;a+=2)t.copy(s[a]),e.copy(s[a+1]),r[a]=0===a?0:r[a-1],r[a+1]=r[a]+t.distanceTo(e)}return this}}()}),Qr.prototype=Object.assign(Object.create(Zr.prototype),{constructor:Qr,isLineLoop:!0}),Kr.prototype=Object.create(qi.prototype),Kr.prototype.constructor=Kr,Kr.prototype.isPointsMaterial=!0,Kr.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this},$r.prototype=Object.assign(Object.create(Rn.prototype),{constructor:$r,isPoints:!0,raycast:function(){var t=new We,e=new ui,n=new cn;return function(i,r){var a=this,o=this.geometry,s=this.matrixWorld,l=i.params.Points.threshold;if(null===o.boundingSphere&&o.computeBoundingSphere(),n.copy(o.boundingSphere),n.applyMatrix4(s),n.radius+=l,!1!==i.ray.intersectsSphere(n)){t.getInverse(s),e.copy(i.ray).applyMatrix4(t);var q=l/((this.scale.x+this.scale.y+this.scale.z)/3),c=q*q,h=new Ye,u=new Ye;if(o.isBufferGeometry){var m=o.index,d=o.attributes.position.array;if(null!==m)for(var p=m.array,f=0,g=p.length;f<g;f++){var v=p[f];h.fromArray(d,3*v),_(h,v)}else{f=0;for(var x=d.length/3;f<x;f++)h.fromArray(d,3*f),_(h,f)}}else{var y=o.vertices;for(f=0,x=y.length;f<x;f++)_(y[f],f)}}function _(t,n){var o=e.distanceSqToPoint(t);if(o<c){e.closestPointToPoint(t,u),u.applyMatrix4(s);var l=i.ray.origin.distanceTo(u);if(l<i.near||l>i.far)return;r.push({distance:l,distanceToRay:Math.sqrt(o),point:u.clone(),index:n,face:null,object:a})}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),ta.prototype=Object.assign(Object.create(Rn.prototype),{constructor:ta,isGroup:!0}),ea.prototype=Object.assign(Object.create(rn.prototype),{constructor:ea,isVideoTexture:!0,update:function(){var t=this.image;t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),na.prototype=Object.create(rn.prototype),na.prototype.constructor=na,na.prototype.isCompressedTexture=!0,ia.prototype=Object.create(rn.prototype),ia.prototype.constructor=ia,ia.prototype.isDepthTexture=!0,ra.prototype=Object.create(Jn.prototype),ra.prototype.constructor=ra,aa.prototype=Object.create(Un.prototype),aa.prototype.constructor=aa,oa.prototype=Object.create(Jn.prototype),oa.prototype.constructor=oa,sa.prototype=Object.create(Un.prototype),sa.prototype.constructor=sa,la.prototype=Object.create(Jn.prototype),la.prototype.constructor=la,qa.prototype=Object.create(Un.prototype),qa.prototype.constructor=qa,ca.prototype=Object.create(la.prototype),ca.prototype.constructor=ca,ha.prototype=Object.create(Un.prototype),ha.prototype.constructor=ha,ua.prototype=Object.create(la.prototype),ua.prototype.constructor=ua,ma.prototype=Object.create(Un.prototype),ma.prototype.constructor=ma,da.prototype=Object.create(la.prototype),da.prototype.constructor=da,pa.prototype=Object.create(Un.prototype),pa.prototype.constructor=pa,fa.prototype=Object.create(la.prototype),fa.prototype.constructor=fa,ga.prototype=Object.create(Un.prototype),ga.prototype.constructor=ga,va.prototype=Object.create(Jn.prototype),va.prototype.constructor=va,xa.prototype=Object.create(Un.prototype),xa.prototype.constructor=xa,ya.prototype=Object.create(Jn.prototype),ya.prototype.constructor=ya,_a.prototype=Object.create(Un.prototype),_a.prototype.constructor=_a,ba.prototype=Object.create(Jn.prototype),ba.prototype.constructor=ba;var wa=function(t,e,n){n=n||2;var i,r,a,o,s,l,q,c=e&&e.length,h=c?e[0]*n:t.length,u=Ea(t,0,h,n,!0),m=[];if(!u)return m;if(c&&(u=function(t,e,n,i){var r,a,o,s,l,q=[];for(r=0,a=e.length;r<a;r++)o=e[r]*i,s=r<a-1?e[r+1]*i:t.length,(l=Ea(t,o,s,i,!1))===l.next&&(l.steiner=!0),q.push(Ia(l));for(q.sort(Pa),r=0;r<q.length;r++)Ca(q[r],n),n=Ma(n,n.next);return n}(t,e,u,n)),t.length>80*n){i=a=t[0],r=o=t[1];for(var d=n;d<h;d+=n)s=t[d],l=t[d+1],s<i&&(i=s),l<r&&(r=l),s>a&&(a=s),l>o&&(o=l);q=0!==(q=Math.max(a-i,o-r))?1/q:0}return Ta(u,m,n,i,r,q),m};function Ea(t,e,n,i,r){var a,o;if(r===function(t,e,n,i){for(var r=0,a=e,o=n-i;a<n;a+=i)r+=(t[o]-t[a])*(t[a+1]+t[o+1]),o=a;return r}(t,e,n,i)>0)for(a=e;a<n;a+=i)o=Ga(a,t[a],t[a+1],o);else for(a=n-i;a>=e;a-=i)o=Ga(a,t[a],t[a+1],o);return o&&Ba(o,o.next)&&(Va(o),o=o.next),o}function Ma(t,e){if(!t)return t;e||(e=t);var n,i=t;do{if(n=!1,i.steiner||!Ba(i,i.next)&&0!==Da(i.prev,i,i.next))i=i.next;else{if(Va(i),(i=e=i.prev)===i.next)break;n=!0}}while(n||i!==e);return e}function Ta(t,e,n,i,r,a,o){if(t){!o&&a&&function(t,e,n,i){var r=t;do{null===r.z&&(r.z=Oa(r.x,r.y,e,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){var e,n,i,r,a,o,s,l,q=1;do{for(n=t,t=null,a=null,o=0;n;){for(o++,i=n,s=0,e=0;e<q&&(s++,i=i.nextZ);e++);for(l=q;s>0||l>0&&i;)0!==s&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,s--):(r=i,i=i.nextZ,l--),a?a.nextZ=r:t=r,r.prevZ=a,a=r;n=i}a.nextZ=null,q*=2}while(o>1)}(r)}(t,i,r,a);for(var s,l,q=t;t.prev!==t.next;)if(s=t.prev,l=t.next,a?Aa(t,i,r,a):Sa(t))e.push(s.i/n),e.push(t.i/n),e.push(l.i/n),Va(t),t=l.next,q=l.next;else if((t=l)===q){o?1===o?Ta(t=Ra(t,e,n),e,n,i,r,a,2):2===o&&La(t,e,n,i,r,a):Ta(Ma(t),e,n,i,r,a,1);break}}}function Sa(t){var e=t.prev,n=t,i=t.next;if(Da(e,n,i)>=0)return!1;for(var r=t.next.next;r!==t.prev;){if(Na(e.x,e.y,n.x,n.y,i.x,i.y,r.x,r.y)&&Da(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function Aa(t,e,n,i){var r=t.prev,a=t,o=t.next;if(Da(r,a,o)>=0)return!1;for(var s=r.x<a.x?r.x<o.x?r.x:o.x:a.x<o.x?a.x:o.x,l=r.y<a.y?r.y<o.y?r.y:o.y:a.y<o.y?a.y:o.y,q=r.x>a.x?r.x>o.x?r.x:o.x:a.x>o.x?a.x:o.x,c=r.y>a.y?r.y>o.y?r.y:o.y:a.y>o.y?a.y:o.y,h=Oa(s,l,e,n,i),u=Oa(q,c,e,n,i),m=t.nextZ;m&&m.z<=u;){if(m!==t.prev&&m!==t.next&&Na(r.x,r.y,a.x,a.y,o.x,o.y,m.x,m.y)&&Da(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(m=t.prevZ;m&&m.z>=h;){if(m!==t.prev&&m!==t.next&&Na(r.x,r.y,a.x,a.y,o.x,o.y,m.x,m.y)&&Da(m.prev,m,m.next)>=0)return!1;m=m.prevZ}return!0}function Ra(t,e,n){var i=t;do{var r=i.prev,a=i.next.next;!Ba(r,a)&&Fa(r,i,i.next,a)&&za(r,a)&&za(a,r)&&(e.push(r.i/n),e.push(i.i/n),e.push(a.i/n),Va(i),Va(i.next),i=t=a),i=i.next}while(i!==t);return i}function La(t,e,n,i,r,a){var o=t;do{for(var s=o.next.next;s!==o.prev;){if(o.i!==s.i&&Ua(o,s)){var l=Ha(o,s);return o=Ma(o,o.next),l=Ma(l,l.next),Ta(o,e,n,i,r,a),void Ta(l,e,n,i,r,a)}s=s.next}o=o.next}while(o!==t)}function Pa(t,e){return t.x-e.x}function Ca(t,e){if(e=function(t,e){var n,i=e,r=t.x,a=t.y,o=-1/0;do{if(a<=i.y&&a>=i.next.y&&i.next.y!==i.y){var s=i.x+(a-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(s<=r&&s>o){if(o=s,s===r){if(a===i.y)return i;if(a===i.next.y)return i.next}n=i.x<i.next.x?i:i.next}}i=i.next}while(i!==e);if(!n)return null;if(r===o)return n.prev;var l,q=n,c=n.x,h=n.y,u=1/0;i=n.next;for(;i!==q;)r>=i.x&&i.x>=c&&r!==i.x&&Na(a<h?r:o,a,c,h,a<h?o:r,a,i.x,i.y)&&((l=Math.abs(a-i.y)/(r-i.x))<u||l===u&&i.x>n.x)&&za(i,t)&&(n=i,u=l),i=i.next;return n}(t,e)){var n=Ha(e,t);Ma(n,n.next)}}function Oa(t,e,n,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-i)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function Ia(t){var e=t,n=t;do{e.x<n.x&&(n=e),e=e.next}while(e!==t);return n}function Na(t,e,n,i,r,a,o,s){return(r-o)*(e-s)-(t-o)*(a-s)>=0&&(t-o)*(i-s)-(n-o)*(e-s)>=0&&(n-o)*(a-s)-(r-o)*(i-s)>=0}function Ua(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&Fa(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&za(t,e)&&za(e,t)&&function(t,e){var n=t,i=!1,r=(t.x+e.x)/2,a=(t.y+e.y)/2;do{n.y>a!=n.next.y>a&&n.next.y!==n.y&&r<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i}(t,e)}function Da(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function Ba(t,e){return t.x===e.x&&t.y===e.y}function Fa(t,e,n,i){return!!(Ba(t,e)&&Ba(n,i)||Ba(t,i)&&Ba(n,e))||Da(t,e,n)>0!=Da(t,e,i)>0&&Da(n,i,t)>0!=Da(n,i,e)>0}function za(t,e){return Da(t.prev,t,t.next)<0?Da(t,e,t.next)>=0&&Da(t,t.prev,e)>=0:Da(t,e,t.prev)<0||Da(t,t.next,e)<0}function Ha(t,e){var n=new ka(t.i,t.x,t.y),i=new ka(e.i,e.x,e.y),r=t.next,a=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,i.next=n,n.prev=i,a.next=i,i.prev=a,i}function Ga(t,e,n,i){var r=new ka(t,e,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function Va(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function ka(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var ja={area:function(t){for(var e=t.length,n=0,i=e-1,r=0;r<e;i=r++)n+=t[i].x*t[r].y-t[r].x*t[i].y;return.5*n},isClockWise:function(t){return ja.area(t)<0},triangulateShape:function(t,e){var n=[],i=[],r=[];Wa(t),Xa(n,t);var a=t.length;e.forEach(Wa);for(var o=0;o<e.length;o++)i.push(a),a+=e[o].length,Xa(n,e[o]);var s=wa(n,i);for(o=0;o<s.length;o+=3)r.push(s.slice(o,o+3));return r}};function Wa(t){var e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function Xa(t,e){for(var n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}function Ya(t,e){Un.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},this.fromBufferGeometry(new Za(t,e)),this.mergeVertices()}function Za(t,e){Jn.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:t,options:e};for(var n=this,i=[],r=[],a=0,o=(t=Array.isArray(t)?t:[t]).length;a<o;a++){s(t[a])}function s(t){var a,o,s,l,q,c,h,u,m=[],d=void 0!==e.curveSegments?e.curveSegments:12,p=void 0!==e.steps?e.steps:1,f=void 0!==e.amount?e.amount:100,g=void 0===e.bevelEnabled||e.bevelEnabled,v=void 0!==e.bevelThickness?e.bevelThickness:6,x=void 0!==e.bevelSize?e.bevelSize:v-2,y=void 0!==e.bevelSegments?e.bevelSegments:3,_=e.extrudePath,b=void 0!==e.UVGenerator?e.UVGenerator:Ja,w=!1;_&&(a=_.getSpacedPoints(p),w=!0,g=!1,o=_.computeFrenetFrames(p,!1),s=new Ye,l=new Ye,q=new Ye),g||(y=0,v=0,x=0);var E=t.extractPoints(d),M=E.shape,T=E.holes;if(!ja.isClockWise(M))for(M=M.reverse(),h=0,u=T.length;h<u;h++)c=T[h],ja.isClockWise(c)&&(T[h]=c.reverse());var S=ja.triangulateShape(M,T),A=M;for(h=0,u=T.length;h<u;h++)c=T[h],M=M.concat(c);function R(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(n).add(t)}var L,P,C,O,I,N,U=M.length,D=S.length;function B(t,e,n){var i,r,a,o=t.x-e.x,s=t.y-e.y,l=n.x-t.x,q=n.y-t.y,c=o*o+s*s,h=o*q-s*l;if(Math.abs(h)>Number.EPSILON){var u=Math.sqrt(c),m=Math.sqrt(l*l+q*q),d=e.x-s/u,p=e.y+o/u,f=((n.x-q/m-d)*q-(n.y+l/m-p)*l)/(o*q-s*l),g=(i=d+o*f-t.x)*i+(r=p+s*f-t.y)*r;if(g<=2)return new je(i,r);a=Math.sqrt(g/2)}else{var v=!1;o>Number.EPSILON?l>Number.EPSILON&&(v=!0):o<-Number.EPSILON?l<-Number.EPSILON&&(v=!0):Math.sign(s)===Math.sign(q)&&(v=!0),v?(i=-s,r=o,a=Math.sqrt(c)):(i=o,r=s,a=Math.sqrt(c/2))}return new je(i/a,r/a)}for(var F=[],z=0,H=A.length,G=H-1,V=z+1;z<H;z++,G++,V++)G===H&&(G=0),V===H&&(V=0),F[z]=B(A[z],A[G],A[V]);var k,j,W=[],X=F.concat();for(h=0,u=T.length;h<u;h++){for(c=T[h],k=[],z=0,G=(H=c.length)-1,V=z+1;z<H;z++,G++,V++)G===H&&(G=0),V===H&&(V=0),k[z]=B(c[z],c[G],c[V]);W.push(k),X=X.concat(k)}for(L=0;L<y;L++){for(C=L/y,O=v*Math.cos(C*Math.PI/2),P=x*Math.sin(C*Math.PI/2),z=0,H=A.length;z<H;z++)Z((I=R(A[z],F[z],P)).x,I.y,-O);for(h=0,u=T.length;h<u;h++)for(c=T[h],k=W[h],z=0,H=c.length;z<H;z++)Z((I=R(c[z],k[z],P)).x,I.y,-O)}for(P=x,z=0;z<U;z++)I=g?R(M[z],X[z],P):M[z],w?(l.copy(o.normals[0]).multiplyScalar(I.x),s.copy(o.binormals[0]).multiplyScalar(I.y),q.copy(a[0]).add(l).add(s),Z(q.x,q.y,q.z)):Z(I.x,I.y,0);for(j=1;j<=p;j++)for(z=0;z<U;z++)I=g?R(M[z],X[z],P):M[z],w?(l.copy(o.normals[j]).multiplyScalar(I.x),s.copy(o.binormals[j]).multiplyScalar(I.y),q.copy(a[j]).add(l).add(s),Z(q.x,q.y,q.z)):Z(I.x,I.y,f/p*j);for(L=y-1;L>=0;L--){for(C=L/y,O=v*Math.cos(C*Math.PI/2),P=x*Math.sin(C*Math.PI/2),z=0,H=A.length;z<H;z++)Z((I=R(A[z],F[z],P)).x,I.y,f+O);for(h=0,u=T.length;h<u;h++)for(c=T[h],k=W[h],z=0,H=c.length;z<H;z++)I=R(c[z],k[z],P),w?Z(I.x,I.y+a[p-1].y,a[p-1].x+O):Z(I.x,I.y,f+O)}function Y(t,e){var n,i;for(z=t.length;--z>=0;){n=z,(i=z-1)<0&&(i=t.length-1);var r=0,a=p+2*y;for(r=0;r<a;r++){var o=U*r,s=U*(r+1);Q(e+n+o,e+i+o,e+i+s,e+n+s)}}}function Z(t,e,n){m.push(t),m.push(e),m.push(n)}function J(t,e,r){K(t),K(e),K(r);var a=i.length/3,o=b.generateTopUV(n,i,a-3,a-2,a-1);$(o[0]),$(o[1]),$(o[2])}function Q(t,e,r,a){K(t),K(e),K(a),K(e),K(r),K(a);var o=i.length/3,s=b.generateSideWallUV(n,i,o-6,o-3,o-2,o-1);$(s[0]),$(s[1]),$(s[3]),$(s[1]),$(s[2]),$(s[3])}function K(t){i.push(m[3*t+0]),i.push(m[3*t+1]),i.push(m[3*t+2])}function $(t){r.push(t.x),r.push(t.y)}!function(){var t=i.length/3;if(g){var e=0,r=U*e;for(z=0;z<D;z++)J((N=S[z])[2]+r,N[1]+r,N[0]+r);for(r=U*(e=p+2*y),z=0;z<D;z++)J((N=S[z])[0]+r,N[1]+r,N[2]+r)}else{for(z=0;z<D;z++)J((N=S[z])[2],N[1],N[0]);for(z=0;z<D;z++)J((N=S[z])[0]+U*p,N[1]+U*p,N[2]+U*p)}n.addGroup(t,i.length/3-t,0)}(),function(){var t=i.length/3,e=0;for(Y(A,e),e+=A.length,h=0,u=T.length;h<u;h++)Y(c=T[h],e),e+=c.length;n.addGroup(t,i.length/3-t,1)}()}this.addAttribute("position",new jn(i,3)),this.addAttribute("uv",new jn(r,2)),this.computeVertexNormals()}Ya.prototype=Object.create(Un.prototype),Ya.prototype.constructor=Ya,Za.prototype=Object.create(Jn.prototype),Za.prototype.constructor=Za;var Ja={generateTopUV:function(t,e,n,i,r){var a=e[3*n],o=e[3*n+1],s=e[3*i],l=e[3*i+1],q=e[3*r],c=e[3*r+1];return[new je(a,o),new je(s,l),new je(q,c)]},generateSideWallUV:function(t,e,n,i,r,a){var o=e[3*n],s=e[3*n+1],l=e[3*n+2],q=e[3*i],c=e[3*i+1],h=e[3*i+2],u=e[3*r],m=e[3*r+1],d=e[3*r+2],p=e[3*a],f=e[3*a+1],g=e[3*a+2];return Math.abs(s-c)<.01?[new je(o,1-l),new je(q,1-h),new je(u,1-d),new je(p,1-g)]:[new je(s,1-l),new je(c,1-h),new je(m,1-d),new je(f,1-g)]}};function Qa(t,e){Un.call(this),this.type="TextGeometry",this.parameters={text:t,parameters:e},this.fromBufferGeometry(new Ka(t,e)),this.mergeVertices()}function Ka(t,e){var n=(e=e||{}).font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Un;var i=n.generateShapes(t,e.size,e.curveSegments);e.amount=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),Za.call(this,i,e),this.type="TextBufferGeometry"}function $a(t,e,n,i,r,a,o){Un.call(this),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new to(t,e,n,i,r,a,o)),this.mergeVertices()}function to(t,e,n,i,r,a,o){Jn.call(this),this.type="SphereBufferGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:o},t=t||1,e=Math.max(3,Math.floor(e)||8),n=Math.max(2,Math.floor(n)||6),i=void 0!==i?i:0,r=void 0!==r?r:2*Math.PI;var s,l,q=(a=void 0!==a?a:0)+(o=void 0!==o?o:Math.PI),c=0,h=[],u=new Ye,m=new Ye,d=[],p=[],f=[],g=[];for(l=0;l<=n;l++){var v=[],x=l/n;for(s=0;s<=e;s++){var y=s/e;u.x=-t*Math.cos(i+y*r)*Math.sin(a+x*o),u.y=t*Math.cos(a+x*o),u.z=t*Math.sin(i+y*r)*Math.sin(a+x*o),p.push(u.x,u.y,u.z),m.set(u.x,u.y,u.z).normalize(),f.push(m.x,m.y,m.z),g.push(y,1-x),v.push(c++)}h.push(v)}for(l=0;l<n;l++)for(s=0;s<e;s++){var _=h[l][s+1],b=h[l][s],w=h[l+1][s],E=h[l+1][s+1];(0!==l||a>0)&&d.push(_,b,E),(l!==n-1||q<Math.PI)&&d.push(b,w,E)}this.setIndex(d),this.addAttribute("position",new jn(p,3)),this.addAttribute("normal",new jn(f,3)),this.addAttribute("uv",new jn(g,2))}function eo(t,e,n,i,r,a){Un.call(this),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:a},this.fromBufferGeometry(new no(t,e,n,i,r,a)),this.mergeVertices()}function no(t,e,n,i,r,a){Jn.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:a},t=t||.5,e=e||1,r=void 0!==r?r:0,a=void 0!==a?a:2*Math.PI,n=void 0!==n?Math.max(3,n):8;var o,s,l,q=[],c=[],h=[],u=[],m=t,d=(e-t)/(i=void 0!==i?Math.max(1,i):1),p=new Ye,f=new je;for(s=0;s<=i;s++){for(l=0;l<=n;l++)o=r+l/n*a,p.x=m*Math.cos(o),p.y=m*Math.sin(o),c.push(p.x,p.y,p.z),h.push(0,0,1),f.x=(p.x/e+1)/2,f.y=(p.y/e+1)/2,u.push(f.x,f.y);m+=d}for(s=0;s<i;s++){var g=s*(n+1);for(l=0;l<n;l++){var v=o=l+g,x=o+n+1,y=o+n+2,_=o+1;q.push(v,x,_),q.push(x,y,_)}}this.setIndex(q),this.addAttribute("position",new jn(c,3)),this.addAttribute("normal",new jn(h,3)),this.addAttribute("uv",new jn(u,2))}function io(t,e,n,i){Un.call(this),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:i},this.fromBufferGeometry(new ro(t,e,n,i)),this.mergeVertices()}function ro(t,e,n,i){Jn.call(this),this.type="LatheBufferGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:i},e=Math.floor(e)||12,n=n||0,i=i||2*Math.PI,i=ke.clamp(i,0,2*Math.PI);var r,a,o,s=[],l=[],q=[],c=1/e,h=new Ye,u=new je;for(a=0;a<=e;a++){var m=n+a*c*i,d=Math.sin(m),p=Math.cos(m);for(o=0;o<=t.length-1;o++)h.x=t[o].x*d,h.y=t[o].y,h.z=t[o].x*p,l.push(h.x,h.y,h.z),u.x=a/e,u.y=o/(t.length-1),q.push(u.x,u.y)}for(a=0;a<e;a++)for(o=0;o<t.length-1;o++){var f=r=o+a*t.length,g=r+t.length,v=r+t.length+1,x=r+1;s.push(f,g,x),s.push(g,v,x)}if(this.setIndex(s),this.addAttribute("position",new jn(l,3)),this.addAttribute("uv",new jn(q,2)),this.computeVertexNormals(),i===2*Math.PI){var y=this.attributes.normal.array,_=new Ye,b=new Ye,w=new Ye;for(r=e*t.length*3,a=0,o=0;a<t.length;a++,o+=3)_.x=y[o+0],_.y=y[o+1],_.z=y[o+2],b.x=y[r+o+0],b.y=y[r+o+1],b.z=y[r+o+2],w.addVectors(_,b).normalize(),y[o+0]=y[r+o+0]=w.x,y[o+1]=y[r+o+1]=w.y,y[o+2]=y[r+o+2]=w.z}}function ao(t,e){Un.call(this),this.type="ShapeGeometry","object"==typeof e&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),e=e.curveSegments),this.parameters={shapes:t,curveSegments:e},this.fromBufferGeometry(new oo(t,e)),this.mergeVertices()}function oo(t,e){Jn.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:t,curveSegments:e},e=e||12;var n=[],i=[],r=[],a=[],o=0,s=0;if(!1===Array.isArray(t))q(t);else for(var l=0;l<t.length;l++)q(t[l]),this.addGroup(o,s,l),o+=s,s=0;function q(t){var o,l,q,c=i.length/3,h=t.extractPoints(e),u=h.shape,m=h.holes;if(!1===ja.isClockWise(u))for(u=u.reverse(),o=0,l=m.length;o<l;o++)q=m[o],!0===ja.isClockWise(q)&&(m[o]=q.reverse());var d=ja.triangulateShape(u,m);for(o=0,l=m.length;o<l;o++)q=m[o],u=u.concat(q);for(o=0,l=u.length;o<l;o++){var p=u[o];i.push(p.x,p.y,0),r.push(0,0,1),a.push(p.x,p.y)}for(o=0,l=d.length;o<l;o++){var f=d[o],g=f[0]+c,v=f[1]+c,x=f[2]+c;n.push(g,v,x),s+=3}}this.setIndex(n),this.addAttribute("position",new jn(i,3)),this.addAttribute("normal",new jn(r,3)),this.addAttribute("uv",new jn(a,2))}function so(t,e){if(e.shapes=[],Array.isArray(t))for(var n=0,i=t.length;n<i;n++){var r=t[n];e.shapes.push(r.uuid)}else e.shapes.push(t.uuid);return e}function lo(t,e){Jn.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:e},e=void 0!==e?e:1;var n,i,r,a,o=[],s=Math.cos(ke.DEG2RAD*e),l=[0,0],q={},c=["a","b","c"];t.isBufferGeometry?(a=new Un).fromBufferGeometry(t):a=t.clone(),a.mergeVertices(),a.computeFaceNormals();for(var h=a.vertices,u=a.faces,m=0,d=u.length;m<d;m++)for(var p=u[m],f=0;f<3;f++)n=p[c[f]],i=p[c[(f+1)%3]],l[0]=Math.min(n,i),l[1]=Math.max(n,i),void 0===q[r=l[0]+","+l[1]]?q[r]={index1:l[0],index2:l[1],face1:m,face2:void 0}:q[r].face2=m;for(r in q){var g=q[r];if(void 0===g.face2||u[g.face1].normal.dot(u[g.face2].normal)<=s){var v=h[g.index1];o.push(v.x,v.y,v.z),v=h[g.index2],o.push(v.x,v.y,v.z)}}this.addAttribute("position",new jn(o,3))}function qo(t,e,n,i,r,a,o,s){Un.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:i,heightSegments:r,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new co(t,e,n,i,r,a,o,s)),this.mergeVertices()}function co(t,e,n,i,r,a,o,s){Jn.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:i,heightSegments:r,openEnded:a,thetaStart:o,thetaLength:s};var l=this;t=void 0!==t?t:1,e=void 0!==e?e:1,n=n||1,i=Math.floor(i)||8,r=Math.floor(r)||1,a=void 0!==a&&a,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var q=[],c=[],h=[],u=[],m=0,d=[],p=n/2,f=0;function g(n){var r,a,d,g=new je,v=new Ye,x=0,y=!0===n?t:e,_=!0===n?1:-1;for(a=m,r=1;r<=i;r++)c.push(0,p*_,0),h.push(0,_,0),u.push(.5,.5),m++;for(d=m,r=0;r<=i;r++){var b=r/i*s+o,w=Math.cos(b),E=Math.sin(b);v.x=y*E,v.y=p*_,v.z=y*w,c.push(v.x,v.y,v.z),h.push(0,_,0),g.x=.5*w+.5,g.y=.5*E*_+.5,u.push(g.x,g.y),m++}for(r=0;r<i;r++){var M=a+r,T=d+r;!0===n?q.push(T,T+1,M):q.push(T+1,T,M),x+=3}l.addGroup(f,x,!0===n?1:2),f+=x}!function(){var a,g,v=new Ye,x=new Ye,y=0,_=(e-t)/n;for(g=0;g<=r;g++){var b=[],w=g/r,E=w*(e-t)+t;for(a=0;a<=i;a++){var M=a/i,T=M*s+o,S=Math.sin(T),A=Math.cos(T);x.x=E*S,x.y=-w*n+p,x.z=E*A,c.push(x.x,x.y,x.z),v.set(S,_,A).normalize(),h.push(v.x,v.y,v.z),u.push(M,1-w),b.push(m++)}d.push(b)}for(a=0;a<i;a++)for(g=0;g<r;g++){var R=d[g][a],L=d[g+1][a],P=d[g+1][a+1],C=d[g][a+1];q.push(R,L,C),q.push(L,P,C),y+=6}l.addGroup(f,y,0),f+=y}(),!1===a&&(t>0&&g(!0),e>0&&g(!1)),this.setIndex(q),this.addAttribute("position",new jn(c,3)),this.addAttribute("normal",new jn(h,3)),this.addAttribute("uv",new jn(u,2))}function ho(t,e,n,i,r,a,o){qo.call(this,0,t,e,n,i,r,a,o),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:a,thetaLength:o}}function uo(t,e,n,i,r,a,o){co.call(this,0,t,e,n,i,r,a,o),this.type="ConeBufferGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:a,thetaLength:o}}function mo(t,e,n,i){Un.call(this),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i},this.fromBufferGeometry(new po(t,e,n,i)),this.mergeVertices()}function po(t,e,n,i){Jn.call(this),this.type="CircleBufferGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i},t=t||1,e=void 0!==e?Math.max(3,e):8,n=void 0!==n?n:0,i=void 0!==i?i:2*Math.PI;var r,a,o=[],s=[],l=[],q=[],c=new Ye,h=new je;for(s.push(0,0,0),l.push(0,0,1),q.push(.5,.5),a=0,r=3;a<=e;a++,r+=3){var u=n+a/e*i;c.x=t*Math.cos(u),c.y=t*Math.sin(u),s.push(c.x,c.y,c.z),l.push(0,0,1),h.x=(s[r]/t+1)/2,h.y=(s[r+1]/t+1)/2,q.push(h.x,h.y)}for(r=1;r<=e;r++)o.push(r,r+1,0);this.setIndex(o),this.addAttribute("position",new jn(s,3)),this.addAttribute("normal",new jn(l,3)),this.addAttribute("uv",new jn(q,2))}Qa.prototype=Object.create(Un.prototype),Qa.prototype.constructor=Qa,Ka.prototype=Object.create(Za.prototype),Ka.prototype.constructor=Ka,$a.prototype=Object.create(Un.prototype),$a.prototype.constructor=$a,to.prototype=Object.create(Jn.prototype),to.prototype.constructor=to,eo.prototype=Object.create(Un.prototype),eo.prototype.constructor=eo,no.prototype=Object.create(Jn.prototype),no.prototype.constructor=no,io.prototype=Object.create(Un.prototype),io.prototype.constructor=io,ro.prototype=Object.create(Jn.prototype),ro.prototype.constructor=ro,ao.prototype=Object.create(Un.prototype),ao.prototype.constructor=ao,ao.prototype.toJSON=function(){var t=Un.prototype.toJSON.call(this);return so(this.parameters.shapes,t)},oo.prototype=Object.create(Jn.prototype),oo.prototype.constructor=oo,oo.prototype.toJSON=function(){var t=Jn.prototype.toJSON.call(this);return so(this.parameters.shapes,t)},lo.prototype=Object.create(Jn.prototype),lo.prototype.constructor=lo,qo.prototype=Object.create(Un.prototype),qo.prototype.constructor=qo,co.prototype=Object.create(Jn.prototype),co.prototype.constructor=co,ho.prototype=Object.create(qo.prototype),ho.prototype.constructor=ho,uo.prototype=Object.create(co.prototype),uo.prototype.constructor=uo,mo.prototype=Object.create(Un.prototype),mo.prototype.constructor=mo,po.prototype=Object.create(Jn.prototype),po.prototype.constructor=po;var fo=Object.freeze({WireframeGeometry:ra,ParametricGeometry:aa,ParametricBufferGeometry:oa,TetrahedronGeometry:qa,TetrahedronBufferGeometry:ca,OctahedronGeometry:ha,OctahedronBufferGeometry:ua,IcosahedronGeometry:ma,IcosahedronBufferGeometry:da,DodecahedronGeometry:pa,DodecahedronBufferGeometry:fa,PolyhedronGeometry:sa,PolyhedronBufferGeometry:la,TubeGeometry:ga,TubeBufferGeometry:va,TorusKnotGeometry:xa,TorusKnotBufferGeometry:ya,TorusGeometry:_a,TorusBufferGeometry:ba,TextGeometry:Qa,TextBufferGeometry:Ka,SphereGeometry:$a,SphereBufferGeometry:to,RingGeometry:eo,RingBufferGeometry:no,PlaneGeometry:$n,PlaneBufferGeometry:ti,LatheGeometry:io,LatheBufferGeometry:ro,ShapeGeometry:ao,ShapeBufferGeometry:oo,ExtrudeGeometry:Ya,ExtrudeBufferGeometry:Za,EdgesGeometry:lo,ConeGeometry:ho,ConeBufferGeometry:uo,CylinderGeometry:qo,CylinderBufferGeometry:co,CircleGeometry:mo,CircleBufferGeometry:po,BoxGeometry:Qn,BoxBufferGeometry:Kn});function go(t){qi.call(this),this.type="ShadowMaterial",this.color=new gn(0),this.transparent=!0,this.setValues(t)}function vo(t){hi.call(this,t),this.type="RawShaderMaterial"}function xo(t){qi.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new gn(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new gn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new je(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function yo(t){xo.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(t)}function _o(t){qi.call(this),this.type="MeshPhongMaterial",this.color=new gn(16777215),this.specular=new gn(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new gn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new je(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=lt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function bo(t){_o.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(t)}function wo(t){qi.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new je(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Eo(t){qi.call(this),this.type="MeshLambertMaterial",this.color=new gn(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new gn(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=lt,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Mo(t){Yr.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}go.prototype=Object.create(qi.prototype),go.prototype.constructor=go,go.prototype.isShadowMaterial=!0,go.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.color.copy(t.color),this},vo.prototype=Object.create(hi.prototype),vo.prototype.constructor=vo,vo.prototype.isRawShaderMaterial=!0,xo.prototype=Object.create(qi.prototype),xo.prototype.constructor=xo,xo.prototype.isMeshStandardMaterial=!0,xo.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},yo.prototype=Object.create(xo.prototype),yo.prototype.constructor=yo,yo.prototype.isMeshPhysicalMaterial=!0,yo.prototype.copy=function(t){return xo.prototype.copy.call(this,t),this.defines={PHYSICAL:""},this.reflectivity=t.reflectivity,this.clearCoat=t.clearCoat,this.clearCoatRoughness=t.clearCoatRoughness,this},_o.prototype=Object.create(qi.prototype),_o.prototype.constructor=_o,_o.prototype.isMeshPhongMaterial=!0,_o.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},bo.prototype=Object.create(_o.prototype),bo.prototype.constructor=bo,bo.prototype.isMeshToonMaterial=!0,bo.prototype.copy=function(t){return _o.prototype.copy.call(this,t),this.gradientMap=t.gradientMap,this},wo.prototype=Object.create(qi.prototype),wo.prototype.constructor=wo,wo.prototype.isMeshNormalMaterial=!0,wo.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Eo.prototype=Object.create(qi.prototype),Eo.prototype.constructor=Eo,Eo.prototype.isMeshLambertMaterial=!0,Eo.prototype.copy=function(t){return qi.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Mo.prototype=Object.create(Yr.prototype),Mo.prototype.constructor=Mo,Mo.prototype.isLineDashedMaterial=!0,Mo.prototype.copy=function(t){return Yr.prototype.copy.call(this,t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this};var To=Object.freeze({ShadowMaterial:go,SpriteMaterial:Gr,RawShaderMaterial:vo,ShaderMaterial:hi,PointsMaterial:Kr,MeshPhysicalMaterial:yo,MeshStandardMaterial:xo,MeshPhongMaterial:_o,MeshToonMaterial:bo,MeshNormalMaterial:wo,MeshLambertMaterial:Eo,MeshDepthMaterial:Ar,MeshDistanceMaterial:Rr,MeshBasicMaterial:ci,LineDashedMaterial:Mo,LineBasicMaterial:Yr,Material:qi}),So={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};function Ao(t,e,n){var i=this,r=!1,a=0,o=0,s=void 0;this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===r&&void 0!==i.onStart&&i.onStart(t,a,o),r=!0},this.itemEnd=function(t){a++,void 0!==i.onProgress&&i.onProgress(t,a,o),a===o&&(r=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(t){void 0!==i.onError&&i.onError(t)},this.resolveURL=function(t){return s?s(t):t},this.setURLModifier=function(t){return s=t,this}}var Ro=new Ao,Lo={};function Po(t){this.manager=void 0!==t?t:Ro}function Co(t){this.manager=void 0!==t?t:Ro,this._parser=null}function Oo(t){this.manager=void 0!==t?t:Ro,this._parser=null}function Io(t){this.manager=void 0!==t?t:Ro}function No(t){this.manager=void 0!==t?t:Ro}function Uo(t){this.manager=void 0!==t?t:Ro}function Do(){this.type="Curve",this.arcLengthDivisions=200}function Bo(t,e,n,i,r,a,o,s){Do.call(this),this.type="EllipseCurve",this.aX=t||0,this.aY=e||0,this.xRadius=n||1,this.yRadius=i||1,this.aStartAngle=r||0,this.aEndAngle=a||2*Math.PI,this.aClockwise=o||!1,this.aRotation=s||0}function Fo(t,e,n,i,r,a){Bo.call(this,t,e,n,n,i,r,a),this.type="ArcCurve"}function zo(){var t=0,e=0,n=0,i=0;function r(r,a,o,s){t=r,e=o,n=-3*r+3*a-2*o-s,i=2*r-2*a+o+s}return{initCatmullRom:function(t,e,n,i,a){r(e,n,a*(n-t),a*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,a,o,s){var l=(e-t)/a-(n-t)/(a+o)+(n-e)/o,q=(n-e)/o-(i-e)/(o+s)+(i-n)/s;r(e,n,l*=o,q*=o)},calc:function(r){var a=r*r;return t+e*r+n*a+i*(a*r)}}}Object.assign(Po.prototype,{load:function(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=So.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout(function(){e&&e(a),r.manager.itemEnd(t)},0),a;if(void 0===Lo[t]){var o=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(o){var s=o[1],l=!!o[2],q=o[3];q=window.decodeURIComponent(q),l&&(q=window.atob(q));try{var c,h=(this.responseType||"").toLowerCase();switch(h){case"arraybuffer":case"blob":for(var u=new Uint8Array(q.length),m=0;m<q.length;m++)u[m]=q.charCodeAt(m);c="blob"===h?new Blob([u.buffer],{type:s}):u.buffer;break;case"document":var d=new DOMParser;c=d.parseFromString(q,s);break;case"json":c=JSON.parse(q);break;default:c=q}window.setTimeout(function(){e&&e(c),r.manager.itemEnd(t)},0)}catch(e){window.setTimeout(function(){i&&i(e),r.manager.itemEnd(t),r.manager.itemError(t)},0)}}else{Lo[t]=[],Lo[t].push({onLoad:e,onProgress:n,onError:i});var p=new XMLHttpRequest;for(var f in p.open("GET",t,!0),p.addEventListener("load",function(e){var n=this.response;So.add(t,n);var i=Lo[t];if(delete Lo[t],200===this.status){for(var a=0,o=i.length;a<o;a++){(s=i[a]).onLoad&&s.onLoad(n)}r.manager.itemEnd(t)}else if(0===this.status){console.warn("THREE.FileLoader: HTTP Status 0 received.");for(a=0,o=i.length;a<o;a++){(s=i[a]).onLoad&&s.onLoad(n)}r.manager.itemEnd(t)}else{for(a=0,o=i.length;a<o;a++){var s;(s=i[a]).onError&&s.onError(e)}r.manager.itemEnd(t),r.manager.itemError(t)}},!1),p.addEventListener("progress",function(e){for(var n=Lo[t],i=0,r=n.length;i<r;i++){var a=n[i];a.onProgress&&a.onProgress(e)}},!1),p.addEventListener("error",function(e){var n=Lo[t];delete Lo[t];for(var i=0,a=n.length;i<a;i++){var o=n[i];o.onError&&o.onError(e)}r.manager.itemEnd(t),r.manager.itemError(t)},!1),void 0!==this.responseType&&(p.responseType=this.responseType),void 0!==this.withCredentials&&(p.withCredentials=this.withCredentials),p.overrideMimeType&&p.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)p.setRequestHeader(f,this.requestHeader[f]);p.send(null)}return r.manager.itemStart(t),p}Lo[t].push({onLoad:e,onProgress:n,onError:i})},setPath:function(t){return this.path=t,this},setResponseType:function(t){return this.responseType=t,this},setWithCredentials:function(t){return this.withCredentials=t,this},setMimeType:function(t){return this.mimeType=t,this},setRequestHeader:function(t){return this.requestHeader=t,this}}),Object.assign(Co.prototype,{load:function(t,e,n,i){var r=this,a=[],o=new na;o.image=a;var s=new Po(this.manager);function l(l){s.load(t[l],function(t){var n=r._parser(t,!0);a[l]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},6===(q+=1)&&(1===n.mipmapCount&&(o.minFilter=Lt),o.format=n.format,o.needsUpdate=!0,e&&e(o))},n,i)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(t))for(var q=0,c=0,h=t.length;c<h;++c)l(c);else s.load(t,function(t){var n=r._parser(t,!0);if(n.isCubemap)for(var i=n.mipmaps.length/n.mipmapCount,s=0;s<i;s++){a[s]={mipmaps:[]};for(var l=0;l<n.mipmapCount;l++)a[s].mipmaps.push(n.mipmaps[s*n.mipmapCount+l]),a[s].format=n.format,a[s].width=n.width,a[s].height=n.height}else o.image.width=n.width,o.image.height=n.height,o.mipmaps=n.mipmaps;1===n.mipmapCount&&(o.minFilter=Lt),o.format=n.format,o.needsUpdate=!0,e&&e(o)},n,i);return o},setPath:function(t){return this.path=t,this}}),Object.assign(Oo.prototype,{load:function(t,e,n,i){var r=this,a=new ln,o=new Po(this.manager);return o.setResponseType("arraybuffer"),o.load(t,function(t){var n=r._parser(t);n&&(void 0!==n.image?a.image=n.image:void 0!==n.data&&(a.image.width=n.width,a.image.height=n.height,a.image.data=n.data),a.wrapS=void 0!==n.wrapS?n.wrapS:Mt,a.wrapT=void 0!==n.wrapT?n.wrapT:Mt,a.magFilter=void 0!==n.magFilter?n.magFilter:Lt,a.minFilter=void 0!==n.minFilter?n.minFilter:Ct,a.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.format&&(a.format=n.format),void 0!==n.type&&(a.type=n.type),void 0!==n.mipmaps&&(a.mipmaps=n.mipmaps),1===n.mipmapCount&&(a.minFilter=Lt),a.needsUpdate=!0,e&&e(a,n))},n,i),a}}),Object.assign(Io.prototype,{crossOrigin:"Anonymous",load:function(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var r=this,a=So.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout(function(){e&&e(a),r.manager.itemEnd(t)},0),a;var o=document.createElementNS("http://www.w3.org/1999/xhtml","img");return o.addEventListener("load",function(){So.add(t,this),e&&e(this),r.manager.itemEnd(t)},!1),o.addEventListener("error",function(e){i&&i(e),r.manager.itemEnd(t),r.manager.itemError(t)},!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),r.manager.itemStart(t),o.src=t,o},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(No.prototype,{crossOrigin:"Anonymous",load:function(t,e,n,i){var r=new gi,a=new Io(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);var o=0;function s(n){a.load(t[n],function(t){r.images[n]=t,6===++o&&(r.needsUpdate=!0,e&&e(r))},void 0,i)}for(var l=0;l<t.length;++l)s(l);return r},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(Uo.prototype,{crossOrigin:"Anonymous",load:function(t,e,n,i){var r=new rn,a=new Io(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(t,function(n){r.image=n;var i=t.search(/\.(jpg|jpeg)$/)>0||0===t.search(/^data\:image\/jpeg/);r.format=i?Wt:Xt,r.needsUpdate=!0,void 0!==e&&e(r)},n,i),r},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this}}),Object.assign(Do.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(t,e){var n=this.getUtoTmapping(t);return this.getPoint(n,e)},getPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return e},getSpacedPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e},getLength:function(){var t=this.getLengths();return t[t.length-1]},getLengths:function(t){if(void 0===t&&(t=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var e,n,i=[],r=this.getPoint(0),a=0;for(i.push(0),n=1;n<=t;n++)a+=(e=this.getPoint(n/t)).distanceTo(r),i.push(a),r=e;return this.cacheArcLengths=i,i},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(t,e){var n,i=this.getLengths(),r=0,a=i.length;n=e||t*i[a-1];for(var o,s=0,l=a-1;s<=l;)if((o=i[r=Math.floor(s+(l-s)/2)]-n)<0)s=r+1;else{if(!(o>0)){l=r;break}l=r-1}if(i[r=l]===n)return r/(a-1);var q=i[r];return(r+(n-q)/(i[r+1]-q))/(a-1)},getTangent:function(t){var e=t-1e-4,n=t+1e-4;e<0&&(e=0),n>1&&(n=1);var i=this.getPoint(e);return this.getPoint(n).clone().sub(i).normalize()},getTangentAt:function(t){var e=this.getUtoTmapping(t);return this.getTangent(e)},computeFrenetFrames:function(t,e){var n,i,r,a=new Ye,o=[],s=[],l=[],q=new Ye,c=new We;for(n=0;n<=t;n++)i=n/t,o[n]=this.getTangentAt(i),o[n].normalize();s[0]=new Ye,l[0]=new Ye;var h=Number.MAX_VALUE,u=Math.abs(o[0].x),m=Math.abs(o[0].y),d=Math.abs(o[0].z);for(u<=h&&(h=u,a.set(1,0,0)),m<=h&&(h=m,a.set(0,1,0)),d<=h&&a.set(0,0,1),q.crossVectors(o[0],a).normalize(),s[0].crossVectors(o[0],q),l[0].crossVectors(o[0],s[0]),n=1;n<=t;n++)s[n]=s[n-1].clone(),l[n]=l[n-1].clone(),q.crossVectors(o[n-1],o[n]),q.length()>Number.EPSILON&&(q.normalize(),r=Math.acos(ke.clamp(o[n-1].dot(o[n]),-1,1)),s[n].applyMatrix4(c.makeRotationAxis(q,r))),l[n].crossVectors(o[n],s[n]);if(!0===e)for(r=Math.acos(ke.clamp(s[0].dot(s[t]),-1,1)),r/=t,o[0].dot(q.crossVectors(s[0],s[t]))>0&&(r=-r),n=1;n<=t;n++)s[n].applyMatrix4(c.makeRotationAxis(o[n],r*n)),l[n].crossVectors(o[n],s[n]);return{tangents:o,normals:s,binormals:l}},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this},toJSON:function(){var t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t},fromJSON:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}),Bo.prototype=Object.create(Do.prototype),Bo.prototype.constructor=Bo,Bo.prototype.isEllipseCurve=!0,Bo.prototype.getPoint=function(t,e){for(var n=e||new je,i=2*Math.PI,r=this.aEndAngle-this.aStartAngle,a=Math.abs(r)<Number.EPSILON;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(r=a?0:i),!0!==this.aClockwise||a||(r===i?r=-i:r-=i);var o=this.aStartAngle+t*r,s=this.aX+this.xRadius*Math.cos(o),l=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){var q=Math.cos(this.aRotation),c=Math.sin(this.aRotation),h=s-this.aX,u=l-this.aY;s=h*q-u*c+this.aX,l=h*c+u*q+this.aY}return n.set(s,l)},Bo.prototype.copy=function(t){return Do.prototype.copy.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},Bo.prototype.toJSON=function(){var t=Do.prototype.toJSON.call(this);return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t},Bo.prototype.fromJSON=function(t){return Do.prototype.fromJSON.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},Fo.prototype=Object.create(Bo.prototype),Fo.prototype.constructor=Fo,Fo.prototype.isArcCurve=!0;var Ho=new Ye,Go=new zo,Vo=new zo,ko=new zo;function jo(t,e,n,i){Do.call(this),this.type="CatmullRomCurve3",this.points=t||[],this.closed=e||!1,this.curveType=n||"centripetal",this.tension=i||.5}function Wo(t,e,n,i,r){var a=.5*(i-e),o=.5*(r-n),s=t*t;return(2*n-2*i+a+o)*(t*s)+(-3*n+3*i-2*a-o)*s+a*t+n}function Xo(t,e,n,i){return function(t,e){var n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,i)}function Yo(t,e,n,i,r){return function(t,e){var n=1-t;return n*n*n*e}(t,e)+function(t,e){var n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,i)+function(t,e){return t*t*t*e}(t,r)}function Zo(t,e,n,i){Do.call(this),this.type="CubicBezierCurve",this.v0=t||new je,this.v1=e||new je,this.v2=n||new je,this.v3=i||new je}function Jo(t,e,n,i){Do.call(this),this.type="CubicBezierCurve3",this.v0=t||new Ye,this.v1=e||new Ye,this.v2=n||new Ye,this.v3=i||new Ye}function Qo(t,e){Do.call(this),this.type="LineCurve",this.v1=t||new je,this.v2=e||new je}function Ko(t,e){Do.call(this),this.type="LineCurve3",this.v1=t||new Ye,this.v2=e||new Ye}function $o(t,e,n){Do.call(this),this.type="QuadraticBezierCurve",this.v0=t||new je,this.v1=e||new je,this.v2=n||new je}function ts(t,e,n){Do.call(this),this.type="QuadraticBezierCurve3",this.v0=t||new Ye,this.v1=e||new Ye,this.v2=n||new Ye}function es(t){Do.call(this),this.type="SplineCurve",this.points=t||[]}jo.prototype=Object.create(Do.prototype),jo.prototype.constructor=jo,jo.prototype.isCatmullRomCurve3=!0,jo.prototype.getPoint=function(t,e){var n,i,r,a,o=e||new Ye,s=this.points,l=s.length,q=(l-(this.closed?0:1))*t,c=Math.floor(q),h=q-c;if(this.closed?c+=c>0?0:(Math.floor(Math.abs(c)/l)+1)*l:0===h&&c===l-1&&(c=l-2,h=1),this.closed||c>0?n=s[(c-1)%l]:(Ho.subVectors(s[0],s[1]).add(s[0]),n=Ho),i=s[c%l],r=s[(c+1)%l],this.closed||c+2<l?a=s[(c+2)%l]:(Ho.subVectors(s[l-1],s[l-2]).add(s[l-1]),a=Ho),"centripetal"===this.curveType||"chordal"===this.curveType){var u="chordal"===this.curveType?.5:.25,m=Math.pow(n.distanceToSquared(i),u),d=Math.pow(i.distanceToSquared(r),u),p=Math.pow(r.distanceToSquared(a),u);d<1e-4&&(d=1),m<1e-4&&(m=d),p<1e-4&&(p=d),Go.initNonuniformCatmullRom(n.x,i.x,r.x,a.x,m,d,p),Vo.initNonuniformCatmullRom(n.y,i.y,r.y,a.y,m,d,p),ko.initNonuniformCatmullRom(n.z,i.z,r.z,a.z,m,d,p)}else"catmullrom"===this.curveType&&(Go.initCatmullRom(n.x,i.x,r.x,a.x,this.tension),Vo.initCatmullRom(n.y,i.y,r.y,a.y,this.tension),ko.initCatmullRom(n.z,i.z,r.z,a.z,this.tension));return o.set(Go.calc(h),Vo.calc(h),ko.calc(h)),o},jo.prototype.copy=function(t){Do.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var i=t.points[e];this.points.push(i.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},jo.prototype.toJSON=function(){var t=Do.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var i=this.points[e];t.points.push(i.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t},jo.prototype.fromJSON=function(t){Do.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var i=t.points[e];this.points.push((new Ye).fromArray(i))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},Zo.prototype=Object.create(Do.prototype),Zo.prototype.constructor=Zo,Zo.prototype.isCubicBezierCurve=!0,Zo.prototype.getPoint=function(t,e){var n=e||new je,i=this.v0,r=this.v1,a=this.v2,o=this.v3;return n.set(Yo(t,i.x,r.x,a.x,o.x),Yo(t,i.y,r.y,a.y,o.y)),n},Zo.prototype.copy=function(t){return Do.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},Zo.prototype.toJSON=function(){var t=Do.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},Zo.prototype.fromJSON=function(t){return Do.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},Jo.prototype=Object.create(Do.prototype),Jo.prototype.constructor=Jo,Jo.prototype.isCubicBezierCurve3=!0,Jo.prototype.getPoint=function(t,e){var n=e||new Ye,i=this.v0,r=this.v1,a=this.v2,o=this.v3;return n.set(Yo(t,i.x,r.x,a.x,o.x),Yo(t,i.y,r.y,a.y,o.y),Yo(t,i.z,r.z,a.z,o.z)),n},Jo.prototype.copy=function(t){return Do.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},Jo.prototype.toJSON=function(){var t=Do.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},Jo.prototype.fromJSON=function(t){return Do.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},Qo.prototype=Object.create(Do.prototype),Qo.prototype.constructor=Qo,Qo.prototype.isLineCurve=!0,Qo.prototype.getPoint=function(t,e){var n=e||new je;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},Qo.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},Qo.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},Qo.prototype.copy=function(t){return Do.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Qo.prototype.toJSON=function(){var t=Do.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Qo.prototype.fromJSON=function(t){return Do.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Ko.prototype=Object.create(Do.prototype),Ko.prototype.constructor=Ko,Ko.prototype.isLineCurve3=!0,Ko.prototype.getPoint=function(t,e){var n=e||new Ye;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},Ko.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},Ko.prototype.copy=function(t){return Do.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Ko.prototype.toJSON=function(){var t=Do.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Ko.prototype.fromJSON=function(t){return Do.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},$o.prototype=Object.create(Do.prototype),$o.prototype.constructor=$o,$o.prototype.isQuadraticBezierCurve=!0,$o.prototype.getPoint=function(t,e){var n=e||new je,i=this.v0,r=this.v1,a=this.v2;return n.set(Xo(t,i.x,r.x,a.x),Xo(t,i.y,r.y,a.y)),n},$o.prototype.copy=function(t){return Do.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},$o.prototype.toJSON=function(){var t=Do.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},$o.prototype.fromJSON=function(t){return Do.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},ts.prototype=Object.create(Do.prototype),ts.prototype.constructor=ts,ts.prototype.isQuadraticBezierCurve3=!0,ts.prototype.getPoint=function(t,e){var n=e||new Ye,i=this.v0,r=this.v1,a=this.v2;return n.set(Xo(t,i.x,r.x,a.x),Xo(t,i.y,r.y,a.y),Xo(t,i.z,r.z,a.z)),n},ts.prototype.copy=function(t){return Do.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},ts.prototype.toJSON=function(){var t=Do.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},ts.prototype.fromJSON=function(t){return Do.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},es.prototype=Object.create(Do.prototype),es.prototype.constructor=es,es.prototype.isSplineCurve=!0,es.prototype.getPoint=function(t,e){var n=e||new je,i=this.points,r=(i.length-1)*t,a=Math.floor(r),o=r-a,s=i[0===a?a:a-1],l=i[a],q=i[a>i.length-2?i.length-1:a+1],c=i[a>i.length-3?i.length-1:a+2];return n.set(Wo(o,s.x,l.x,q.x,c.x),Wo(o,s.y,l.y,q.y,c.y)),n},es.prototype.copy=function(t){Do.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var i=t.points[e];this.points.push(i.clone())}return this},es.prototype.toJSON=function(){var t=Do.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var i=this.points[e];t.points.push(i.toArray())}return t},es.prototype.fromJSON=function(t){Do.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var i=t.points[e];this.points.push((new je).fromArray(i))}return this};var ns=Object.freeze({ArcCurve:Fo,CatmullRomCurve3:jo,CubicBezierCurve:Zo,CubicBezierCurve3:Jo,EllipseCurve:Bo,LineCurve:Qo,LineCurve3:Ko,QuadraticBezierCurve:$o,QuadraticBezierCurve3:ts,SplineCurve:es});function is(){Do.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function rs(t){is.call(this),this.type="Path",this.currentPoint=new je,t&&this.setFromPoints(t)}function as(t){rs.call(this,t),this.uuid=ke.generateUUID(),this.type="Shape",this.holes=[]}function os(t,e){Rn.call(this),this.type="Light",this.color=new gn(t),this.intensity=void 0!==e?e:1,this.receiveShadow=void 0}function ss(t,e,n){os.call(this,t,n),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(Rn.DefaultUp),this.updateMatrix(),this.groundColor=new gn(e)}function ls(t){this.camera=t,this.bias=0,this.radius=1,this.mapSize=new je(512,512),this.map=null,this.matrix=new We}function qs(){ls.call(this,new Nr(50,1,.5,500))}function cs(t,e,n,i,r,a){os.call(this,t,e),this.type="SpotLight",this.position.copy(Rn.DefaultUp),this.updateMatrix(),this.target=new Rn,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(t){this.intensity=t/Math.PI}}),this.distance=void 0!==n?n:0,this.angle=void 0!==i?i:Math.PI/3,this.penumbra=void 0!==r?r:0,this.decay=void 0!==a?a:1,this.shadow=new qs}function hs(t,e,n,i){os.call(this,t,e),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(t){this.intensity=t/(4*Math.PI)}}),this.distance=void 0!==n?n:0,this.decay=void 0!==i?i:1,this.shadow=new ls(new Nr(90,1,.5,500))}function us(){ls.call(this,new Pn(-5,5,5,-5,.5,500))}function ms(t,e){os.call(this,t,e),this.type="DirectionalLight",this.position.copy(Rn.DefaultUp),this.updateMatrix(),this.target=new Rn,this.shadow=new us}function ds(t,e){os.call(this,t,e),this.type="AmbientLight",this.castShadow=void 0}function ps(t,e,n,i){os.call(this,t,e),this.type="RectAreaLight",this.width=void 0!==n?n:10,this.height=void 0!==i?i:10}function fs(t,e,n,i){Ss.call(this,t,e,n,i)}function gs(t,e,n){Ss.call(this,t,e,n)}function vs(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n}function xs(t,e,n,i){vs.call(this,t,e,n,i)}function ys(t,e,n,i){Ss.call(this,t,e,n,i)}function _s(t,e,n,i){Ss.call(this,t,e,n,i)}function bs(t,e,n,i){Ss.call(this,t,e,n,i)}function ws(t,e,n,i){vs.call(this,t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function Es(t,e,n,i){vs.call(this,t,e,n,i)}function Ms(t,e,n,i){vs.call(this,t,e,n,i)}is.prototype=Object.assign(Object.create(Do.prototype),{constructor:is,add:function(t){this.curves.push(t)},closePath:function(){var t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new Qo(e,t))},getPoint:function(t){for(var e=t*this.getLength(),n=this.getCurveLengths(),i=0;i<n.length;){if(n[i]>=e){var r=n[i]-e,a=this.curves[i],o=a.getLength(),s=0===o?0:1-r/o;return a.getPointAt(s)}i++}return null},getLength:function(){var t=this.getCurveLengths();return t[t.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var t=[],e=0,n=0,i=this.curves.length;n<i;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t},getSpacedPoints:function(t){void 0===t&&(t=40);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e},getPoints:function(t){t=t||12;for(var e,n=[],i=0,r=this.curves;i<r.length;i++)for(var a=r[i],o=a&&a.isEllipseCurve?2*t:a&&a.isLineCurve?1:a&&a.isSplineCurve?t*a.points.length:t,s=a.getPoints(o),l=0;l<s.length;l++){var q=s[l];e&&e.equals(q)||(n.push(q),e=q)}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n},copy:function(t){Do.prototype.copy.call(this,t),this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var i=t.curves[e];this.curves.push(i.clone())}return this.autoClose=t.autoClose,this},toJSON:function(){var t=Do.prototype.toJSON.call(this);t.autoClose=this.autoClose,t.curves=[];for(var e=0,n=this.curves.length;e<n;e++){var i=this.curves[e];t.curves.push(i.toJSON())}return t},fromJSON:function(t){Do.prototype.fromJSON.call(this,t),this.autoClose=t.autoClose,this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var i=t.curves[e];this.curves.push((new ns[i.type]).fromJSON(i))}return this}}),rs.prototype=Object.assign(Object.create(is.prototype),{constructor:rs,setFromPoints:function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y)},moveTo:function(t,e){this.currentPoint.set(t,e)},lineTo:function(t,e){var n=new Qo(this.currentPoint.clone(),new je(t,e));this.curves.push(n),this.currentPoint.set(t,e)},quadraticCurveTo:function(t,e,n,i){var r=new $o(this.currentPoint.clone(),new je(t,e),new je(n,i));this.curves.push(r),this.currentPoint.set(n,i)},bezierCurveTo:function(t,e,n,i,r,a){var o=new Zo(this.currentPoint.clone(),new je(t,e),new je(n,i),new je(r,a));this.curves.push(o),this.currentPoint.set(r,a)},splineThru:function(t){var e=new es([this.currentPoint.clone()].concat(t));this.curves.push(e),this.currentPoint.copy(t[t.length-1])},arc:function(t,e,n,i,r,a){var o=this.currentPoint.x,s=this.currentPoint.y;this.absarc(t+o,e+s,n,i,r,a)},absarc:function(t,e,n,i,r,a){this.absellipse(t,e,n,n,i,r,a)},ellipse:function(t,e,n,i,r,a,o,s){var l=this.currentPoint.x,q=this.currentPoint.y;this.absellipse(t+l,e+q,n,i,r,a,o,s)},absellipse:function(t,e,n,i,r,a,o,s){var l=new Bo(t,e,n,i,r,a,o,s);if(this.curves.length>0){var q=l.getPoint(0);q.equals(this.currentPoint)||this.lineTo(q.x,q.y)}this.curves.push(l);var c=l.getPoint(1);this.currentPoint.copy(c)},copy:function(t){return is.prototype.copy.call(this,t),this.currentPoint.copy(t.currentPoint),this},toJSON:function(){var t=is.prototype.toJSON.call(this);return t.currentPoint=this.currentPoint.toArray(),t},fromJSON:function(t){return is.prototype.fromJSON.call(this,t),this.currentPoint.fromArray(t.currentPoint),this}}),as.prototype=Object.assign(Object.create(rs.prototype),{constructor:as,getPointsHoles:function(t){for(var e=[],n=0,i=this.holes.length;n<i;n++)e[n]=this.holes[n].getPoints(t);return e},extractPoints:function(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}},copy:function(t){rs.prototype.copy.call(this,t),this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var i=t.holes[e];this.holes.push(i.clone())}return this},toJSON:function(){var t=rs.prototype.toJSON.call(this);t.uuid=this.uuid,t.holes=[];for(var e=0,n=this.holes.length;e<n;e++){var i=this.holes[e];t.holes.push(i.toJSON())}return t},fromJSON:function(t){rs.prototype.fromJSON.call(this,t),this.uuid=t.uuid,this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var i=t.holes[e];this.holes.push((new rs).fromJSON(i))}return this}}),os.prototype=Object.assign(Object.create(Rn.prototype),{constructor:os,isLight:!0,copy:function(t){return Rn.prototype.copy.call(this,t),this.color.copy(t.color),this.intensity=t.intensity,this},toJSON:function(t){var e=Rn.prototype.toJSON.call(this,t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}),ss.prototype=Object.assign(Object.create(os.prototype),{constructor:ss,isHemisphereLight:!0,copy:function(t){return os.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}),Object.assign(ls.prototype,{copy:function(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t={};return 0!==this.bias&&(t.bias=this.bias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}),qs.prototype=Object.assign(Object.create(ls.prototype),{constructor:qs,isSpotLightShadow:!0,update:function(t){var e=this.camera,n=2*ke.RAD2DEG*t.angle,i=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;n===e.fov&&i===e.aspect&&r===e.far||(e.fov=n,e.aspect=i,e.far=r,e.updateProjectionMatrix())}}),cs.prototype=Object.assign(Object.create(os.prototype),{constructor:cs,isSpotLight:!0,copy:function(t){return os.prototype.copy.call(this,t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),hs.prototype=Object.assign(Object.create(os.prototype),{constructor:hs,isPointLight:!0,copy:function(t){return os.prototype.copy.call(this,t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}),us.prototype=Object.assign(Object.create(ls.prototype),{constructor:us}),ms.prototype=Object.assign(Object.create(os.prototype),{constructor:ms,isDirectionalLight:!0,copy:function(t){return os.prototype.copy.call(this,t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),ds.prototype=Object.assign(Object.create(os.prototype),{constructor:ds,isAmbientLight:!0}),ps.prototype=Object.assign(Object.create(os.prototype),{constructor:ps,isRectAreaLight:!0,copy:function(t){return os.prototype.copy.call(this,t),this.width=t.width,this.height=t.height,this},toJSON:function(t){var e=os.prototype.toJSON.call(this,t);return e.object.width=this.width,e.object.height=this.height,e}}),fs.prototype=Object.assign(Object.create(Ss.prototype),{constructor:fs,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:Me,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),gs.prototype=Object.assign(Object.create(Ss.prototype),{constructor:gs,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:Me,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Object.assign(vs.prototype,{evaluate:function(t){var e=this.parameterPositions,n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{var a;n:{i:if(!(t<i)){for(var o=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,r)}if(n===o)break;if(r=i,t<(i=e[++n]))break e}a=e.length;break n}if(t>=r)break t;var s=e[1];t<s&&(n=2,r=s);for(o=n-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(n===o)break;if(i=r,t>=(r=e[--n-1]))break e}a=n,n=0}for(;n<a;){var l=n+a>>>1;t<e[l]?a=l:n=l+1}if(i=e[n],void 0===(r=e[n-1]))return this._cachedIndex=0,this.beforeStart_(0,t,i);if(void 0===i)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,r,t)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(t){for(var e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i,a=0;a!==i;++a)e[a]=n[r+a];return e},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),Object.assign(vs.prototype,{beforeStart_:vs.prototype.copySampleValue_,afterEnd_:vs.prototype.copySampleValue_}),xs.prototype=Object.assign(Object.create(vs.prototype),{constructor:xs,interpolate_:function(t,e,n,i){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,l=(n-e)/(i-e),q=s+o;s!==q;s+=4)Xe.slerpFlat(r,0,a,s-o,a,s,l);return r}}),ys.prototype=Object.assign(Object.create(Ss.prototype),{constructor:ys,ValueTypeName:"quaternion",DefaultInterpolation:Te,InterpolantFactoryMethodLinear:function(t){return new xs(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:void 0}),_s.prototype=Object.assign(Object.create(Ss.prototype),{constructor:_s,ValueTypeName:"color"}),bs.prototype=Object.assign(Object.create(Ss.prototype),{constructor:bs,ValueTypeName:"number"}),ws.prototype=Object.assign(Object.create(vs.prototype),{constructor:ws,DefaultSettings_:{endingStart:Ae,endingEnd:Ae},intervalChanged_:function(t,e,n){var i=this.parameterPositions,r=t-2,a=t+1,o=i[r],s=i[a];if(void 0===o)switch(this.getSettings_().endingStart){case Re:r=t,o=2*e-n;break;case Le:o=e+i[r=i.length-2]-i[r+1];break;default:r=t,o=n}if(void 0===s)switch(this.getSettings_().endingEnd){case Re:a=t,s=2*n-e;break;case Le:a=1,s=n+i[1]-i[0];break;default:a=t-1,s=e}var l=.5*(n-e),q=this.valueSize;this._weightPrev=l/(e-o),this._weightNext=l/(s-n),this._offsetPrev=r*q,this._offsetNext=a*q},interpolate_:function(t,e,n,i){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,l=s-o,q=this._offsetPrev,c=this._offsetNext,h=this._weightPrev,u=this._weightNext,m=(n-e)/(i-e),d=m*m,p=d*m,f=-h*p+2*h*d-h*m,g=(1+h)*p+(-1.5-2*h)*d+(-.5+h)*m+1,v=(-1-u)*p+(1.5+u)*d+.5*m,x=u*p-u*d,y=0;y!==o;++y)r[y]=f*a[q+y]+g*a[l+y]+v*a[s+y]+x*a[c+y];return r}}),Es.prototype=Object.assign(Object.create(vs.prototype),{constructor:Es,interpolate_:function(t,e,n,i){for(var r=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,l=s-o,q=(n-e)/(i-e),c=1-q,h=0;h!==o;++h)r[h]=a[l+h]*c+a[s+h]*q;return r}}),Ms.prototype=Object.assign(Object.create(vs.prototype),{constructor:Ms,interpolate_:function(t){return this.copySampleValue_(t-1)}});var Ts={arraySlice:function(t,e,n){return Ts.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){for(var e=t.length,n=new Array(e),i=0;i!==e;++i)n[i]=i;return n.sort(function(e,n){return t[e]-t[n]}),n},sortedArray:function(t,e,n){for(var i=t.length,r=new t.constructor(i),a=0,o=0;o!==i;++a)for(var s=n[a]*e,l=0;l!==e;++l)r[o++]=t[s+l];return r},flattenJSON:function(t,e,n,i){for(var r=1,a=t[0];void 0!==a&&void 0===a[i];)a=t[r++];if(void 0!==a){var o=a[i];if(void 0!==o)if(Array.isArray(o))do{void 0!==(o=a[i])&&(e.push(a.time),n.push.apply(n,o)),a=t[r++]}while(void 0!==a);else if(void 0!==o.toArray)do{void 0!==(o=a[i])&&(e.push(a.time),o.toArray(n,n.length)),a=t[r++]}while(void 0!==a);else do{void 0!==(o=a[i])&&(e.push(a.time),n.push(o)),a=t[r++]}while(void 0!==a)}}};function Ss(t,e,n,i){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=Ts.convertArray(e,this.TimeBufferType),this.values=Ts.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation),this.validate(),this.optimize()}function As(t,e,n,i){Ss.call(this,t,e,n,i)}function Rs(t,e,n){this.name=t,this.tracks=n,this.duration=void 0!==e?e:-1,this.uuid=ke.generateUUID(),this.duration<0&&this.resetDuration(),this.optimize()}function Ls(t){this.manager=void 0!==t?t:Ro,this.textures={}}function Ps(t){this.manager=void 0!==t?t:Ro}Object.assign(Ss,{parse:function(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var e=Ss._getTrackTypeForValueTypeName(t.type);if(void 0===t.times){var n=[],i=[];Ts.flattenJSON(t.keys,n,i,"value"),t.times=n,t.values=i}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)},toJSON:function(t){var e,n=t.constructor;if(void 0!==n.toJSON)e=n.toJSON(t);else{e={name:t.name,times:Ts.convertArray(t.times,Array),values:Ts.convertArray(t.values,Array)};var i=t.getInterpolation();i!==t.DefaultInterpolation&&(e.interpolation=i)}return e.type=t.ValueTypeName,e},_getTrackTypeForValueTypeName:function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return bs;case"vector":case"vector2":case"vector3":case"vector4":return As;case"color":return _s;case"quaternion":return ys;case"bool":case"boolean":return gs;case"string":return fs}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}}),Object.assign(Ss.prototype,{constructor:Ss,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:Te,InterpolantFactoryMethodDiscrete:function(t){return new Ms(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodLinear:function(t){return new Es(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:function(t){return new ws(this.times,this.values,this.getValueSize(),t)},setInterpolation:function(t){var e;switch(t){case Me:e=this.InterpolantFactoryMethodDiscrete;break;case Te:e=this.InterpolantFactoryMethodLinear;break;case Se:e=this.InterpolantFactoryMethodSmooth}if(void 0!==e)this.createInterpolant=e;else{var n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(n);this.setInterpolation(this.DefaultInterpolation)}console.warn("THREE.KeyframeTrack:",n)}},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Me;case this.InterpolantFactoryMethodLinear:return Te;case this.InterpolantFactoryMethodSmooth:return Se}},getValueSize:function(){return this.values.length/this.times.length},shift:function(t){if(0!==t)for(var e=this.times,n=0,i=e.length;n!==i;++n)e[n]+=t;return this},scale:function(t){if(1!==t)for(var e=this.times,n=0,i=e.length;n!==i;++n)e[n]*=t;return this},trim:function(t,e){for(var n=this.times,i=n.length,r=0,a=i-1;r!==i&&n[r]<t;)++r;for(;-1!==a&&n[a]>e;)--a;if(++a,0!==r||a!==i){r>=a&&(r=(a=Math.max(a,1))-1);var o=this.getValueSize();this.times=Ts.arraySlice(n,r,a),this.values=Ts.arraySlice(this.values,r*o,a*o)}return this},validate:function(){var t=!0,e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);var n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);for(var a=null,o=0;o!==r;o++){var s=n[o];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,s),t=!1;break}if(null!==a&&a>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,s,a),t=!1;break}a=s}if(void 0!==i&&Ts.isTypedArray(i)){o=0;for(var l=i.length;o!==l;++o){var q=i[o];if(isNaN(q)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,q),t=!1;break}}}return t},optimize:function(){for(var t=this.times,e=this.values,n=this.getValueSize(),i=this.getInterpolation()===Se,r=1,a=t.length-1,o=1;o<a;++o){var s=!1,l=t[o];if(l!==t[o+1]&&(1!==o||l!==l[0]))if(i)s=!0;else for(var q=o*n,c=q-n,h=q+n,u=0;u!==n;++u){var m=e[q+u];if(m!==e[c+u]||m!==e[h+u]){s=!0;break}}if(s){if(o!==r){t[r]=t[o];var d=o*n,p=r*n;for(u=0;u!==n;++u)e[p+u]=e[d+u]}++r}}if(a>0){t[r]=t[a];for(d=a*n,p=r*n,u=0;u!==n;++u)e[p+u]=e[d+u];++r}return r!==t.length&&(this.times=Ts.arraySlice(t,0,r),this.values=Ts.arraySlice(e,0,r*n)),this}}),As.prototype=Object.assign(Object.create(Ss.prototype),{constructor:As,ValueTypeName:"vector"}),Object.assign(Rs,{parse:function(t){for(var e=[],n=t.tracks,i=1/(t.fps||1),r=0,a=n.length;r!==a;++r)e.push(Ss.parse(n[r]).scale(i));return new Rs(t.name,t.duration,e)},toJSON:function(t){for(var e=[],n=t.tracks,i={name:t.name,duration:t.duration,tracks:e},r=0,a=n.length;r!==a;++r)e.push(Ss.toJSON(n[r]));return i},CreateFromMorphTargetSequence:function(t,e,n,i){for(var r=e.length,a=[],o=0;o<r;o++){var s=[],l=[];s.push((o+r-1)%r,o,(o+1)%r),l.push(0,1,0);var q=Ts.getKeyframeOrder(s);s=Ts.sortedArray(s,1,q),l=Ts.sortedArray(l,1,q),i||0!==s[0]||(s.push(r),l.push(l[0])),a.push(new bs(".morphTargetInfluences["+e[o].name+"]",s,l).scale(1/n))}return new Rs(t,-1,a)},findByName:function(t,e){var n=t;if(!Array.isArray(t)){var i=t;n=i.geometry&&i.geometry.animations||i.animations}for(var r=0;r<n.length;r++)if(n[r].name===e)return n[r];return null},CreateClipsFromMorphTargetSequences:function(t,e,n){for(var i={},r=/^([\w-]*?)([\d]+)$/,a=0,o=t.length;a<o;a++){var s=t[a],l=s.name.match(r);if(l&&l.length>1){var q=i[h=l[1]];q||(i[h]=q=[]),q.push(s)}}var c=[];for(var h in i)c.push(Rs.CreateFromMorphTargetSequence(h,i[h],e,n));return c},parseAnimation:function(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var n=function(t,e,n,i,r){if(0!==n.length){var a=[],o=[];Ts.flattenJSON(n,a,o,i),0!==a.length&&r.push(new t(e,a,o))}},i=[],r=t.name||"default",a=t.length||-1,o=t.fps||30,s=t.hierarchy||[],l=0;l<s.length;l++){var q=s[l].keys;if(q&&0!==q.length)if(q[0].morphTargets){for(var c={},h=0;h<q.length;h++)if(q[h].morphTargets)for(var u=0;u<q[h].morphTargets.length;u++)c[q[h].morphTargets[u]]=-1;for(var m in c){var d=[],p=[];for(u=0;u!==q[h].morphTargets.length;++u){var f=q[h];d.push(f.time),p.push(f.morphTarget===m?1:0)}i.push(new bs(".morphTargetInfluence["+m+"]",d,p))}a=c.length*(o||1)}else{var g=".bones["+e[l].name+"]";n(As,g+".position",q,"pos",i),n(ys,g+".quaternion",q,"rot",i),n(As,g+".scale",q,"scl",i)}}return 0===i.length?null:new Rs(r,a,i)}}),Object.assign(Rs.prototype,{resetDuration:function(){for(var t=0,e=0,n=this.tracks.length;e!==n;++e){var i=this.tracks[e];t=Math.max(t,i.times[i.times.length-1])}this.duration=t},trim:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this},optimize:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}}),Object.assign(Ls.prototype,{load:function(t,e,n,i){var r=this;new Po(r.manager).load(t,function(t){e(r.parse(JSON.parse(t)))},n,i)},setTextures:function(t){this.textures=t},parse:function(t){var e=this.textures;function n(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}var i=new To[t.type];if(void 0!==t.uuid&&(i.uuid=t.uuid),void 0!==t.name&&(i.name=t.name),void 0!==t.color&&i.color.setHex(t.color),void 0!==t.roughness&&(i.roughness=t.roughness),void 0!==t.metalness&&(i.metalness=t.metalness),void 0!==t.emissive&&i.emissive.setHex(t.emissive),void 0!==t.specular&&i.specular.setHex(t.specular),void 0!==t.shininess&&(i.shininess=t.shininess),void 0!==t.clearCoat&&(i.clearCoat=t.clearCoat),void 0!==t.clearCoatRoughness&&(i.clearCoatRoughness=t.clearCoatRoughness),void 0!==t.uniforms&&(i.uniforms=t.uniforms),void 0!==t.vertexShader&&(i.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(i.fragmentShader=t.fragmentShader),void 0!==t.vertexColors&&(i.vertexColors=t.vertexColors),void 0!==t.fog&&(i.fog=t.fog),void 0!==t.flatShading&&(i.flatShading=t.flatShading),void 0!==t.blending&&(i.blending=t.blending),void 0!==t.side&&(i.side=t.side),void 0!==t.opacity&&(i.opacity=t.opacity),void 0!==t.transparent&&(i.transparent=t.transparent),void 0!==t.alphaTest&&(i.alphaTest=t.alphaTest),void 0!==t.depthTest&&(i.depthTest=t.depthTest),void 0!==t.depthWrite&&(i.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(i.colorWrite=t.colorWrite),void 0!==t.wireframe&&(i.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(i.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(i.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(i.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(i.rotation=t.rotation),1!==t.linewidth&&(i.linewidth=t.linewidth),void 0!==t.dashSize&&(i.dashSize=t.dashSize),void 0!==t.gapSize&&(i.gapSize=t.gapSize),void 0!==t.scale&&(i.scale=t.scale),void 0!==t.polygonOffset&&(i.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(i.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(i.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.skinning&&(i.skinning=t.skinning),void 0!==t.morphTargets&&(i.morphTargets=t.morphTargets),void 0!==t.dithering&&(i.dithering=t.dithering),void 0!==t.visible&&(i.visible=t.visible),void 0!==t.userData&&(i.userData=t.userData),void 0!==t.shading&&(i.flatShading=1===t.shading),void 0!==t.size&&(i.size=t.size),void 0!==t.sizeAttenuation&&(i.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(i.map=n(t.map)),void 0!==t.alphaMap&&(i.alphaMap=n(t.alphaMap),i.transparent=!0),void 0!==t.bumpMap&&(i.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(i.bumpScale=t.bumpScale),void 0!==t.normalMap&&(i.normalMap=n(t.normalMap)),void 0!==t.normalScale){var r=t.normalScale;!1===Array.isArray(r)&&(r=[r,r]),i.normalScale=(new je).fromArray(r)}return void 0!==t.displacementMap&&(i.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(i.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(i.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(i.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(i.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(i.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(i.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(i.specularMap=n(t.specularMap)),void 0!==t.envMap&&(i.envMap=n(t.envMap)),void 0!==t.reflectivity&&(i.reflectivity=t.reflectivity),void 0!==t.lightMap&&(i.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(i.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(i.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(i.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(i.gradientMap=n(t.gradientMap)),i}}),Object.assign(Ps.prototype,{load:function(t,e,n,i){var r=this;new Po(r.manager).load(t,function(t){e(r.parse(JSON.parse(t)))},n,i)},parse:function(t){var e=new Jn,n=t.data.index;if(void 0!==n){var i=new Us[n.type](n.array);e.setIndex(new Dn(i,1))}var r=t.data.attributes;for(var a in r){var o=r[a];i=new Us[o.type](o.array);e.addAttribute(a,new Dn(i,o.itemSize,o.normalized))}var s=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==s)for(var l=0,q=s.length;l!==q;++l){var c=s[l];e.addGroup(c.start,c.count,c.materialIndex)}var h=t.data.boundingSphere;if(void 0!==h){var u=new Ye;void 0!==h.center&&u.fromArray(h.center),e.boundingSphere=new cn(u,h.radius)}return e}});var Cs,Os,Is,Ns,Us={Int8Array,Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Ds(){}Ds.Handlers={handlers:[],add:function(t,e){this.handlers.push(t,e)},get:function(t){for(var e=this.handlers,n=0,i=e.length;n<i;n+=2){var r=e[n],a=e[n+1];if(r.test(t))return a}return null}},Object.assign(Ds.prototype,{crossOrigin:void 0,onLoadStart:function(){},onLoadProgress:function(){},onLoadComplete:function(){},initMaterials:function(t,e,n){for(var i=[],r=0;r<t.length;++r)i[r]=this.createMaterial(t[r],e,n);return i},createMaterial:(Cs={NoBlending:C,NormalBlending:O,AdditiveBlending:I,SubtractiveBlending:N,MultiplyBlending:U,CustomBlending:D},Os=new gn,Is=new Uo,Ns=new Ls,function(t,e,n){var i={};function r(t,r,a,o,s){var l,q=e+t,c=Ds.Handlers.get(q);null!==c?l=c.load(q):(Is.setCrossOrigin(n),l=Is.load(q)),void 0!==r&&(l.repeat.fromArray(r),1!==r[0]&&(l.wrapS=Et),1!==r[1]&&(l.wrapT=Et)),void 0!==a&&l.offset.fromArray(a),void 0!==o&&("repeat"===o[0]&&(l.wrapS=Et),"mirror"===o[0]&&(l.wrapS=Tt),"repeat"===o[1]&&(l.wrapT=Et),"mirror"===o[1]&&(l.wrapT=Tt)),void 0!==s&&(l.anisotropy=s);var h=ke.generateUUID();return i[h]=l,h}var a={uuid:ke.generateUUID(),type:"MeshLambertMaterial"};for(var o in t){var s=t[o];switch(o){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":a.name=s;break;case"blending":a.blending=Cs[s];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",o,"is no longer supported.");break;case"colorDiffuse":a.color=Os.fromArray(s).getHex();break;case"colorSpecular":a.specular=Os.fromArray(s).getHex();break;case"colorEmissive":a.emissive=Os.fromArray(s).getHex();break;case"specularCoef":a.shininess=s;break;case"shading":"basic"===s.toLowerCase()&&(a.type="MeshBasicMaterial"),"phong"===s.toLowerCase()&&(a.type="MeshPhongMaterial"),"standard"===s.toLowerCase()&&(a.type="MeshStandardMaterial");break;case"mapDiffuse":a.map=r(s,t.mapDiffuseRepeat,t.mapDiffuseOffset,t.mapDiffuseWrap,t.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":a.emissiveMap=r(s,t.mapEmissiveRepeat,t.mapEmissiveOffset,t.mapEmissiveWrap,t.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":a.lightMap=r(s,t.mapLightRepeat,t.mapLightOffset,t.mapLightWrap,t.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":a.aoMap=r(s,t.mapAORepeat,t.mapAOOffset,t.mapAOWrap,t.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":a.bumpMap=r(s,t.mapBumpRepeat,t.mapBumpOffset,t.mapBumpWrap,t.mapBumpAnisotropy);break;case"mapBumpScale":a.bumpScale=s;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":a.normalMap=r(s,t.mapNormalRepeat,t.mapNormalOffset,t.mapNormalWrap,t.mapNormalAnisotropy);break;case"mapNormalFactor":a.normalScale=s;break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":a.specularMap=r(s,t.mapSpecularRepeat,t.mapSpecularOffset,t.mapSpecularWrap,t.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":a.metalnessMap=r(s,t.mapMetalnessRepeat,t.mapMetalnessOffset,t.mapMetalnessWrap,t.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":a.roughnessMap=r(s,t.mapRoughnessRepeat,t.mapRoughnessOffset,t.mapRoughnessWrap,t.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":a.alphaMap=r(s,t.mapAlphaRepeat,t.mapAlphaOffset,t.mapAlphaWrap,t.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":a.side=M;break;case"doubleSided":a.side=T;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),a.opacity=s;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":a[o]=s;break;case"vertexColors":!0===s&&(a.vertexColors=P),"face"===s&&(a.vertexColors=L);break;default:console.error("THREE.Loader.createMaterial: Unsupported",o,s)}}return"MeshBasicMaterial"===a.type&&delete a.emissive,"MeshPhongMaterial"!==a.type&&delete a.specular,a.opacity<1&&(a.transparent=!0),Ns.setTextures(i),Ns.parse(a)})});var Bs={decodeText:function(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);for(var e="",n=0,i=t.length;n<i;n++)e+=String.fromCharCode(t[n]);return decodeURIComponent(escape(e))},extractUrlBase:function(t){var e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)}};function Fs(t){"boolean"==typeof t&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),t=void 0),this.manager=void 0!==t?t:Ro,this.withCredentials=!1}function zs(t){this.manager=void 0!==t?t:Ro,this.texturePath=""}Object.assign(Fs.prototype,{load:function(t,e,n,i){var r=this,a=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:Bs.extractUrlBase(t),o=new Po(this.manager);o.setWithCredentials(this.withCredentials),o.load(t,function(n){var i=JSON.parse(n),o=i.metadata;if(void 0!==o){var s=o.type;if(void 0!==s&&"object"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+t+" should be loaded with THREE.ObjectLoader instead.")}var l=r.parse(i,a);e(l.geometry,l.materials)},n,i)},setTexturePath:function(t){this.texturePath=t},parse:function(){return function(t,e){void 0!==t.data&&(t=t.data),void 0!==t.scale?t.scale=1/t.scale:t.scale=1;var n=new Un;return function(t,e){function n(t,e){return t&1<<e}var i,r,a,o,s,l,q,c,h,u,m,d,p,f,g,v,x,y,_,b,w,E,M,T,S,A=t.faces,R=t.vertices,L=t.normals,P=t.colors,C=t.scale,O=0;if(void 0!==t.uvs){for(i=0;i<t.uvs.length;i++)t.uvs[i].length&&O++;for(i=0;i<O;i++)e.faceVertexUvs[i]=[]}for(o=0,s=R.length;o<s;)(y=new Ye).x=R[o++]*C,y.y=R[o++]*C,y.z=R[o++]*C,e.vertices.push(y);for(o=0,s=A.length;o<s;)if(m=n(u=A[o++],0),d=n(u,1),p=n(u,3),f=n(u,4),g=n(u,5),v=n(u,6),x=n(u,7),m){if((b=new Cn).a=A[o],b.b=A[o+1],b.c=A[o+3],(w=new Cn).a=A[o+1],w.b=A[o+2],w.c=A[o+3],o+=4,d&&(h=A[o++],b.materialIndex=h,w.materialIndex=h),a=e.faces.length,p)for(i=0;i<O;i++)for(T=t.uvs[i],e.faceVertexUvs[i][a]=[],e.faceVertexUvs[i][a+1]=[],r=0;r<4;r++)S=new je(T[2*(c=A[o++])],T[2*c+1]),2!==r&&e.faceVertexUvs[i][a].push(S),0!==r&&e.faceVertexUvs[i][a+1].push(S);if(f&&(q=3*A[o++],b.normal.set(L[q++],L[q++],L[q]),w.normal.copy(b.normal)),g)for(i=0;i<4;i++)q=3*A[o++],M=new Ye(L[q++],L[q++],L[q]),2!==i&&b.vertexNormals.push(M),0!==i&&w.vertexNormals.push(M);if(v&&(E=P[l=A[o++]],b.color.setHex(E),w.color.setHex(E)),x)for(i=0;i<4;i++)E=P[l=A[o++]],2!==i&&b.vertexColors.push(new gn(E)),0!==i&&w.vertexColors.push(new gn(E));e.faces.push(b),e.faces.push(w)}else{if((_=new Cn).a=A[o++],_.b=A[o++],_.c=A[o++],d&&(h=A[o++],_.materialIndex=h),a=e.faces.length,p)for(i=0;i<O;i++)for(T=t.uvs[i],e.faceVertexUvs[i][a]=[],r=0;r<3;r++)S=new je(T[2*(c=A[o++])],T[2*c+1]),e.faceVertexUvs[i][a].push(S);if(f&&(q=3*A[o++],_.normal.set(L[q++],L[q++],L[q])),g)for(i=0;i<3;i++)q=3*A[o++],M=new Ye(L[q++],L[q++],L[q]),_.vertexNormals.push(M);if(v&&(l=A[o++],_.color.setHex(P[l])),x)for(i=0;i<3;i++)l=A[o++],_.vertexColors.push(new gn(P[l]));e.faces.push(_)}}(t,n),function(t,e){var n=void 0!==t.influencesPerVertex?t.influencesPerVertex:2;if(t.skinWeights)for(var i=0,r=t.skinWeights.length;i<r;i+=n){var a=t.skinWeights[i],o=n>1?t.skinWeights[i+1]:0,s=n>2?t.skinWeights[i+2]:0,l=n>3?t.skinWeights[i+3]:0;e.skinWeights.push(new an(a,o,s,l))}if(t.skinIndices)for(i=0,r=t.skinIndices.length;i<r;i+=n){var q=t.skinIndices[i],c=n>1?t.skinIndices[i+1]:0,h=n>2?t.skinIndices[i+2]:0,u=n>3?t.skinIndices[i+3]:0;e.skinIndices.push(new an(q,c,h,u))}e.bones=t.bones,e.bones&&e.bones.length>0&&(e.skinWeights.length!==e.skinIndices.length||e.skinIndices.length!==e.vertices.length)&&console.warn("When skinning, number of vertices ("+e.vertices.length+"), skinIndices ("+e.skinIndices.length+"), and skinWeights ("+e.skinWeights.length+") should match.")}(t,n),function(t,e){var n=t.scale;if(void 0!==t.morphTargets)for(var i=0,r=t.morphTargets.length;i<r;i++){e.morphTargets[i]={},e.morphTargets[i].name=t.morphTargets[i].name,e.morphTargets[i].vertices=[];for(var a=e.morphTargets[i].vertices,o=t.morphTargets[i].vertices,s=0,l=o.length;s<l;s+=3){var q=new Ye;q.x=o[s]*n,q.y=o[s+1]*n,q.z=o[s+2]*n,a.push(q)}}if(void 0!==t.morphColors&&t.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');var c=e.faces,h=t.morphColors[0].colors;for(i=0,r=c.length;i<r;i++)c[i].color.fromArray(h,3*i)}}(t,n),function(t,e){var n=[],i=[];void 0!==t.animation&&i.push(t.animation),void 0!==t.animations&&(t.animations.length?i=i.concat(t.animations):i.push(t.animations));for(var r=0;r<i.length;r++){var a=Rs.parseAnimation(i[r],e.bones);a&&n.push(a)}if(e.morphTargets){var o=Rs.CreateClipsFromMorphTargetSequences(e.morphTargets,10);n=n.concat(o)}n.length>0&&(e.animations=n)}(t,n),n.computeFaceNormals(),n.computeBoundingSphere(),void 0===t.materials||0===t.materials.length?{geometry:n}:{geometry:n,materials:Ds.prototype.initMaterials(t.materials,e,this.crossOrigin)}}}()}),Object.assign(zs.prototype,{load:function(t,e,n,i){""===this.texturePath&&(this.texturePath=t.substring(0,t.lastIndexOf("/")+1));var r=this;new Po(r.manager).load(t,function(n){var a=null;try{a=JSON.parse(n)}catch(e){return void 0!==i&&i(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}var o=a.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?r.parse(a,e):console.error("THREE.ObjectLoader: Can't load "+t+". Use THREE.JSONLoader instead.")},n,i)},setTexturePath:function(t){this.texturePath=t},setCrossOrigin:function(t){this.crossOrigin=t},parse:function(t,e){var n=this.parseShape(t.shapes),i=this.parseGeometries(t.geometries,n),r=this.parseImages(t.images,function(){void 0!==e&&e(s)}),a=this.parseTextures(t.textures,r),o=this.parseMaterials(t.materials,a),s=this.parseObject(t.object,i,o);return t.animations&&(s.animations=this.parseAnimations(t.animations)),void 0!==t.images&&0!==t.images.length||void 0!==e&&e(s),s},parseShape:function(t){var e={};if(void 0!==t)for(var n=0,i=t.length;n<i;n++){var r=(new as).fromJSON(t[n]);e[r.uuid]=r}return e},parseGeometries:function(t,e){var n={};if(void 0!==t)for(var i=new Fs,r=new Ps,a=0,o=t.length;a<o;a++){var s,l=t[a];switch(l.type){case"PlaneGeometry":case"PlaneBufferGeometry":s=new fo[l.type](l.width,l.height,l.widthSegments,l.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":s=new fo[l.type](l.width,l.height,l.depth,l.widthSegments,l.heightSegments,l.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":s=new fo[l.type](l.radius,l.segments,l.thetaStart,l.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":s=new fo[l.type](l.radiusTop,l.radiusBottom,l.height,l.radialSegments,l.heightSegments,l.openEnded,l.thetaStart,l.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":s=new fo[l.type](l.radius,l.height,l.radialSegments,l.heightSegments,l.openEnded,l.thetaStart,l.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":s=new fo[l.type](l.radius,l.widthSegments,l.heightSegments,l.phiStart,l.phiLength,l.thetaStart,l.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":s=new fo[l.type](l.radius,l.detail);break;case"RingGeometry":case"RingBufferGeometry":s=new fo[l.type](l.innerRadius,l.outerRadius,l.thetaSegments,l.phiSegments,l.thetaStart,l.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":s=new fo[l.type](l.radius,l.tube,l.radialSegments,l.tubularSegments,l.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":s=new fo[l.type](l.radius,l.tube,l.tubularSegments,l.radialSegments,l.p,l.q);break;case"LatheGeometry":case"LatheBufferGeometry":s=new fo[l.type](l.points,l.segments,l.phiStart,l.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":s=new fo[l.type](l.vertices,l.indices,l.radius,l.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var q=[],c=0,h=l.shapes.length;c<h;c++){var u=e[l.shapes[c]];q.push(u)}s=new fo[l.type](q,l.curveSegments);break;case"BufferGeometry":s=r.parse(l);break;case"Geometry":s=i.parse(l,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+l.type+'"');continue}s.uuid=l.uuid,void 0!==l.name&&(s.name=l.name),n[l.uuid]=s}return n},parseMaterials:function(t,e){var n={};if(void 0!==t){var i=new Ls;i.setTextures(e);for(var r=0,a=t.length;r<a;r++){var o=t[r];if("MultiMaterial"===o.type){for(var s=[],l=0;l<o.materials.length;l++)s.push(i.parse(o.materials[l]));n[o.uuid]=s}else n[o.uuid]=i.parse(o)}}return n},parseAnimations:function(t){for(var e=[],n=0;n<t.length;n++){var i=Rs.parse(t[n]);e.push(i)}return e},parseImages:function(t,e){var n=this,i={};function r(t){return n.manager.itemStart(t),a.load(t,function(){n.manager.itemEnd(t)},void 0,function(){n.manager.itemEnd(t),n.manager.itemError(t)})}if(void 0!==t&&t.length>0){var a=new Io(new Ao(e));a.setCrossOrigin(this.crossOrigin);for(var o=0,s=t.length;o<s;o++){var l=t[o],q=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(l.url)?l.url:n.texturePath+l.url;i[l.uuid]=r(q)}}return i},parseTextures:function(t,e){function n(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}var i={};if(void 0!==t)for(var r=0,a=t.length;r<a;r++){var o=t[r];void 0===o.image&&console.warn('THREE.ObjectLoader: No "image" specified for',o.uuid),void 0===e[o.image]&&console.warn("THREE.ObjectLoader: Undefined image",o.image);var s=new rn(e[o.image]);s.needsUpdate=!0,s.uuid=o.uuid,void 0!==o.name&&(s.name=o.name),void 0!==o.mapping&&(s.mapping=n(o.mapping,Gs)),void 0!==o.offset&&s.offset.fromArray(o.offset),void 0!==o.repeat&&s.repeat.fromArray(o.repeat),void 0!==o.center&&s.center.fromArray(o.center),void 0!==o.rotation&&(s.rotation=o.rotation),void 0!==o.wrap&&(s.wrapS=n(o.wrap[0],Vs),s.wrapT=n(o.wrap[1],Vs)),void 0!==o.format&&(s.format=o.format),void 0!==o.minFilter&&(s.minFilter=n(o.minFilter,ks)),void 0!==o.magFilter&&(s.magFilter=n(o.magFilter,ks)),void 0!==o.anisotropy&&(s.anisotropy=o.anisotropy),void 0!==o.flipY&&(s.flipY=o.flipY),i[o.uuid]=s}return i},parseObject:function(t,e,n){var i;function r(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function a(t){if(void 0!==t){if(Array.isArray(t)){for(var e=[],i=0,r=t.length;i<r;i++){var a=t[i];void 0===n[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),e.push(n[a])}return e}return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),n[t]}}switch(t.type){case"Scene":i=new Hr,void 0!==t.background&&Number.isInteger(t.background)&&(i.background=new gn(t.background)),void 0!==t.fog&&("Fog"===t.fog.type?i.fog=new zr(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(i.fog=new Fr(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":i=new Nr(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(i.focus=t.focus),void 0!==t.zoom&&(i.zoom=t.zoom),void 0!==t.filmGauge&&(i.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(i.filmOffset=t.filmOffset),void 0!==t.view&&(i.view=Object.assign({},t.view));break;case"OrthographicCamera":i=new Pn(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(i.zoom=t.zoom),void 0!==t.view&&(i.view=Object.assign({},t.view));break;case"AmbientLight":i=new ds(t.color,t.intensity);break;case"DirectionalLight":i=new ms(t.color,t.intensity);break;case"PointLight":i=new hs(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":i=new ps(t.color,t.intensity,t.width,t.height);break;case"SpotLight":i=new cs(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":i=new ss(t.color,t.groundColor,t.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var o=r(t.geometry),s=a(t.material);i=o.bones&&o.bones.length>0?new Xr(o,s):new pi(o,s);break;case"LOD":i=new kr;break;case"Line":i=new Zr(r(t.geometry),a(t.material),t.mode);break;case"LineLoop":i=new Qr(r(t.geometry),a(t.material));break;case"LineSegments":i=new Jr(r(t.geometry),a(t.material));break;case"PointCloud":case"Points":i=new $r(r(t.geometry),a(t.material));break;case"Sprite":i=new Vr(a(t.material));break;case"Group":i=new ta;break;default:i=new Rn}if(i.uuid=t.uuid,void 0!==t.name&&(i.name=t.name),void 0!==t.matrix?(i.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(i.matrixAutoUpdate=t.matrixAutoUpdate),i.matrixAutoUpdate&&i.matrix.decompose(i.position,i.quaternion,i.scale)):(void 0!==t.position&&i.position.fromArray(t.position),void 0!==t.rotation&&i.rotation.fromArray(t.rotation),void 0!==t.quaternion&&i.quaternion.fromArray(t.quaternion),void 0!==t.scale&&i.scale.fromArray(t.scale)),void 0!==t.castShadow&&(i.castShadow=t.castShadow),void 0!==t.receiveShadow&&(i.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(i.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(i.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&i.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(i.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(i.visible=t.visible),void 0!==t.frustumCulled&&(i.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(i.renderOrder=t.renderOrder),void 0!==t.userData&&(i.userData=t.userData),void 0!==t.children)for(var l=t.children,q=0;q<l.length;q++)i.add(this.parseObject(l[q],e,n));if("LOD"===t.type)for(var c=t.levels,h=0;h<c.length;h++){var u=c[h],m=i.getObjectByProperty("uuid",u.object);void 0!==m&&i.addLevel(m,u.distance)}return i}});var Hs,Gs={UVMapping:ft,CubeReflectionMapping:gt,CubeRefractionMapping:vt,EquirectangularReflectionMapping:xt,EquirectangularRefractionMapping:yt,SphericalReflectionMapping:_t,CubeUVReflectionMapping:bt,CubeUVRefractionMapping:wt},Vs={RepeatWrapping:Et,ClampToEdgeWrapping:Mt,MirroredRepeatWrapping:Tt},ks={NearestFilter:St,NearestMipMapNearestFilter:At,NearestMipMapLinearFilter:Rt,LinearFilter:Lt,LinearMipMapNearestFilter:Pt,LinearMipMapLinearFilter:Ct};function js(t){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.manager=void 0!==t?t:Ro,this.options=void 0}function Ws(){this.type="ShapePath",this.color=new gn,this.subPaths=[],this.currentPath=null}function Xs(t){this.type="Font",this.data=t}function Ys(t,e,n,i,r,a){var o=a.glyphs[t]||a.glyphs["?"];if(o){var s,l,q,c,h,u,m,d,p=new Ws;if(o.o)for(var f=o._cachedOutline||(o._cachedOutline=o.o.split(" ")),g=0,v=f.length;g<v;){switch(f[g++]){case"m":s=f[g++]*n+i,l=f[g++]*n+r,p.moveTo(s,l);break;case"l":s=f[g++]*n+i,l=f[g++]*n+r,p.lineTo(s,l);break;case"q":q=f[g++]*n+i,c=f[g++]*n+r,h=f[g++]*n+i,u=f[g++]*n+r,p.quadraticCurveTo(h,u,q,c);break;case"b":q=f[g++]*n+i,c=f[g++]*n+r,h=f[g++]*n+i,u=f[g++]*n+r,m=f[g++]*n+i,d=f[g++]*n+r,p.bezierCurveTo(h,u,m,d,q,c)}}return{offsetX:o.ha*n,path:p}}}function Zs(t){this.manager=void 0!==t?t:Ro}js.prototype={constructor:js,setOptions:function(t){return this.options=t,this},load:function(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t);var r=this,a=So.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout(function(){e&&e(a),r.manager.itemEnd(t)},0),a;fetch(t).then(function(t){return t.blob()}).then(function(t){return createImageBitmap(t,r.options)}).then(function(n){So.add(t,n),e&&e(n),r.manager.itemEnd(t)}).catch(function(e){i&&i(e),r.manager.itemEnd(t),r.manager.itemError(t)})},setCrossOrigin:function(){return this},setPath:function(t){return this.path=t,this}},Object.assign(Ws.prototype,{moveTo:function(t,e){this.currentPath=new rs,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e)},lineTo:function(t,e){this.currentPath.lineTo(t,e)},quadraticCurveTo:function(t,e,n,i){this.currentPath.quadraticCurveTo(t,e,n,i)},bezierCurveTo:function(t,e,n,i,r,a){this.currentPath.bezierCurveTo(t,e,n,i,r,a)},splineThru:function(t){this.currentPath.splineThru(t)},toShapes:function(t,e){function n(t){for(var e=[],n=0,i=t.length;n<i;n++){var r=t[n],a=new as;a.curves=r.curves,e.push(a)}return e}function i(t,e){for(var n=e.length,i=!1,r=n-1,a=0;a<n;r=a++){var o=e[r],s=e[a],l=s.x-o.x,q=s.y-o.y;if(Math.abs(q)>Number.EPSILON){if(q<0&&(o=e[a],l=-l,s=e[r],q=-q),t.y<o.y||t.y>s.y)continue;if(t.y===o.y){if(t.x===o.x)return!0}else{var c=q*(t.x-o.x)-l*(t.y-o.y);if(0===c)return!0;if(c<0)continue;i=!i}}else{if(t.y!==o.y)continue;if(s.x<=t.x&&t.x<=o.x||o.x<=t.x&&t.x<=s.x)return!0}}return i}var r=ja.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===e)return n(a);var o,s,l,q=[];if(1===a.length)return s=a[0],(l=new as).curves=s.curves,q.push(l),q;var c=!r(a[0].getPoints());c=t?!c:c;var h,u,m=[],d=[],p=[],f=0;d[f]=void 0,p[f]=[];for(var g=0,v=a.length;g<v;g++)o=r(h=(s=a[g]).getPoints()),(o=t?!o:o)?(!c&&d[f]&&f++,d[f]={s:new as,p:h},d[f].s.curves=s.curves,c&&f++,p[f]=[]):p[f].push({h:s,p:h[0]});if(!d[0])return n(a);if(d.length>1){for(var x=!1,y=[],_=0,b=d.length;_<b;_++)m[_]=[];for(_=0,b=d.length;_<b;_++)for(var w=p[_],E=0;E<w.length;E++){for(var M=w[E],T=!0,S=0;S<d.length;S++)i(M.p,d[S].p)&&(_!==S&&y.push({froms:_,tos:S,hole:E}),T?(T=!1,m[S].push(M)):x=!0);T&&m[_].push(M)}y.length>0&&(x||(p=m))}g=0;for(var A=d.length;g<A;g++){l=d[g].s,q.push(l);for(var R=0,L=(u=p[g]).length;R<L;R++)l.holes.push(u[R].h)}return q}}),Object.assign(Xs.prototype,{isFont:!0,generateShapes:function(t,e,n){void 0===e&&(e=100),void 0===n&&(n=4);for(var i=[],r=function(t,e,n,i){for(var r=String(t).split(""),a=e/i.resolution,o=(i.boundingBox.yMax-i.boundingBox.yMin+i.underlineThickness)*a,s=[],l=0,q=0,c=0;c<r.length;c++){var h=r[c];if("\n"===h)l=0,q-=o;else{var u=Ys(h,n,a,l,q,i);l+=u.offsetX,s.push(u.path)}}return s}(t,e,n,this.data),a=0,o=r.length;a<o;a++)Array.prototype.push.apply(i,r[a].toShapes());return i}}),Object.assign(Zs.prototype,{load:function(t,e,n,i){var r=this,a=new Po(this.manager);a.setPath(this.path),a.load(t,function(t){var n;try{n=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(t.substring(65,t.length-2))}var i=r.parse(n);e&&e(i)},n,i)},parse:function(t){return new Xs(t)},setPath:function(t){return this.path=t,this}});var Js,Qs,Ks,$s,tl,el,nl,il,rl,al,ol={getContext:function(){return void 0===Hs&&(Hs=new(window.AudioContext||window.webkitAudioContext)),Hs},setContext:function(t){Hs=t}};function sl(t){this.manager=void 0!==t?t:Ro}function ll(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Nr,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Nr,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}function ql(t,e,n){Rn.call(this),this.type="CubeCamera";var i=new Nr(90,1,t,e);i.up.set(0,-1,0),i.lookAt(new Ye(1,0,0)),this.add(i);var r=new Nr(90,1,t,e);r.up.set(0,-1,0),r.lookAt(new Ye(-1,0,0)),this.add(r);var a=new Nr(90,1,t,e);a.up.set(0,0,1),a.lookAt(new Ye(0,1,0)),this.add(a);var o=new Nr(90,1,t,e);o.up.set(0,0,-1),o.lookAt(new Ye(0,-1,0)),this.add(o);var s=new Nr(90,1,t,e);s.up.set(0,-1,0),s.lookAt(new Ye(0,0,1)),this.add(s);var l=new Nr(90,1,t,e);l.up.set(0,-1,0),l.lookAt(new Ye(0,0,-1)),this.add(l);var q={format:Wt,magFilter:Lt,minFilter:Lt};this.renderTarget=new sn(n,n,q),this.renderTarget.texture.name="CubeCamera",this.update=function(t,e){null===this.parent&&this.updateMatrixWorld();var n=this.renderTarget,q=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,n.activeCubeFace=0,t.render(e,i,n),n.activeCubeFace=1,t.render(e,r,n),n.activeCubeFace=2,t.render(e,a,n),n.activeCubeFace=3,t.render(e,o,n),n.activeCubeFace=4,t.render(e,s,n),n.texture.generateMipmaps=q,n.activeCubeFace=5,t.render(e,l,n),t.setRenderTarget(null)},this.clear=function(t,e,n,i){for(var r=this.renderTarget,a=0;a<6;a++)r.activeCubeFace=a,t.setRenderTarget(r),t.clear(e,n,i);t.setRenderTarget(null)}}function cl(){Rn.call(this),this.type="AudioListener",this.context=ol.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null}function hl(t){Rn.call(this),this.type="Audio",this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.loop=!1,this.startTime=0,this.offset=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}function ul(t){hl.call(this,t),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function ml(t,e){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=void 0!==e?e:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}function dl(t,e,n){this.binding=t,this.valueSize=n;var i,r=Float64Array;switch(e){case"quaternion":i=this._slerp;break;case"string":case"bool":r=Array,i=this._select;break;default:i=this._lerp}this.buffer=new r(4*n),this._mixBufferRegion=i,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Object.assign(sl.prototype,{load:function(t,e,n,i){var r=new Po(this.manager);r.setResponseType("arraybuffer"),r.load(t,function(t){ol.getContext().decodeAudioData(t,function(t){e(t)})},n,i)}}),Object.assign(ll.prototype,{update:(rl=new We,al=new We,function(t){if(Js!==this||Qs!==t.focus||Ks!==t.fov||$s!==t.aspect*this.aspect||tl!==t.near||el!==t.far||nl!==t.zoom||il!==this.eyeSep){Js=this,Qs=t.focus,Ks=t.fov,$s=t.aspect*this.aspect,tl=t.near,el=t.far,nl=t.zoom;var e,n,i=t.projectionMatrix.clone(),r=(il=this.eyeSep/2)*tl/Qs,a=tl*Math.tan(ke.DEG2RAD*Ks*.5)/nl;al.elements[12]=-il,rl.elements[12]=il,e=-a*$s+r,n=a*$s+r,i.elements[0]=2*tl/(n-e),i.elements[8]=(n+e)/(n-e),this.cameraL.projectionMatrix.copy(i),e=-a*$s-r,n=a*$s-r,i.elements[0]=2*tl/(n-e),i.elements[8]=(n+e)/(n-e),this.cameraR.projectionMatrix.copy(i)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(al),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(rl)})}),ql.prototype=Object.create(Rn.prototype),ql.prototype.constructor=ql,cl.prototype=Object.assign(Object.create(Rn.prototype),{constructor:cl,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(t){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(t){this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01)},updateMatrixWorld:function(){var t=new Ye,e=new Xe,n=new Ye,i=new Ye;return function(r){Rn.prototype.updateMatrixWorld.call(this,r);var a=this.context.listener,o=this.up;this.matrixWorld.decompose(t,e,n),i.set(0,0,-1).applyQuaternion(e),a.positionX?(a.positionX.setValueAtTime(t.x,this.context.currentTime),a.positionY.setValueAtTime(t.y,this.context.currentTime),a.positionZ.setValueAtTime(t.z,this.context.currentTime),a.forwardX.setValueAtTime(i.x,this.context.currentTime),a.forwardY.setValueAtTime(i.y,this.context.currentTime),a.forwardZ.setValueAtTime(i.z,this.context.currentTime),a.upX.setValueAtTime(o.x,this.context.currentTime),a.upY.setValueAtTime(o.y,this.context.currentTime),a.upZ.setValueAtTime(o.z,this.context.currentTime)):(a.setPosition(t.x,t.y,t.z),a.setOrientation(i.x,i.y,i.z,o.x,o.y,o.z))}}()}),hl.prototype=Object.assign(Object.create(Rn.prototype),{constructor:hl,getOutput:function(){return this.gain},setNodeSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this},setBuffer:function(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.onended=this.onEnded.bind(this),t.playbackRate.setValueAtTime(this.playbackRate,this.startTime),this.startTime=this.context.currentTime,t.start(this.startTime,this.offset),this.isPlaying=!0,this.source=t,this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.offset=0,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(t){return t||(t=[]),!0===this.isPlaying?(this.disconnect(),this.filters=t,this.connect()):this.filters=t,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(t){return this.setFilters(t?[t]:[])},setPlaybackRate:function(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setValueAtTime(this.playbackRate,this.context.currentTime),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},getVolume:function(){return this.gain.gain.value},setVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}),ul.prototype=Object.assign(Object.create(hl.prototype),{constructor:ul,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(t){this.panner.refDistance=t},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(t){this.panner.rolloffFactor=t},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(t){this.panner.distanceModel=t},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(t){this.panner.maxDistance=t},updateMatrixWorld:function(){var t=new Ye;return function(e){Rn.prototype.updateMatrixWorld.call(this,e),t.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(t.x,t.y,t.z)}}()}),Object.assign(ml.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var t=0,e=this.getFrequencyData(),n=0;n<e.length;n++)t+=e[n];return t/e.length}}),Object.assign(dl.prototype,{accumulate:function(t,e){var n=this.buffer,i=this.valueSize,r=t*i+i,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==i;++o)n[r+o]=n[o];a=e}else{var s=e/(a+=e);this._mixBufferRegion(n,r,0,s,i)}this.cumulativeWeight=a},apply:function(t){var e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,r<1){var o=3*e;this._mixBufferRegion(n,i,o,1-r,e)}for(var s=e,l=e+e;s!==l;++s)if(n[s]!==n[s+e]){a.setValue(n,i);break}},saveOriginalState:function(){var t=this.binding,e=this.buffer,n=this.valueSize,i=3*n;t.getValue(e,i);for(var r=n,a=i;r!==a;++r)e[r]=e[i+r%n];this.cumulativeWeight=0},restoreOriginalState:function(){var t=3*this.valueSize;this.binding.setValue(this.buffer,t)},_select:function(t,e,n,i,r){if(i>=.5)for(var a=0;a!==r;++a)t[e+a]=t[n+a]},_slerp:function(t,e,n,i){Xe.slerpFlat(t,e,t,e,t,n,i)},_lerp:function(t,e,n,i,r){for(var a=1-i,o=0;o!==r;++o){var s=e+o;t[s]=t[s]*a+t[n+o]*i}}});var pl,fl,gl,vl,xl,yl,_l,bl,wl,El,Ml,Tl,Sl;function Al(t,e,n){var i=n||Rl.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}function Rl(t,e,n){this.path=e,this.parsedPath=n||Rl.parseTrackName(e),this.node=Rl.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t}function Ll(){this.uuid=ke.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var i=this;this.stats={objects:{get total(){return i._objects.length},get inUse(){return this.total-i.nCachedObjects_}},get bindingsPerObject(){return i._bindings.length}}}function Pl(t,e,n){this._mixer=t,this._clip=e,this._localRoot=n||null;for(var i=e.tracks,r=i.length,a=new Array(r),o={endingStart:Ae,endingEnd:Ae},s=0;s!==r;++s){var l=i[s].createInterpolant(null);a[s]=l,l.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(r),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=we,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function Cl(t){this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Ol(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}function Il(){Jn.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function Nl(t,e,n,i){this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===i}function Ul(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Dl(t,e,n){Ul.call(this,t,e),this.meshPerAttribute=n||1}function Bl(t,e,n){Dn.call(this,t,e),this.meshPerAttribute=n||1}function Fl(t,e,n,i){this.ray=new ui(t,e),this.near=n||0,this.far=i||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function zl(t,e){return t.distance-e.distance}function Hl(t,e,n,i){if(!1!==t.visible&&(t.raycast(e,n),!0===i))for(var r=t.children,a=0,o=r.length;a<o;a++)Hl(r[a],e,n,!0)}function Gl(t){this.autoStart=void 0===t||t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function Vl(t,e,n){return this.radius=void 0!==t?t:1,this.phi=void 0!==e?e:0,this.theta=void 0!==n?n:0,this}function kl(t,e,n){return this.radius=void 0!==t?t:1,this.theta=void 0!==e?e:0,this.y=void 0!==n?n:0,this}function jl(t,e){this.min=void 0!==t?t:new je(1/0,1/0),this.max=void 0!==e?e:new je(-1/0,-1/0)}function Wl(t){Rn.call(this),this.material=t,this.render=function(){}}function Xl(t,e,n,i){this.object=t,this.size=void 0!==e?e:1;var r=void 0!==n?n:16711680,a=void 0!==i?i:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=3*s.faces.length:s&&s.isBufferGeometry&&(o=s.attributes.normal.count);var l=new Jn,q=new jn(2*o*3,3);l.addAttribute("position",q),Jr.call(this,l,new Yr({color:r,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}function Yl(t,e){Rn.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;for(var n=new Jn,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],r=0,a=1;r<32;r++,a++){var o=r/32*Math.PI*2,s=a/32*Math.PI*2;i.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}n.addAttribute("position",new jn(i,3));var l=new Yr({fog:!1});this.cone=new Jr(n,l),this.add(this.cone),this.update()}function Zl(t){for(var e=function t(e){var n=[];e&&e.isBone&&n.push(e);for(var i=0;i<e.children.length;i++)n.push.apply(n,t(e.children[i]));return n}(t),n=new Jn,i=[],r=[],a=new gn(0,0,1),o=new gn(0,1,0),s=0;s<e.length;s++){var l=e[s];l.parent&&l.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(a.r,a.g,a.b),r.push(o.r,o.g,o.b))}n.addAttribute("position",new jn(i,3)),n.addAttribute("color",new jn(r,3));var q=new Yr({vertexColors:P,depthTest:!1,depthWrite:!1,transparent:!0});Jr.call(this,n,q),this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}function Jl(t,e,n){this.light=t,this.light.updateMatrixWorld(),this.color=n;var i=new to(e,4,2),r=new ci({wireframe:!0,fog:!1});pi.call(this,i,r),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function Ql(t,e){Rn.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;var n=new Yr({fog:!1}),i=new Jn;i.addAttribute("position",new Dn(new Float32Array(15),3)),this.line=new Zr(i,n),this.add(this.line),this.update()}function Kl(t,e,n){Rn.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;var i=new ua(e);i.rotateY(.5*Math.PI),this.material=new ci({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=P);var r=i.getAttribute("position"),a=new Float32Array(3*r.count);i.addAttribute("color",new Dn(a,3)),this.add(new pi(i,this.material)),this.update()}function $l(t,e,n,i){t=t||10,e=e||10,n=new gn(void 0!==n?n:4473924),i=new gn(void 0!==i?i:8947848);for(var r=e/2,a=t/e,o=t/2,s=[],l=[],q=0,c=0,h=-o;q<=e;q++,h+=a){s.push(-o,0,h,o,0,h),s.push(h,0,-o,h,0,o);var u=q===r?n:i;u.toArray(l,c),c+=3,u.toArray(l,c),c+=3,u.toArray(l,c),c+=3,u.toArray(l,c),c+=3}var m=new Jn;m.addAttribute("position",new jn(s,3)),m.addAttribute("color",new jn(l,3));var d=new Yr({vertexColors:P});Jr.call(this,m,d)}function tq(t,e,n,i,r,a){t=t||10,e=e||16,n=n||8,i=i||64,r=new gn(void 0!==r?r:4473924),a=new gn(void 0!==a?a:8947848);var o,s,l,q,c,h,u,m=[],d=[];for(q=0;q<=e;q++)l=q/e*(2*Math.PI),o=Math.sin(l)*t,s=Math.cos(l)*t,m.push(0,0,0),m.push(o,0,s),u=1&q?r:a,d.push(u.r,u.g,u.b),d.push(u.r,u.g,u.b);for(q=0;q<=n;q++)for(u=1&q?r:a,h=t-t/n*q,c=0;c<i;c++)l=c/i*(2*Math.PI),o=Math.sin(l)*h,s=Math.cos(l)*h,m.push(o,0,s),d.push(u.r,u.g,u.b),l=(c+1)/i*(2*Math.PI),o=Math.sin(l)*h,s=Math.cos(l)*h,m.push(o,0,s),d.push(u.r,u.g,u.b);var p=new Jn;p.addAttribute("position",new jn(m,3)),p.addAttribute("color",new jn(d,3));var f=new Yr({vertexColors:P});Jr.call(this,p,f)}function eq(t,e,n,i){this.object=t,this.size=void 0!==e?e:1;var r=void 0!==n?n:16776960,a=void 0!==i?i:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var l=new Jn,q=new jn(2*o*3,3);l.addAttribute("position",q),Jr.call(this,l,new Yr({color:r,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}function nq(t,e,n){Rn.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===e&&(e=1);var i=new Jn;i.addAttribute("position",new jn([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));var r=new Yr({fog:!1});this.lightPlane=new Zr(i,r),this.add(this.lightPlane),(i=new Jn).addAttribute("position",new jn([0,0,0,0,0,1],3)),this.targetLine=new Zr(i,r),this.add(this.targetLine),this.update()}function iq(t){var e=new Jn,n=new Yr({color:16777215,vertexColors:L}),i=[],r=[],a={},o=new gn(16755200),s=new gn(16711680),l=new gn(43775),q=new gn(16777215),c=new gn(3355443);function h(t,e,n){u(t,n),u(e,n)}function u(t,e){i.push(0,0,0),r.push(e.r,e.g,e.b),void 0===a[t]&&(a[t]=[]),a[t].push(i.length/3-1)}h("n1","n2",o),h("n2","n4",o),h("n4","n3",o),h("n3","n1",o),h("f1","f2",o),h("f2","f4",o),h("f4","f3",o),h("f3","f1",o),h("n1","f1",o),h("n2","f2",o),h("n3","f3",o),h("n4","f4",o),h("p","n1",s),h("p","n2",s),h("p","n3",s),h("p","n4",s),h("u1","u2",l),h("u2","u3",l),h("u3","u1",l),h("c","t",q),h("p","c",c),h("cn1","cn2",c),h("cn3","cn4",c),h("cf1","cf2",c),h("cf3","cf4",c),e.addAttribute("position",new jn(i,3)),e.addAttribute("color",new jn(r,3)),Jr.call(this,e,n),this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}function rq(t,e){this.object=t,void 0===e&&(e=16776960);var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(24),r=new Jn;r.setIndex(new Dn(n,1)),r.addAttribute("position",new Dn(i,3)),Jr.call(this,r,new Yr({color:e})),this.matrixAutoUpdate=!1,this.update()}function aq(t,e){this.type="Box3Helper",this.box=t;var n=void 0!==e?e:16776960,i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Jn;r.setIndex(new Dn(i,1)),r.addAttribute("position",new jn([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Jr.call(this,r,new Yr({color:n})),this.geometry.computeBoundingSphere()}function oq(t,e,n){this.type="PlaneHelper",this.plane=t,this.size=void 0===e?1:e;var i=void 0!==n?n:16776960,r=new Jn;r.addAttribute("position",new jn([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),r.computeBoundingSphere(),Zr.call(this,r,new Yr({color:i}));var a=new Jn;a.addAttribute("position",new jn([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),a.computeBoundingSphere(),this.add(new pi(a,new ci({color:i,opacity:.2,transparent:!0,depthWrite:!1})))}function sq(t,e,n,i,r,a){Rn.call(this),void 0===i&&(i=16776960),void 0===n&&(n=1),void 0===r&&(r=.2*n),void 0===a&&(a=.2*r),void 0===El&&((El=new Jn).addAttribute("position",new jn([0,0,0,0,1,0],3)),(Ml=new co(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(e),this.line=new Zr(El,new Yr({color:i})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new pi(Ml,new ci({color:i})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,r,a)}function lq(t){var e=[0,0,0,t=t||1,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new Jn;n.addAttribute("position",new jn(e,3)),n.addAttribute("color",new jn([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var i=new Yr({vertexColors:P});Jr.call(this,n,i)}function qq(t,e,n,i,r,a,o){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new Cn(t,e,n,r,a,o)}Object.assign(Al.prototype,{getValue:function(t,e){this.bind();var n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(t,e)},setValue:function(t,e){for(var n=this._bindings,i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)},bind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()},unbind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}}),Object.assign(Rl,{Composite:Al,create:function(t,e,n){return t&&t.isAnimationObjectGroup?new Rl.Composite(t,e,n):new Rl(t,e,n)},sanitizeNodeName:(wl=new RegExp("[\\[\\]\\.:\\/]","g"),function(t){return t.replace(/\s/g,"_").replace(wl,"")}),parseTrackName:(pl="[^\\[\\]\\.:\\/]",fl="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",gl=/((?:WC+[\/:])*)/.source.replace("WC",pl),vl=/(WCOD+)?/.source.replace("WCOD",fl),xl=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",pl),yl=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",pl),_l=new RegExp("^"+gl+vl+xl+yl+"$"),bl=["material","materials","bones"],function(t){var e=_l.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);var n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){var r=n.nodeName.substring(i+1);-1!==bl.indexOf(r)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=r)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}),findNode:function(t,e){if(!e||""===e||"root"===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){var n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){var i=function(t){for(var n=0;n<t.length;n++){var r=t[n];if(r.name===e||r.uuid===e)return r;var a=i(r.children);if(a)return a}return null},r=i(t.children);if(r)return r}return null}}),Object.assign(Rl.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)t[e++]=n[i]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)n[i]=t[e++]},function(t,e){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){for(var n=this.resolvedProperty,i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){var t=this.node,e=this.parsedPath,n=e.objectName,i=e.propertyName,r=e.propertyIndex;if(t||(t=Rl.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,t){if(n){var a=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(var o=0;o<t.length;o++)if(t[o].name===a){a=o;break}break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==a){if(void 0===t[a])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[a]}}var s=t[i];if(void 0!==s){var l=this.Versioning.None;void 0!==t.needsUpdate?(l=this.Versioning.NeedsUpdate,this.targetObject=t):void 0!==t.matrixWorldNeedsUpdate&&(l=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=t);var q=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(o=0;o<this.node.geometry.morphAttributes.position.length;o++)if(t.geometry.morphAttributes.position[o].name===r){r=o;break}}else{if(!t.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(o=0;o<this.node.geometry.morphTargets.length;o++)if(t.geometry.morphTargets[o].name===r){r=o;break}}}q=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(q=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(q=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[q],this.setValue=this.SetterByBindingTypeAndVersioning[q][l]}else{var c=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+i+" but it wasn't found.",t)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),Object.assign(Rl.prototype,{_getValue_unbound:Rl.prototype.getValue,_setValue_unbound:Rl.prototype.setValue}),Object.assign(Ll.prototype,{isAnimationObjectGroup:!0,add:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,i=this._indicesByUUID,r=this._paths,a=this._parsedPaths,o=this._bindings,s=o.length,l=void 0,q=0,c=arguments.length;q!==c;++q){var h=arguments[q],u=h.uuid,m=i[u];if(void 0===m){m=e++,i[u]=m,t.push(h);for(var d=0,p=s;d!==p;++d)o[d].push(new Rl(h,r[d],a[d]))}else if(m<n){l=t[m];var f=--n,g=t[f];i[g.uuid]=m,t[m]=g,i[u]=f,t[f]=h;for(d=0,p=s;d!==p;++d){var v=o[d],x=v[f],y=v[m];v[m]=x,void 0===y&&(y=new Rl(h,r[d],a[d])),v[f]=y}}else t[m]!==l&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n},remove:function(){for(var t=this._objects,e=this.nCachedObjects_,n=this._indicesByUUID,i=this._bindings,r=i.length,a=0,o=arguments.length;a!==o;++a){var s=arguments[a],l=s.uuid,q=n[l];if(void 0!==q&&q>=e){var c=e++,h=t[c];n[h.uuid]=q,t[q]=h,n[l]=c,t[c]=s;for(var u=0,m=r;u!==m;++u){var d=i[u],p=d[c],f=d[q];d[q]=p,d[c]=f}}}this.nCachedObjects_=e},uncache:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,i=this._indicesByUUID,r=this._bindings,a=r.length,o=0,s=arguments.length;o!==s;++o){var l=arguments[o].uuid,q=i[l];if(void 0!==q)if(delete i[l],q<n){var c=--n,h=t[c],u=t[g=--e];i[h.uuid]=q,t[q]=h,i[u.uuid]=c,t[c]=u,t.pop();for(var m=0,d=a;m!==d;++m){var p=(v=r[m])[c],f=v[g];v[q]=p,v[c]=f,v.pop()}}else{var g;i[(u=t[g=--e]).uuid]=q,t[q]=u,t.pop();for(m=0,d=a;m!==d;++m){var v;(v=r[m])[q]=v[g],v.pop()}}}this.nCachedObjects_=n},subscribe_:function(t,e){var n=this._bindingsIndicesByPath,i=n[t],r=this._bindings;if(void 0!==i)return r[i];var a=this._paths,o=this._parsedPaths,s=this._objects,l=s.length,q=this.nCachedObjects_,c=new Array(l);i=r.length,n[t]=i,a.push(t),o.push(e),r.push(c);for(var h=q,u=s.length;h!==u;++h){var m=s[h];c[h]=new Rl(m,t,e)}return c},unsubscribe_:function(t){var e=this._bindingsIndicesByPath,n=e[t];if(void 0!==n){var i=this._paths,r=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o];e[t[o]]=n,a[n]=s,a.pop(),r[n]=r[o],r.pop(),i[n]=i[o],i.pop()}}}),Object.assign(Pl.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(t){return this._startTime=t,this},setLoop:function(t,e){return this.loop=t,this.repetitions=e,this},setEffectiveWeight:function(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(t){return this._scheduleFading(t,0,1)},fadeOut:function(t){return this._scheduleFading(t,1,0)},crossFadeFrom:function(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){var i=this._clip.duration,r=t._clip.duration,a=r/i,o=i/r;t.warp(1,a,e),this.warp(o,1,e)}return this},crossFadeTo:function(t,e,n){return t.crossFadeFrom(this,e,n)},stopFading:function(){var t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},setEffectiveTimeScale:function(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(t){return this.timeScale=this._clip.duration/t,this.stopWarping()},syncWith:function(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()},halt:function(t){return this.warp(this._effectiveTimeScale,0,t)},warp:function(t,e,n){var i=this._mixer,r=i.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=i._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,l=a.sampleValues;return s[0]=r,s[1]=r+n,l[0]=t/o,l[1]=e/o,this},stopWarping:function(){var t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(t,e,n,i){if(this.enabled){var r=this._startTime;if(null!==r){var a=(t-r)*n;if(a<0||0===n)return;this._startTime=null,e=n*a}e*=this._updateTimeScale(t);var o=this._updateTime(e),s=this._updateWeight(t);if(s>0)for(var l=this._interpolants,q=this._propertyBindings,c=0,h=l.length;c!==h;++c)l[c].evaluate(o),q[c].accumulate(i,s)}else this._updateWeight(t)},_updateWeight:function(t){var e=0;if(this.enabled){e=this.weight;var n=this._weightInterpolant;if(null!==n){var i=n.evaluate(t)[0];e*=i,t>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=e,e},_updateTimeScale:function(t){var e=0;if(!this.paused){e=this.timeScale;var n=this._timeScaleInterpolant;if(null!==n)e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}return this._effectiveTimeScale=e,e},_updateTime:function(t){var e=this.time+t;if(0===t)return e;var n=this._clip.duration,i=this.loop,r=this._loopCount;if(i===be){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(e>=n)e=n;else{if(!(e<0))break t;e=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{var a=i===Ee;if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),e>=n||e<0){var o=Math.floor(e/n);e-=n*o,r+=Math.abs(o);var s=this.repetitions-r;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,e=t>0?n:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===s){var l=t<0;this._setEndings(l,!l,a)}else this._setEndings(!1,!1,a);this._loopCount=r,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}if(a&&1==(1&r))return this.time=e,n-e}return this.time=e,e},_setEndings:function(t,e,n){var i=this._interpolantSettings;n?(i.endingStart=Re,i.endingEnd=Re):(i.endingStart=t?this.zeroSlopeAtStart?Re:Ae:Le,i.endingEnd=e?this.zeroSlopeAtEnd?Re:Ae:Le)},_scheduleFading:function(t,e,n){var i=this._mixer,r=i.time,a=this._weightInterpolant;null===a&&(a=i._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=r,s[0]=e,o[1]=r+t,s[1]=n,this}}),Cl.prototype=Object.assign(Object.create(i.prototype),{constructor:Cl,_bindAction:function(t,e){var n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,a=t._propertyBindings,o=t._interpolants,s=n.uuid,l=this._bindingsByRootAndName,q=l[s];void 0===q&&(q={},l[s]=q);for(var c=0;c!==r;++c){var h=i[c],u=h.name,m=q[u];if(void 0!==m)a[c]=m;else{if(void 0!==(m=a[c])){null===m._cacheIndex&&(++m.referenceCount,this._addInactiveBinding(m,s,u));continue}var d=e&&e._propertyBindings[c].binding.parsedPath;++(m=new dl(Rl.create(n,u,d),h.ValueTypeName,h.getValueSize())).referenceCount,this._addInactiveBinding(m,s,u),a[c]=m}o[c].resultBuffer=m.buffer}},_activateAction:function(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){var e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]),this._addInactiveAction(t,n,e)}for(var r=t._propertyBindings,a=0,o=r.length;a!==o;++a){var s=r[a];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(t)}},_deactivateAction:function(t){if(this._isActiveAction(t)){for(var e=t._propertyBindings,n=0,i=e.length;n!==i;++n){var r=e[n];0==--r.useCount&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(t)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}},_isActiveAction:function(t){var e=t._cacheIndex;return null!==e&&e<this._nActiveActions},_addInactiveAction:function(t,e,n){var i=this._actions,r=this._actionsByClip,a=r[e];if(void 0===a)a={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=a;else{var o=a.knownActions;t._byClipCacheIndex=o.length,o.push(t)}t._cacheIndex=i.length,i.push(t),a.actionByRoot[n]=t},_removeInactiveAction:function(t){var e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i,e[i]=n,e.pop(),t._cacheIndex=null;var r=t._clip.uuid,a=this._actionsByClip,o=a[r],s=o.knownActions,l=s[s.length-1],q=t._byClipCacheIndex;l._byClipCacheIndex=q,s[q]=l,s.pop(),t._byClipCacheIndex=null,delete o.actionByRoot[(t._localRoot||this._root).uuid],0===s.length&&delete a[r],this._removeInactiveBindingsForAction(t)},_removeInactiveBindingsForAction:function(t){for(var e=t._propertyBindings,n=0,i=e.length;n!==i;++n){var r=e[n];0==--r.referenceCount&&this._removeInactiveBinding(r)}},_lendAction:function(t){var e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r},_takeBackAction:function(t){var e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r},_addInactiveBinding:function(t,e,n){var i=this._bindingsByRootAndName,r=i[e],a=this._bindings;void 0===r&&(r={},i[e]=r),r[n]=t,t._cacheIndex=a.length,a.push(t)},_removeInactiveBinding:function(t){var e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,a=this._bindingsByRootAndName,o=a[i],s=e[e.length-1],l=t._cacheIndex;s._cacheIndex=l,e[l]=s,e.pop(),delete o[r];t:{for(var q in o)break t;delete a[i]}},_lendBinding:function(t){var e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r},_takeBackBinding:function(t){var e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r},_lendControlInterpolant:function(){var t=this._controlInterpolants,e=this._nActiveControlInterpolants++,n=t[e];return void 0===n&&((n=new Es(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=e,t[e]=n),n},_takeBackControlInterpolant:function(t){var e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i,e[i]=t,r.__cacheIndex=n,e[n]=r},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(t,e){var n=e||this._root,i=n.uuid,r="string"==typeof t?Rs.findByName(n,t):t,a=null!==r?r.uuid:t,o=this._actionsByClip[a],s=null;if(void 0!==o){var l=o.actionByRoot[i];if(void 0!==l)return l;s=o.knownActions[0],null===r&&(r=s._clip)}if(null===r)return null;var q=new Pl(this,r,e);return this._bindAction(q,s),this._addInactiveAction(q,a,i),q},existingAction:function(t,e){var n=e||this._root,i=n.uuid,r="string"==typeof t?Rs.findByName(n,t):t,a=r?r.uuid:t,o=this._actionsByClip[a];return void 0!==o&&o.actionByRoot[i]||null},stopAllAction:function(){var t=this._actions,e=this._nActiveActions,n=this._bindings,i=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var r=0;r!==e;++r)t[r].reset();for(r=0;r!==i;++r)n[r].useCount=0;return this},update:function(t){t*=this.timeScale;for(var e=this._actions,n=this._nActiveActions,i=this.time+=t,r=Math.sign(t),a=this._accuIndex^=1,o=0;o!==n;++o){e[o]._update(i,t,r,a)}var s=this._bindings,l=this._nActiveBindings;for(o=0;o!==l;++o)s[o].apply(a);return this},getRoot:function(){return this._root},uncacheClip:function(t){var e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(void 0!==r){for(var a=r.knownActions,o=0,s=a.length;o!==s;++o){var l=a[o];this._deactivateAction(l);var q=l._cacheIndex,c=e[e.length-1];l._cacheIndex=null,l._byClipCacheIndex=null,c._cacheIndex=q,e[q]=c,e.pop(),this._removeInactiveBindingsForAction(l)}delete i[n]}},uncacheRoot:function(t){var e=t.uuid,n=this._actionsByClip;for(var i in n){var r=n[i].actionByRoot[e];void 0!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}var a=this._bindingsByRootAndName[e];if(void 0!==a)for(var o in a){var s=a[o];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(t,e){var n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}),Ol.prototype.clone=function(){return new Ol(void 0===this.value.clone?this.value:this.value.clone())},Il.prototype=Object.assign(Object.create(Jn.prototype),{constructor:Il,isInstancedBufferGeometry:!0,copy:function(t){return Jn.prototype.copy.call(this,t),this.maxInstancedCount=t.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)}}),Object.defineProperties(Nl.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(Nl.prototype,{isInterleavedBufferAttribute:!0,setX:function(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this},setY:function(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this},setZ:function(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this},setW:function(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this},getX:function(t){return this.data.array[t*this.data.stride+this.offset]},getY:function(t){return this.data.array[t*this.data.stride+this.offset+1]},getZ:function(t){return this.data.array[t*this.data.stride+this.offset+2]},getW:function(t){return this.data.array[t*this.data.stride+this.offset+3]},setXY:function(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this},setXYZ:function(t,e,n,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this},setXYZW:function(t,e,n,i,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=r,this}}),Object.defineProperty(Ul.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Ul.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setArray:function(t){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");return this.count=void 0!==t?t.length/this.stride:0,this.array=t,this},setDynamic:function(t){return this.dynamic=t,this},copy:function(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.dynamic=t.dynamic,this},copyAt:function(t,e,n){t*=this.stride,n*=e.stride;for(var i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(t){return this.onUploadCallback=t,this}}),Dl.prototype=Object.assign(Object.create(Ul.prototype),{constructor:Dl,isInstancedInterleavedBuffer:!0,copy:function(t){return Ul.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Bl.prototype=Object.assign(Object.create(Dn.prototype),{constructor:Bl,isInstancedBufferAttribute:!0,copy:function(t){return Dn.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Object.assign(Fl.prototype,{linePrecision:1,set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize()):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(t,e,n){var i=n||[];return Hl(t,this,i,e),i.sort(zl),i},intersectObjects:function(t,e,n){var i=n||[];if(!1===Array.isArray(t))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(var r=0,a=t.length;r<a;r++)Hl(t[r],this,i,e);return i.sort(zl),i}}),Object.assign(Gl.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var e=("undefined"==typeof performance?Date:performance).now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}),Object.assign(Vl.prototype,{set:function(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(t){return this.radius=t.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t.x,t.z),this.phi=Math.acos(ke.clamp(t.y/this.radius,-1,1))),this}}),Object.assign(kl.prototype,{set:function(t,e,n){return this.radius=t,this.theta=e,this.y=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this},setFromVector3:function(t){return this.radius=Math.sqrt(t.x*t.x+t.z*t.z),this.theta=Math.atan2(t.x,t.z),this.y=t.y,this}}),Object.assign(jl.prototype,{set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(){var t=new je;return function(e,n){var i=t.copy(n).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new je),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new je),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new je),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new je),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(){var t=new je;return function(e){return t.copy(e).clamp(this.min,this.max).sub(e).length()}}(),intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}),Wl.prototype=Object.create(Rn.prototype),Wl.prototype.constructor=Wl,Wl.prototype.isImmediateRenderObject=!0,Xl.prototype=Object.create(Jr.prototype),Xl.prototype.constructor=Xl,Xl.prototype.update=function(){var t=new Ye,e=new Ye,n=new Ze;return function(){var i=["a","b","c"];this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);var r=this.object.matrixWorld,a=this.geometry.attributes.position,o=this.object.geometry;if(o&&o.isGeometry)for(var s=o.vertices,l=o.faces,q=0,c=0,h=l.length;c<h;c++)for(var u=l[c],m=0,d=u.vertexNormals.length;m<d;m++){var p=s[u[i[m]]],f=u.vertexNormals[m];t.copy(p).applyMatrix4(r),e.copy(f).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),a.setXYZ(q,t.x,t.y,t.z),q+=1,a.setXYZ(q,e.x,e.y,e.z),q+=1}else if(o&&o.isBufferGeometry){var g=o.attributes.position,v=o.attributes.normal;for(q=0,m=0,d=g.count;m<d;m++)t.set(g.getX(m),g.getY(m),g.getZ(m)).applyMatrix4(r),e.set(v.getX(m),v.getY(m),v.getZ(m)),e.applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),a.setXYZ(q,t.x,t.y,t.z),q+=1,a.setXYZ(q,e.x,e.y,e.z),q+=1}a.needsUpdate=!0}}(),Yl.prototype=Object.create(Rn.prototype),Yl.prototype.constructor=Yl,Yl.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},Yl.prototype.update=function(){var t=new Ye,e=new Ye;return function(){this.light.updateMatrixWorld();var n=this.light.distance?this.light.distance:1e3,i=n*Math.tan(this.light.angle);this.cone.scale.set(i,i,n),t.setFromMatrixPosition(this.light.matrixWorld),e.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(e.sub(t)),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}(),Zl.prototype=Object.create(Jr.prototype),Zl.prototype.constructor=Zl,Zl.prototype.updateMatrixWorld=function(){var t=new Ye,e=new We,n=new We;return function(i){var r=this.bones,a=this.geometry,o=a.getAttribute("position");n.getInverse(this.root.matrixWorld);for(var s=0,l=0;s<r.length;s++){var q=r[s];q.parent&&q.parent.isBone&&(e.multiplyMatrices(n,q.matrixWorld),t.setFromMatrixPosition(e),o.setXYZ(l,t.x,t.y,t.z),e.multiplyMatrices(n,q.parent.matrixWorld),t.setFromMatrixPosition(e),o.setXYZ(l+1,t.x,t.y,t.z),l+=2)}a.getAttribute("position").needsUpdate=!0,Rn.prototype.updateMatrixWorld.call(this,i)}}(),Jl.prototype=Object.create(pi.prototype),Jl.prototype.constructor=Jl,Jl.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Jl.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},Ql.prototype=Object.create(Rn.prototype),Ql.prototype.constructor=Ql,Ql.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Ql.prototype.update=function(){var t=.5*this.light.width,e=.5*this.light.height,n=this.line.geometry.attributes.position,i=n.array;i[0]=t,i[1]=-e,i[2]=0,i[3]=t,i[4]=e,i[5]=0,i[6]=-t,i[7]=e,i[8]=0,i[9]=-t,i[10]=-e,i[11]=0,i[12]=t,i[13]=-e,i[14]=0,n.needsUpdate=!0,void 0!==this.color?this.line.material.color.set(this.color):this.line.material.color.copy(this.light.color)},Kl.prototype=Object.create(Rn.prototype),Kl.prototype.constructor=Kl,Kl.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Kl.prototype.update=function(){var t=new Ye,e=new gn,n=new gn;return function(){var i=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var r=i.geometry.getAttribute("color");e.copy(this.light.color),n.copy(this.light.groundColor);for(var a=0,o=r.count;a<o;a++){var s=a<o/2?e:n;r.setXYZ(a,s.r,s.g,s.b)}r.needsUpdate=!0}i.lookAt(t.setFromMatrixPosition(this.light.matrixWorld).negate())}}(),$l.prototype=Object.create(Jr.prototype),$l.prototype.constructor=$l,tq.prototype=Object.create(Jr.prototype),tq.prototype.constructor=tq,eq.prototype=Object.create(Jr.prototype),eq.prototype.constructor=eq,eq.prototype.update=function(){var t=new Ye,e=new Ye,n=new Ze;return function(){this.object.updateMatrixWorld(!0),n.getNormalMatrix(this.object.matrixWorld);for(var i=this.object.matrixWorld,r=this.geometry.attributes.position,a=this.object.geometry,o=a.vertices,s=a.faces,l=0,q=0,c=s.length;q<c;q++){var h=s[q],u=h.normal;t.copy(o[h.a]).add(o[h.b]).add(o[h.c]).divideScalar(3).applyMatrix4(i),e.copy(u).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),r.setXYZ(l,t.x,t.y,t.z),l+=1,r.setXYZ(l,e.x,e.y,e.z),l+=1}r.needsUpdate=!0}}(),nq.prototype=Object.create(Rn.prototype),nq.prototype.constructor=nq,nq.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},nq.prototype.update=function(){var t=new Ye,e=new Ye,n=new Ye;return function(){t.setFromMatrixPosition(this.light.matrixWorld),e.setFromMatrixPosition(this.light.target.matrixWorld),n.subVectors(e,t),this.lightPlane.lookAt(n),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(n),this.targetLine.scale.z=n.length()}}(),iq.prototype=Object.create(Jr.prototype),iq.prototype.constructor=iq,iq.prototype.update=function(){var t,e,n=new Ye,i=new Ln;function r(r,a,o,s){n.set(a,o,s).unproject(i);var l=e[r];if(void 0!==l)for(var q=t.getAttribute("position"),c=0,h=l.length;c<h;c++)q.setXYZ(l[c],n.x,n.y,n.z)}return function(){t=this.geometry,e=this.pointMap;i.projectionMatrix.copy(this.camera.projectionMatrix),r("c",0,0,-1),r("t",0,0,1),r("n1",-1,-1,-1),r("n2",1,-1,-1),r("n3",-1,1,-1),r("n4",1,1,-1),r("f1",-1,-1,1),r("f2",1,-1,1),r("f3",-1,1,1),r("f4",1,1,1),r("u1",.7,1.1,-1),r("u2",-.7,1.1,-1),r("u3",0,2,-1),r("cf1",-1,0,1),r("cf2",1,0,1),r("cf3",0,-1,1),r("cf4",0,1,1),r("cn1",-1,0,-1),r("cn2",1,0,-1),r("cn3",0,-1,-1),r("cn4",0,1,-1),t.getAttribute("position").needsUpdate=!0}}(),rq.prototype=Object.create(Jr.prototype),rq.prototype.constructor=rq,rq.prototype.update=function(){var t=new qn;return function(e){if(void 0!==e&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&t.setFromObject(this.object),!t.isEmpty()){var n=t.min,i=t.max,r=this.geometry.attributes.position,a=r.array;a[0]=i.x,a[1]=i.y,a[2]=i.z,a[3]=n.x,a[4]=i.y,a[5]=i.z,a[6]=n.x,a[7]=n.y,a[8]=i.z,a[9]=i.x,a[10]=n.y,a[11]=i.z,a[12]=i.x,a[13]=i.y,a[14]=n.z,a[15]=n.x,a[16]=i.y,a[17]=n.z,a[18]=n.x,a[19]=n.y,a[20]=n.z,a[21]=i.x,a[22]=n.y,a[23]=n.z,r.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),rq.prototype.setFromObject=function(t){return this.object=t,this.update(),this},aq.prototype=Object.create(Jr.prototype),aq.prototype.constructor=aq,aq.prototype.updateMatrixWorld=function(t){var e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),Rn.prototype.updateMatrixWorld.call(this,t))},oq.prototype=Object.create(Zr.prototype),oq.prototype.constructor=oq,oq.prototype.updateMatrixWorld=function(t){var e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.lookAt(this.plane.normal),Rn.prototype.updateMatrixWorld.call(this,t)},sq.prototype=Object.create(Rn.prototype),sq.prototype.constructor=sq,sq.prototype.setDirection=(Sl=new Ye,function(t){t.y>.99999?this.quaternion.set(0,0,0,1):t.y<-.99999?this.quaternion.set(1,0,0,0):(Sl.set(t.z,0,-t.x).normalize(),Tl=Math.acos(t.y),this.quaternion.setFromAxisAngle(Sl,Tl))}),sq.prototype.setLength=function(t,e,n){void 0===e&&(e=.2*t),void 0===n&&(n=.2*e),this.line.scale.set(1,Math.max(0,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()},sq.prototype.setColor=function(t){this.line.material.color.copy(t),this.cone.material.color.copy(t)},lq.prototype=Object.create(Jr.prototype),lq.prototype.constructor=lq;var cq=0,hq=1;function uq(t){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),t}function mq(t){return void 0===t&&(t=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function dq(t,e){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new $r(t,e)}function pq(t){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new Vr(t)}function fq(t,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new $r(t,e)}function gq(t){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new Kr(t)}function vq(t){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new Kr(t)}function xq(t){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new Kr(t)}function yq(t,e,n){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new Ye(t,e,n)}function _q(t,e){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new Dn(t,e).setDynamic(!0)}function bq(t,e){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new Bn(t,e)}function wq(t,e){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new Fn(t,e)}function Eq(t,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new zn(t,e)}function Mq(t,e){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Hn(t,e)}function Tq(t,e){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Gn(t,e)}function Sq(t,e){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new Vn(t,e)}function Aq(t,e){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new kn(t,e)}function Rq(t,e){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new jn(t,e)}function Lq(t,e){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Wn(t,e)}function Pq(t){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),jo.call(this,t),this.type="catmullrom",this.closed=!0}function Cq(t){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),jo.call(this,t),this.type="catmullrom"}function Oq(t){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),jo.call(this,t),this.type="catmullrom"}function Iq(t){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new lq(t)}function Nq(t,e){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new rq(t,e)}function Uq(t,e){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Jr(new lo(t.geometry),new Yr({color:void 0!==e?e:16777215}))}function Dq(t,e){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Jr(new ra(t.geometry),new Yr({color:void 0!==e?e:16777215}))}function Bq(t){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new Po(t)}function Fq(t){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new Oo(t)}Do.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(Do.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Object.assign(is.prototype,{createPointsGeometry:function(t){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getPoints(t);return this.createGeometry(e)},createSpacedPointsGeometry:function(t){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getSpacedPoints(t);return this.createGeometry(e)},createGeometry:function(t){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var e=new Un,n=0,i=t.length;n<i;n++){var r=t[n];e.vertices.push(new Ye(r.x,r.y,r.z||0))}return e}}),Object.assign(rs.prototype,{fromPoints:function(t){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)}}),Pq.prototype=Object.create(jo.prototype),Cq.prototype=Object.create(jo.prototype),Oq.prototype=Object.create(jo.prototype),Object.assign(Oq.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),$l.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Zl.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(Ds.prototype,{extractUrlBase:function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Bs.extractUrlBase(t)}}),Object.assign(jl.prototype,{center:function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},size:function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)}}),Object.assign(qn.prototype,{center:function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionSphere:function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},size:function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)}}),mi.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},Object.assign(ke,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(t){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),ke.floorPowerOfTwo(t)},nextPowerOfTwo:function(t){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),ke.ceilPowerOfTwo(t)}}),Object.assign(Ze.prototype,{flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},multiplyVector3:function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(We.prototype,{extractPosition:function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},getPosition:function(){var t;return function(){return void 0===t&&(t=new Ye),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),t.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector4:function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},crossVector:function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(t){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(t)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(t,e,n,i,r,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,i,n,r,a)}}),hn.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},Xe.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},Object.assign(ui.prototype,{isIntersectionBox:function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionPlane:function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},isIntersectionSphere:function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)}}),Object.assign(di.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},midpoint:function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},normal:function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},plane:function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)}}),Object.assign(di,{barycoordFromPoint:function(t,e,n,i,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),di.getBarycoord(t,e,n,i,r)},normal:function(t,e,n,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),di.getNormal(t,e,n,i)}}),Object.assign(as.prototype,{extractAllPoints:function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},extrude:function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new Ya(this,t)},makeGeometry:function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new ao(this,t)}}),Object.assign(je.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Ye.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},getScaleFromMatrix:function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},getColumnFromMatrix:function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},applyProjection:function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},fromAttribute:function(t,e,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(an.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Un.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign(Rn.prototype,{getChildByName:function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties(Rn.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(kr.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(jr.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),Object.defineProperty(Do.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(t){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=t}}),Nr.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(os.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(Dn.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")}}),Object.assign(Jn.prototype,{addIndex:function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},addDrawCall:function(t,e,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(Jn.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.assign(Za.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(Ol.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(qi.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new gn}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===S}}}),Object.defineProperties(_o.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(hi.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Object.assign(Br.prototype,{getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")}}),Object.defineProperties(Br.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Lr.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(on.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),Object.defineProperties(Dr.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}}}),hl.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var e=this;return(new sl).load(t,function(t){e.setBuffer(t)}),this},ml.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},ql.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)};var zq={merge:function(t,e,n){var i;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),e.isMesh&&(e.matrixAutoUpdate&&e.updateMatrix(),i=e.matrix,e=e.geometry),t.merge(e,i,n)},center:function(t){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),t.center()}},Hq={crossOrigin:void 0,loadTexture:function(t,e,n,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var r=new Uo;r.setCrossOrigin(this.crossOrigin);var a=r.load(t,n,void 0,i);return e&&(a.mapping=e),a},loadTextureCube:function(t,e,n,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var r=new No;r.setCrossOrigin(this.crossOrigin);var a=r.load(t,n,void 0,i);return e&&(a.mapping=e),a},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}};function Gq(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(t,e){console.warn("THREE.Projector: .projectVector() is now vector.project()."),t.project(e)},this.unprojectVector=function(t,e){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),t.unproject(e)},this.pickingRay=function(){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}}function Vq(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),this.domElement=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}}var kq={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")}};function jq(){console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r,a,o,s,l,q=n(6),c=window.THREE=q;n(5),n(4),function(){i=new q.PerspectiveCamera(70,window.innerWidth/window.innerHeight,.01,1e3);var t=new c.OrbitControls(i);i.position.set(0,0,20),t.update(),r=new q.Scene;var e=new q.AxesHelper(5);r.add(e),o=new q.BoxGeometry(.2,.2,.2),s=new q.MeshNormalMaterial,l=new q.Mesh(o,s);var h=n(0),u=new q.Font(h),m=new q.TextGeometry("BIG",{font:u,size:10,height:1,curveSegments:12,bevelEnabled:!0,bevelThickness:2,bevelSize:.5,bevelSegments:10}),d=new q.Mesh(m,function(){var t=function(t,e,n,i){var r=t+"_"+e+"_000"+n+i;return r},e=(o=10,s=2,l=s-o.toString().length+1,Array(+(l>0&&l)).join("0")+o),n=(i="./images/maps/GSG_PRO_STUDIOS_METAL_0"+e,r=1024,a=".png",[t(i,r,1,a),t(i,r,2,a),t(i,r,3,a),t(i,r,4,a),t(i,r,5,a),t(i,r,6,a)]);var i,r,a;var o,s,l;q.ImageUtils.loadTexture("./images/maps/bump.jpg").mapping=q.CubeUVReflectionMapping;var c=q.ImageUtils.loadTextureCube(n);return new q.MeshStandardMaterial({envMap:c,envMapIntensity:1.2,metalness:1,roughness:.32})}());r.add(d);var p=(new q.Box3).setFromObject(d);d.position.x=-p.max.x/2,d.position.y=-p.max.y/2,(a=new q.WebGLRenderer({antialias:!0})).setSize(window.innerWidth,window.innerHeight),document.body.appendChild(a.domElement)}(),function t(){requestAnimationFrame(t);l.rotation.x+=.01;l.rotation.y+=.02;a.render(r,i)}()}]);